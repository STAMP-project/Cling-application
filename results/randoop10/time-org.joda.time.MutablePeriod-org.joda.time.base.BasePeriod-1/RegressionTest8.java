import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        boolean boolean46 = mutablePeriod30.isSupported(durationFieldType44);
        int int47 = periodType26.indexOf(durationFieldType44);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, periodType26, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.hourOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = mutablePeriod71.getFieldTypes();
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePeriod) mutablePeriod71, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField77 = chronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = chronology61.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology61);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(100L, (-124L), chronology61);
        org.joda.time.DateTimeField dateTimeField81 = chronology61.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField82 = chronology61.yearOfCentury();
        org.joda.time.DurationField durationField83 = chronology61.days();
        org.joda.time.DurationField durationField84 = chronology61.centuries();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(durationField84);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        org.joda.time.DurationField durationField77 = chronology74.minutes();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.dayOfYear();
        org.joda.time.Chronology chronology79 = chronology74.withUTC();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.weekyearOfCentury();
        org.joda.time.DurationField durationField81 = chronology79.weeks();
        long long85 = chronology79.add(2100L, 2L, (int) '4');
        org.joda.time.DurationField durationField86 = chronology79.minutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:39:30.379Z" + "'", str42, "2022-02-11T09:39:30.379Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 2204L + "'", long85 == 2204L);
        org.junit.Assert.assertNotNull(durationField86);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration51 = duration31.withDurationAdded((long) (short) -1, 8);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Period period64 = interval63.toPeriod();
        org.joda.time.Chronology chronology65 = interval63.getChronology();
        org.joda.time.Duration duration66 = interval63.toDuration();
        org.joda.time.Duration duration68 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) ' ');
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.dayTime();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod71.addHours(0);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration85.toPeriod(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Interval interval89 = duration85.toIntervalTo(readableInstant88);
        org.joda.time.Period period90 = interval89.toPeriod();
        org.joda.time.Chronology chronology91 = interval89.getChronology();
        mutablePeriod71.setPeriod((org.joda.time.ReadableDuration) duration77, chronology91);
        org.joda.time.DateTimeField dateTimeField93 = chronology91.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((java.lang.Object) duration66, periodType69, chronology91);
        mutablePeriod94.addHours((int) (short) 100);
        int int97 = mutablePeriod94.getSeconds();
        mutablePeriod94.clear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 40 + "'", int97 == 40);
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant19, readableDuration20);
        mutablePeriod21.setMillis(0);
        int[] intArray24 = mutablePeriod21.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology13.validate(readablePartial18, intArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withSecondsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, periodType3);
        int int7 = mutablePeriod6.getHours();
        int int8 = mutablePeriod6.getMonths();
        int int9 = mutablePeriod6.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod6.setMonths((-42));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Days" + "'", str2, "Days");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        java.util.Locale locale42 = periodFormatter39.getLocale();
        boolean boolean43 = periodFormatter39.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter44 = periodFormatter39.getPrinter();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod48.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod48.toMutablePeriod();
        int[] intArray52 = mutablePeriod48.getValues();
        mutablePeriod48.addHours(0);
        mutablePeriod48.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray57 = mutablePeriod48.getFieldTypes();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.forFields(durationFieldTypeArray57);
        org.joda.time.DurationFieldType durationFieldType60 = periodType58.getFieldType(4);
        org.joda.time.format.PeriodFormatter periodFormatter61 = periodFormatter39.withParseType(periodType58);
        java.util.Locale locale62 = periodFormatter39.getLocale();
        java.util.Locale locale63 = null;
        org.joda.time.format.PeriodFormatter periodFormatter64 = periodFormatter39.withLocale(locale63);
        java.util.Locale locale65 = periodFormatter39.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod66 = org.joda.time.MutablePeriod.parse("PT126001S", periodFormatter39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(periodPrinter44);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(periodFormatter61);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertNotNull(periodFormatter64);
        org.junit.Assert.assertNull(locale65);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1644572129538L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Seconds seconds14 = duration9.toStandardSeconds();
        long long15 = duration9.getMillis();
        org.joda.time.Duration duration17 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration9, 102);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.DateTime dateTime58 = interval56.getEnd();
        boolean boolean59 = interval44.contains((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        java.lang.String str74 = dateTime73.toString();
        boolean boolean75 = dateTime58.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Interval interval77 = duration9.toIntervalFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Interval interval78 = interval77.toInterval();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1260100000L + "'", long15 == 1260100000L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-11T09:39:30.886Z" + "'", str74, "2022-02-11T09:39:30.886Z");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(interval78);
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        org.joda.time.DateTimeZone dateTimeZone72 = chronology68.getZone();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration18.toPeriod(periodType26, chronology27);
        int int29 = duration8.compareTo((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod31.addHours(0);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration37, chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.Period period55 = duration18.toPeriod(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(350L, chronology51);
        org.joda.time.Chronology chronology59 = chronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField60 = chronology51.dayOfMonth();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str53, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = mutablePeriod32.getFieldTypes();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod37.addHours(0);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        mutablePeriod37.setPeriod((org.joda.time.ReadableDuration) duration43, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType35, chronology57);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) (short) 1, (long) (short) 100, periodType22, chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long67 = chronology57.getDateTimeMillis(52, 36, 9, (-14));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -14 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        java.lang.String str11 = mutablePeriod4.toString();
        mutablePeriod4.addMonths((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod4.toMutablePeriod();
        mutablePeriod4.setDays(4);
        int[] intArray17 = mutablePeriod4.getValues();
        mutablePeriod4.add(100, (-20), 51, (-1), 80, 10, (-3), (-1));
        mutablePeriod4.setMonths((int) (byte) 1);
        mutablePeriod4.addDays(33);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P10W" + "'", str11, "P10W");
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 10, 4, 0, 0, 0, 0]");
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.setMillis((int) (short) 0);
        mutablePeriod4.addMonths((int) (short) 1);
        mutablePeriod4.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod4.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1644572293957L, periodType13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(160000L);
        long long2 = duration1.getMillis();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.add((long) ' ');
        int int9 = mutablePeriod6.getDays();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.millis();
        mutablePeriod6.add(durationFieldType10, (int) (byte) 1);
        int int13 = mutablePeriod6.getWeeks();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod17.add((long) ' ');
        mutablePeriod17.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutablePeriod26.setPeriod(readablePeriod27);
        mutablePeriod26.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.days();
        int int32 = mutablePeriod26.get(durationFieldType31);
        boolean boolean33 = mutablePeriod17.isSupported(durationFieldType31);
        boolean boolean34 = mutablePeriod6.isSupported(durationFieldType31);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration36 = mutablePeriod6.toDurationTo(readableInstant35);
        long long37 = duration36.getStandardSeconds();
        int int38 = duration1.compareTo((org.joda.time.ReadableDuration) duration36);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 13824000000000L + "'", long2 == 13824000000000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        long long36 = interval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = interval32.toMutableInterval();
        long long38 = mutableInterval37.getEndMillis();
        org.joda.time.Interval interval39 = mutableInterval37.toInterval();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((int) '4', 0, (int) (byte) 10, 1, (int) (short) 0, (int) (short) 0, (int) (short) 10, 4);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod48.add(durationFieldType49, 1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        java.lang.Object obj61 = mutablePeriod59.clone();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((java.lang.Object) duration63, chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        mutablePeriod59.add((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Interval interval69 = interval67.toInterval();
        long long70 = interval69.getEndMillis();
        boolean boolean72 = interval69.equals((java.lang.Object) 34L);
        mutablePeriod48.setPeriod((org.joda.time.ReadableInterval) interval69);
        boolean boolean74 = interval39.equals((java.lang.Object) interval69);
        java.lang.String str75 = interval39.toString();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1260100000L + "'", long36 == 1260100000L);
        org.junit.Assert.assertNotNull(mutableInterval37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1644572371202L + "'", long38 == 1644572371202L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1644572371202L + "'", long70 == 1644572371202L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-01-27T19:37:51.202Z/2022-02-11T09:39:31.202Z" + "'", str75, "2022-01-27T19:37:51.202Z/2022-02-11T09:39:31.202Z");
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        java.lang.String str34 = duration31.toString();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean37 = periodType35.equals((java.lang.Object) false);
        org.joda.time.Period period38 = duration31.toPeriod(periodType35);
        org.joda.time.PeriodType periodType39 = periodType35.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(periodType39);
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod40, (long) (byte) 1, (long) '#');
        org.joda.time.DurationField durationField44 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField45 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = chronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT126000S" + "'", str34, "PT126000S");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        long long49 = duration31.getStandardSeconds();
        org.joda.time.Duration duration51 = duration31.plus(1644572325697L);
        org.joda.time.Period period52 = duration31.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 126000L + "'", long49 == 126000L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        int int34 = periodType17.indexOf(durationFieldType33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod36.addHours(0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        mutablePeriod36.setPeriod((org.joda.time.ReadableDuration) duration42, chronology56);
        org.joda.time.DurationField durationField58 = durationFieldType33.getField(chronology56);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Period period73 = interval72.toPeriod();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.hourOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology74);
        org.joda.time.DateTimeField dateTimeField78 = chronology74.dayOfMonth();
        org.joda.time.Chronology chronology79 = chronology74.withUTC();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        java.lang.String str81 = chronology79.toString();
        org.joda.time.DateTimeField dateTimeField82 = chronology79.millisOfSecond();
        org.joda.time.DurationField durationField83 = durationFieldType33.getField(chronology79);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ISOChronology[UTC]" + "'", str81, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours(10L);
        long long5 = duration4.getMillis();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours(10L);
        long long8 = duration7.getMillis();
        org.joda.time.Duration duration9 = duration4.minus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Hours hours14 = duration13.toStandardHours();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant15, (org.joda.time.ReadableDuration) duration16, periodType17);
        org.joda.time.Duration duration20 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration16, 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        mutablePeriod28.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod28.copy();
        org.joda.time.PeriodType periodType40 = mutablePeriod28.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod28.toMutablePeriod();
        mutablePeriod28.clear();
        boolean boolean43 = duration20.equals((java.lang.Object) mutablePeriod28);
        boolean boolean44 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean45 = duration1.isEqual((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(0L);
        boolean boolean48 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration47);
        java.lang.Object obj49 = null;
        boolean boolean50 = duration1.equals(obj49);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 36000000L + "'", long5 == 36000000L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 36000000L + "'", long8 == 36000000L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology18.minutes();
        org.joda.time.Chronology chronology22 = chronology18.withUTC();
        org.joda.time.DurationField durationField23 = chronology18.hours();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekyear();
        org.joda.time.Chronology chronology22 = chronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 340);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.add((org.joda.time.ReadablePeriod) mutablePeriod9);
        boolean boolean11 = duration1.equals((java.lang.Object) mutablePeriod9);
        mutablePeriod9.addWeeks(0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        mutablePeriod5.clear();
        int int46 = mutablePeriod5.getWeeks();
        java.lang.String str47 = mutablePeriod5.toString();
        mutablePeriod5.setPeriod(1644572268427L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0S" + "'", str47, "PT0S");
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        mutablePeriod4.addDays(10);
        mutablePeriod4.setWeeks((int) (byte) -1);
        mutablePeriod4.addWeeks(8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((java.lang.Object) period28, chronology44);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod4, chronology44);
        long long58 = chronology44.getDateTimeMillis((int) (short) 1, 3, (int) (byte) 1, 0, (int) '#', (int) (short) 10, 0);
        org.joda.time.DateTimeField dateTimeField59 = chronology44.dayOfWeek();
        org.joda.time.DurationField durationField60 = chronology44.halfdays();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-62130497090000L) + "'", long58 == (-62130497090000L));
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.days();
        java.lang.String str10 = periodType9.getName();
        org.joda.time.PeriodType periodType11 = periodType9.withWeeksRemoved();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration8.toPeriod(periodType9, chronology12);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter2.withParseType(periodType9);
        java.lang.String str15 = periodType9.getName();
        org.joda.time.PeriodType periodType16 = periodType9.withMinutesRemoved();
        org.joda.time.PeriodType periodType17 = periodType9.withDaysRemoved();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Days" + "'", str10, "Days");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Days" + "'", str15, "Days");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        java.lang.String str11 = duration8.toString();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean14 = periodType12.equals((java.lang.Object) false);
        org.joda.time.Period period15 = duration8.toPeriod(periodType12);
        org.joda.time.PeriodType periodType16 = periodType12.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        boolean boolean18 = periodType12.equals((java.lang.Object) periodType17);
        org.joda.time.PeriodType periodType19 = periodType12.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        boolean boolean21 = periodType12.isSupported(durationFieldType20);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withParseType(periodType12);
        boolean boolean23 = periodFormatter2.isPrinter();
        java.util.Locale locale24 = periodFormatter2.getLocale();
        java.lang.StringBuffer stringBuffer25 = null;
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration37.toPeriod(periodType45, chronology46);
        org.joda.time.PeriodType periodType48 = periodType45.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.months();
        int int50 = periodType48.indexOf(durationFieldType49);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(periodType48);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1644572120402L, 0L, periodType48);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer25, (org.joda.time.ReadablePeriod) mutablePeriod52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT126000S" + "'", str11, "PT126000S");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = periodType18.isSupported(durationFieldType30);
        org.joda.time.PeriodType periodType33 = periodType18.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(60000L, periodType18);
        org.joda.time.PeriodType periodType35 = periodType18.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(periodType35);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        mutablePeriod41.setPeriod((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Chronology chronology57 = interval53.getChronology();
        java.lang.String str58 = chronology57.toString();
        org.joda.time.DurationField durationField59 = chronology57.halfdays();
        boolean boolean60 = mutablePeriod36.equals((java.lang.Object) durationField59);
        mutablePeriod36.setMinutes(0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str58, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = interval11.isAfter(readableInterval12);
        org.joda.time.Chronology chronology14 = interval11.getChronology();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration25 = duration16.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration24.withMillis(1644572115768L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration38 = duration29.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.DateTime dateTime67 = interval65.getEnd();
        boolean boolean68 = interval53.contains((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration76.toPeriod(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        org.joda.time.Interval interval81 = interval80.toInterval();
        org.joda.time.DateTime dateTime82 = interval80.getEnd();
        java.lang.String str83 = dateTime82.toString();
        boolean boolean84 = dateTime67.isBefore((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration85 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateTime67);
        long long86 = dateTime67.getMillis();
        org.joda.time.Interval interval87 = duration29.toIntervalFrom((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Interval interval88 = duration24.toIntervalFrom((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology89 = interval88.getChronology();
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.time();
        int int91 = periodType90.size();
        org.joda.time.PeriodType periodType92 = periodType90.withYearsRemoved();
        org.joda.time.PeriodType periodType93 = periodType92.withHoursRemoved();
        org.joda.time.Period period94 = interval88.toPeriod(periodType92);
        org.joda.time.Period period95 = interval11.toPeriod(periodType92);
        org.joda.time.Interval interval96 = interval11.toInterval();
        org.joda.time.Chronology chronology97 = interval11.getChronology();
        org.joda.time.Period period98 = interval11.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-02-11T09:39:32.033Z" + "'", str83, "2022-02-11T09:39:32.033Z");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(duration85);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1644572372033L + "'", long86 == 1644572372033L);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.toMutablePeriod();
        int int13 = mutablePeriod12.getSeconds();
        mutablePeriod12.clear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod21.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod32 = mutablePeriod21.copy();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = mutablePeriod21.toDurationTo(readableInstant33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology37 = null;
        mutablePeriod21.setPeriod((org.joda.time.ReadableDuration) duration36, chronology37);
        boolean boolean39 = duration13.isEqual((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.DateTime dateTime68 = interval66.getEnd();
        boolean boolean69 = interval54.contains((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Duration duration75 = duration73.plus(readableDuration74);
        org.joda.time.Duration duration77 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) (byte) 10);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = duration77.toPeriod(chronology78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Interval interval81 = duration77.toIntervalTo(readableInstant80);
        org.joda.time.Interval interval82 = interval81.toInterval();
        org.joda.time.DateTime dateTime83 = interval81.getEnd();
        java.lang.String str84 = dateTime83.toString();
        boolean boolean85 = dateTime68.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Duration duration86 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone87 = dateTime68.getZone();
        org.joda.time.Period period88 = duration13.toPeriodTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(readableDuration11, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime68.getZone();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(readableDuration10, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration92 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutablePeriod mutablePeriod93 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.setMillis(45);
        int[] intArray96 = mutablePeriod3.getValues();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2022-02-11T09:39:32.278Z" + "'", str84, "2022-02-11T09:39:32.278Z");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(mutablePeriod93);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0, 0, 0, 0, 0, 0, 45]");
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) 2);
        boolean boolean4 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        boolean boolean21 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration14.toPeriod(periodType22, chronology23);
        org.joda.time.PeriodType periodType25 = periodType22.withYearsRemoved();
        org.joda.time.PeriodType periodType26 = periodType22.withWeeksRemoved();
        org.joda.time.PeriodType periodType27 = periodType22.withWeeksRemoved();
        org.joda.time.Period period28 = duration1.toPeriod(periodType27);
        org.joda.time.Minutes minutes29 = duration1.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.weekOfWeekyear();
        long long34 = chronology13.add(1644572281777L, 1644572180691L, 1);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3289144462468L + "'", long34 == 3289144462468L);
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfMinute();
        boolean boolean40 = mutablePeriod3.equals((java.lang.Object) chronology35);
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DurationField durationField42 = chronology35.seconds();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.Chronology chronology15 = interval11.getChronology();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        org.joda.time.Duration duration42 = interval39.toDuration();
        boolean boolean43 = interval27.overlaps((org.joda.time.ReadableInterval) interval39);
        long long44 = interval39.getStartMillis();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        boolean boolean57 = duration46.isLongerThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.DateTime dateTime71 = interval69.getEnd();
        org.joda.time.Interval interval72 = duration50.toIntervalFrom((org.joda.time.ReadableInstant) dateTime71);
        java.lang.String str73 = dateTime71.toString();
        boolean boolean74 = interval39.contains((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean75 = interval11.contains((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Chronology chronology76 = interval39.getChronology();
        org.joda.time.DateTime dateTime77 = interval39.getStart();
        java.lang.String str78 = interval39.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1643312272427L + "'", long44 == 1643312272427L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:39:32.428Z" + "'", str73, "2022-02-11T09:39:32.428Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-01-27T19:37:52.427Z/2022-02-11T09:39:32.427Z" + "'", str78, "2022-01-27T19:37:52.427Z/2022-02-11T09:39:32.427Z");
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod8.copy();
        org.joda.time.PeriodType periodType20 = mutablePeriod8.getPeriodType();
        boolean boolean21 = periodType0.equals((java.lang.Object) mutablePeriod8);
        org.joda.time.PeriodType periodType22 = periodType0.withHoursRemoved();
        java.lang.String str23 = periodType22.getName();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "TimeNoHours" + "'", str23, "TimeNoHours");
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        mutablePeriod5.addMinutes((int) (short) 0);
        mutablePeriod5.addDays((int) (short) 100);
        mutablePeriod5.setMillis((-53));
        mutablePeriod5.addWeeks(7);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.weekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod27.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = mutablePeriod27.get(durationFieldType30);
        int int32 = mutablePeriod27.size();
        mutablePeriod27.add((long) 14);
        long long37 = chronology15.add((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 4, 456825);
        mutablePeriod27.addYears(658);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-12791096L) + "'", long37 == (-12791096L));
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        int int42 = periodType41.size();
        org.joda.time.PeriodType periodType43 = periodType41.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter40.withParseType(periodType43);
        java.util.Locale locale45 = null;
        org.joda.time.format.PeriodFormatter periodFormatter46 = periodFormatter44.withLocale(locale45);
        java.util.Locale locale47 = periodFormatter46.getLocale();
        boolean boolean48 = periodFormatter46.isParser();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatter46);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes(1644572108797L);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        boolean boolean39 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration36);
        boolean boolean41 = duration28.equals((java.lang.Object) 0.0d);
        org.joda.time.ReadableDuration readableDuration42 = null;
        boolean boolean43 = duration28.isLongerThan(readableDuration42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod47.setMillis((int) (short) 0);
        mutablePeriod47.addMonths((int) (short) 1);
        mutablePeriod47.setMinutes((int) (byte) 1);
        mutablePeriod47.addYears(1);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        boolean boolean62 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration59);
        mutablePeriod47.add((org.joda.time.ReadableDuration) duration57);
        int int64 = duration28.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration65 = duration25.plus((org.joda.time.ReadableDuration) duration57);
        long long66 = duration65.getMillis();
        long long67 = duration65.getStandardDays();
        org.joda.time.Duration duration70 = duration65.withDurationAdded(1643312171892L, 3);
        long long71 = duration65.getStandardHours();
        org.joda.time.Duration duration74 = duration65.withDurationAdded((long) 112, (int) (byte) 10);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 98674326653820000L + "'", long66 == 98674326653820000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1142063965L + "'", long67 == 1142063965L);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 27409535181L + "'", long71 == 27409535181L);
        org.junit.Assert.assertNotNull(duration74);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod29.addMonths(1);
        mutablePeriod29.setPeriod((long) (byte) 100, 1644572120402L);
        mutablePeriod29.setWeeks((int) (byte) 0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray47 = mutablePeriod29.getFieldTypes();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.forFields(durationFieldTypeArray47);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.forFields(durationFieldTypeArray47);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3, periodType3);
        mutablePeriod4.clear();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod10.add(1644572121340L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        boolean boolean44 = interval29.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = interval29.getStart();
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = dateTime45.isSupported(dateTimeFieldType47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getEnd();
        boolean boolean76 = interval61.contains((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Instant instant77 = dateTime75.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        boolean boolean79 = instant77.isSupported(dateTimeFieldType78);
        org.joda.time.Chronology chronology80 = instant77.getChronology();
        mutablePeriod10.setPeriod((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) instant77);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Days" + "'", str2, "Days");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-01-27T19:37:52.973Z" + "'", str46, "2022-01-27T19:37:52.973Z");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType2 = periodType1.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1644572187235L, periodType1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1644572187235");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod24.add((long) ' ');
        mutablePeriod24.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        int int39 = mutablePeriod33.get(durationFieldType38);
        boolean boolean40 = mutablePeriod24.isSupported(durationFieldType38);
        int int41 = periodType20.indexOf(durationFieldType38);
        org.joda.time.PeriodType periodType42 = periodType20.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(periodType20);
        mutablePeriod43.setYears(487);
        mutablePeriod43.addDays(49);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod7.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType22 = mutablePeriod20.getFieldType(38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        java.lang.Object obj23 = mutablePeriod21.clone();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) duration25, chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        mutablePeriod21.add((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.Duration duration32 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        boolean boolean64 = interval49.contains((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration65 = mutablePeriod36.toDurationTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period66 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration77 = duration68.plus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean80 = duration77.isShorterThan((org.joda.time.ReadableDuration) duration79);
        java.lang.String str81 = duration79.toString();
        org.joda.time.Duration duration83 = org.joda.time.Duration.millis((long) 100);
        boolean boolean84 = duration79.isShorterThan((org.joda.time.ReadableDuration) duration83);
        long long85 = duration83.getStandardSeconds();
        org.joda.time.Duration duration86 = duration32.plus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration87 = duration32.toDuration();
        org.joda.time.Duration duration88 = duration32.toDuration();
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT6000S" + "'", str81, "PT6000S");
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(duration88);
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-01-27T19:33:59.785Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-27T19:33:59.785Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology13.dayOfYear();
        java.lang.String str32 = chronology13.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = chronology13.getDateTimeMillis((int) ' ', 918, 52, 658, (-51), (-19), (-51));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 658 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str32, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant1, (org.joda.time.ReadableDuration) duration2, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1643312068647L, periodType3);
        mutablePeriod6.addMonths(3);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod6.addSeconds(20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.year();
        org.joda.time.DurationField durationField40 = chronology34.minutes();
        org.joda.time.DurationField durationField41 = chronology34.years();
        org.joda.time.ReadablePartial readablePartial42 = null;
        int[] intArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            chronology34.validate(readablePartial42, intArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.secondOfDay();
        org.joda.time.DurationField durationField36 = chronology29.days();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (-52));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) '#', (long) (short) 10);
        long long3 = duration2.getStandardMinutes();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getEnd();
        org.joda.time.Duration duration18 = interval15.toDuration();
        org.joda.time.DateTime dateTime19 = interval15.getStart();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        boolean boolean26 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Seconds seconds27 = duration21.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration21);
        long long29 = dateTime19.getMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        boolean boolean57 = interval42.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = interval42.getStart();
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = dateTime58.isSupported(dateTimeFieldType60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        boolean boolean63 = dateTime58.isSupported(dateTimeFieldType62);
        boolean boolean64 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Period period65 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds(0L);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.Seconds seconds69 = duration67.toStandardSeconds();
        org.joda.time.Period period70 = duration67.toPeriod();
        org.joda.time.Seconds seconds71 = duration67.toStandardSeconds();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(seconds27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1643312273655L + "'", long29 == 1643312273655L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-01-27T19:37:53.655Z" + "'", str59, "2022-01-27T19:37:53.655Z");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(seconds69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(seconds71);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.addHours(0);
        mutablePeriod3.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod3.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod16.add((long) ' ');
        int int19 = mutablePeriod16.getDays();
        mutablePeriod16.setMillis((int) (byte) -1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getEnd();
        boolean boolean49 = interval34.contains((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        java.lang.String str64 = dateTime63.toString();
        boolean boolean65 = dateTime48.isBefore((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration66 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateTime63);
        long long67 = duration66.getStandardMinutes();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = duration75.toPeriod(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = duration75.toIntervalTo(readableInstant78);
        org.joda.time.Period period80 = interval79.toPeriod();
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.hourOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.weekyearOfCentury();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration66, chronology81);
        mutablePeriod3.addMonths(1);
        mutablePeriod3.addSeconds((-124));
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-11T09:39:33.718Z" + "'", str64, "2022-02-11T09:39:33.718Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes(1643312029538L);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType11 = periodType10.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        mutablePeriod16.setPeriod((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology32 = interval28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfDay();
        org.joda.time.Period period34 = duration9.toPeriod(periodType10, chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(97, (int) (byte) 1, (-51), (int) (byte) 1, 0, 9, 9, 112, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1644572263337L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = mutablePeriod9.toDurationTo(readableInstant21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology25 = null;
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration24, chronology25);
        boolean boolean27 = duration1.isEqual((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis(100L);
        org.joda.time.Duration duration30 = duration1.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Minutes minutes31 = duration29.toStandardMinutes();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.DateTime dateTime58 = interval56.getEnd();
        boolean boolean59 = interval44.contains((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        java.lang.String str74 = dateTime73.toString();
        boolean boolean75 = dateTime58.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Duration duration85 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration86 = duration77.plus((org.joda.time.ReadableDuration) duration85);
        boolean boolean87 = dateTime73.equals((java.lang.Object) duration77);
        org.joda.time.Duration duration89 = duration77.minus(100000L);
        org.joda.time.Period period90 = duration77.toPeriod();
        boolean boolean91 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration77);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-11T09:39:33.829Z" + "'", str74, "2022-02-11T09:39:33.829Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withWeeksRemoved();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(2704L, 10L, periodType4, chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod26.clear();
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod26.copy();
        int[] intArray35 = chronology18.get((org.joda.time.ReadablePeriod) mutablePeriod33, 28083659L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod39.add((long) ' ');
        mutablePeriod39.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutablePeriod48.setPeriod(readablePeriod49);
        mutablePeriod48.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.days();
        int int54 = mutablePeriod48.get(durationFieldType53);
        boolean boolean55 = mutablePeriod39.isSupported(durationFieldType53);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableInstant56, readableInstant57);
        mutablePeriod58.addWeeks((int) 'a');
        mutablePeriod39.add((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.seconds();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        boolean boolean79 = duration66.isShorterThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = duration72.toPeriod(periodType80, chronology81);
        org.joda.time.PeriodType periodType83 = periodType80.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.months();
        int int85 = periodType83.indexOf(durationFieldType84);
        int int86 = periodType62.indexOf(durationFieldType84);
        mutablePeriod39.add(durationFieldType84, (int) (byte) -1);
        boolean boolean89 = mutablePeriod33.isSupported(durationFieldType84);
        java.lang.String str90 = durationFieldType84.toString();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Days" + "'", str3, "Days");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 7, 48, 3, 659]");
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "months" + "'", str90, "months");
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType3 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-6577658349201L), 1644572151810L, periodType2);
        java.lang.String str5 = periodType2.getName();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "YearWeekDay" + "'", str5, "YearWeekDay");
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 8, (long) '4');
        mutablePeriod2.add((int) '#', (-1), (int) (byte) 0, 4, 32, 100, 32, (int) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        int int16 = mutablePeriod15.getYears();
        java.lang.String str17 = mutablePeriod15.toString();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29);
        boolean boolean31 = mutablePeriod22.equals((java.lang.Object) readableInstant28);
        org.joda.time.Period period32 = mutablePeriod22.toPeriod();
        org.joda.time.Period period33 = mutablePeriod22.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod2.addMonths(2);
        int int38 = mutablePeriod2.getDays();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        mutablePeriod42.clear();
        mutablePeriod42.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType52 = null;
        boolean boolean53 = mutablePeriod42.isSupported(durationFieldType52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology56);
        int int58 = mutablePeriod57.getWeeks();
        mutablePeriod42.add((org.joda.time.ReadablePeriod) mutablePeriod57);
        mutablePeriod57.setWeeks((int) (short) 100);
        mutablePeriod2.add((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod64.addHours(0);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Period period83 = interval82.toPeriod();
        org.joda.time.Chronology chronology84 = interval82.getChronology();
        mutablePeriod64.setPeriod((org.joda.time.ReadableDuration) duration70, chronology84);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        mutablePeriod2.add(1643312026949L);
        int int89 = mutablePeriod2.getSeconds();
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.052S" + "'", str17, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 46 + "'", int89 == 46);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration18.toPeriod(chronology26);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        int int30 = mutablePeriod3.indexOf(durationFieldType29);
        mutablePeriod3.addHours((int) ' ');
        int int33 = mutablePeriod3.getHours();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DurationFieldType[] durationFieldTypeArray48 = mutablePeriod46.getFieldTypes();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.forFields(durationFieldTypeArray48);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod51.addHours(0);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Period period70 = interval69.toPeriod();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        mutablePeriod51.setPeriod((org.joda.time.ReadableDuration) duration57, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType49, chronology71);
        java.lang.String str75 = chronology71.toString();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(1644572123588L, (long) 4, chronology71);
        org.joda.time.DurationField durationField77 = chronology71.eras();
        mutablePeriod3.setPeriod(1643312018503L, chronology71);
        mutablePeriod3.setMillis(5);
        int int81 = mutablePeriod3.getHours();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertNotNull(durationFieldTypeArray48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str75, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 19 + "'", int81 == 19);
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getMinutes();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod8.setMillis((int) (short) 0);
        mutablePeriod8.addMonths((int) (short) 1);
        mutablePeriod8.setMinutes((int) (byte) 1);
        mutablePeriod8.addYears(1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        boolean boolean23 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration20);
        mutablePeriod8.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int28 = duration18.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        org.joda.time.Period period43 = duration27.toPeriodTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration44 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod48.setMillis((int) (short) 0);
        mutablePeriod48.addMonths((int) (short) 1);
        mutablePeriod48.setMinutes((int) (byte) 1);
        mutablePeriod48.addYears(1);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        boolean boolean63 = duration58.isLongerThan((org.joda.time.ReadableDuration) duration60);
        mutablePeriod48.add((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int68 = duration58.compareTo((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration76.toPeriod(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        org.joda.time.Interval interval81 = interval80.toInterval();
        org.joda.time.DateTime dateTime82 = interval80.getEnd();
        org.joda.time.Period period83 = duration67.toPeriodTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Seconds seconds84 = duration67.toStandardSeconds();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration86 = duration67.toDuration();
        long long87 = duration67.getMillis();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(seconds84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 32L + "'", long87 == 32L);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration18.toPeriod(chronology26);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        int int30 = mutablePeriod3.indexOf(durationFieldType29);
        mutablePeriod3.setMonths((int) (byte) -1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod40.copy();
        org.joda.time.PeriodType periodType52 = mutablePeriod40.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod40.toMutablePeriod();
        mutablePeriod53.setWeeks(51);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        mutablePeriod3.addHours(10);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(mutablePeriod53);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-01-27T19:34:47.149Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-27T19:34:47.149Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology59);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology80);
        int int82 = mutablePeriod81.getYears();
        org.joda.time.MutablePeriod mutablePeriod83 = mutablePeriod81.copy();
        mutablePeriod83.setYears((int) (short) 10);
        int[] intArray87 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod83, 1644572114290L);
        org.joda.time.DurationField durationField88 = chronology59.years();
        org.joda.time.DateTimeField dateTimeField89 = chronology59.year();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 2719, 1, 9, 35, 14, 290]");
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter38.isPrinter();
        org.joda.time.PeriodType periodType40 = periodFormatter38.getParseType();
        org.joda.time.PeriodType periodType41 = periodType40.withMonthsRemoved();
        java.lang.String str42 = periodType41.toString();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PeriodType[Years]" + "'", str42, "PeriodType[Years]");
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray40 = mutablePeriod7.getValues();
        org.joda.time.Period period41 = mutablePeriod7.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Duration duration44 = new org.joda.time.Duration(1643312209993L);
        mutablePeriod42.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod49.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod52 = mutablePeriod49.toMutablePeriod();
        mutablePeriod49.setMillis((int) (byte) 10);
        mutablePeriod49.clear();
        org.joda.time.MutablePeriod mutablePeriod56 = mutablePeriod49.copy();
        mutablePeriod42.add((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 42, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(mutablePeriod56);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableInstant5, (org.joda.time.ReadableDuration) duration6, periodType7);
        org.joda.time.Duration duration10 = duration6.minus((long) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.Duration duration24 = interval22.toDuration();
        int int25 = duration10.compareTo((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration26 = duration1.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Seconds seconds28 = duration26.toStandardSeconds();
        org.joda.time.Duration duration29 = duration26.toDuration();
        org.joda.time.Period period30 = duration29.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        mutablePeriod3.add(0L);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        int int14 = mutablePeriod3.indexOf(durationFieldType13);
        org.joda.time.Duration duration16 = org.joda.time.Duration.millis((long) (byte) 1);
        org.joda.time.Duration duration17 = duration16.toDuration();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration16);
        mutablePeriod3.clear();
        int int20 = mutablePeriod3.getYears();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = mutablePeriod3.getValue(80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 80");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((java.lang.Object) boolean3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray40 = mutablePeriod7.getValues();
        org.joda.time.Period period41 = mutablePeriod7.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        boolean boolean55 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getEnd();
        org.joda.time.Interval interval70 = duration48.toIntervalFrom((org.joda.time.ReadableInstant) dateTime69);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval70);
        int int72 = mutablePeriod7.getMillis();
        java.lang.String str73 = mutablePeriod7.toString();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 42, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT1M40S" + "'", str73, "PT1M40S");
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField79 = chronology74.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = chronology74.get(readablePartial80, 1644572184618L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:39:34.295Z" + "'", str42, "2022-02-11T09:39:34.295Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        int int25 = mutablePeriod24.getYears();
        java.lang.String str26 = mutablePeriod24.toString();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutablePeriod31.setPeriod(readablePeriod32);
        mutablePeriod31.addWeeks((int) (byte) 10);
        mutablePeriod24.add((org.joda.time.ReadablePeriod) mutablePeriod31);
        boolean boolean38 = mutablePeriod24.equals((java.lang.Object) (-1.0f));
        mutablePeriod24.setMinutes((int) (short) 1);
        int int41 = mutablePeriod24.getHours();
        int[] intArray43 = chronology18.get((org.joda.time.ReadablePeriod) mutablePeriod24, 1643312029209L);
        org.joda.time.MutablePeriod mutablePeriod44 = mutablePeriod24.toMutablePeriod();
        mutablePeriod24.setPeriod(1644572193502L, 1644572182338L);
        mutablePeriod24.setMonths(40);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.052S" + "'", str26, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 2717, 0, 19, 33, 49, 209]");
        org.junit.Assert.assertNotNull(mutablePeriod44);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.PeriodType periodType40 = mutablePeriod7.getPeriodType();
        mutablePeriod7.addWeeks((-3));
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572115768L);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean3 = mutablePeriod1.isSupported(durationFieldType2);
        java.lang.String str4 = durationFieldType2.getName();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "halfdays" + "'", str4, "halfdays");
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        mutablePeriod5.addDays((int) 'a');
        int int10 = mutablePeriod5.size();
        mutablePeriod5.setDays((-51));
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        mutablePeriod3.add(0L);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        int int14 = mutablePeriod3.indexOf(durationFieldType13);
        mutablePeriod3.addHours((int) (short) 1);
        mutablePeriod3.setPeriod(1644572117941L, 1260100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration30 = duration21.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.withMillis(1644572115768L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration43 = duration34.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        boolean boolean73 = interval58.contains((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        java.lang.String str88 = dateTime87.toString();
        boolean boolean89 = dateTime72.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Duration duration90 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateTime72);
        long long91 = dateTime72.getMillis();
        org.joda.time.Interval interval92 = duration34.toIntervalFrom((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Interval interval93 = duration29.toIntervalFrom((org.joda.time.ReadableInstant) dateTime72);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval93);
        org.joda.time.Duration duration95 = interval93.toDuration();
        org.joda.time.MutableInterval mutableInterval96 = interval93.toMutableInterval();
        org.joda.time.Duration duration97 = interval93.toDuration();
        org.joda.time.ReadableDuration readableDuration98 = null;
        org.joda.time.Duration duration99 = duration97.minus(readableDuration98);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-11T09:39:34.488Z" + "'", str88, "2022-02-11T09:39:34.488Z");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(duration90);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1644572374488L + "'", long91 == 1644572374488L);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(mutableInterval96);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertNotNull(duration99);
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        long long28 = interval12.toDurationMillis();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        int int38 = mutablePeriod33.getMonths();
        boolean boolean39 = interval12.equals((java.lang.Object) int38);
        java.lang.String str40 = interval12.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1260100000L + "'", long28 == 1260100000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-01-27T19:37:54.544Z/2022-02-11T09:39:34.544Z" + "'", str40, "2022-01-27T19:37:54.544Z/2022-02-11T09:39:34.544Z");
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.monthOfYear();
        org.joda.time.Chronology chronology81 = chronology78.withUTC();
        org.joda.time.DateTimeField dateTimeField82 = chronology78.hourOfDay();
        org.joda.time.DurationField durationField83 = durationFieldType59.getField(chronology78);
        org.joda.time.DateTimeField dateTimeField84 = chronology78.dayOfWeek();
        org.joda.time.DurationField durationField85 = chronology78.millis();
        org.joda.time.DateTimeField dateTimeField86 = chronology78.secondOfMinute();
        org.joda.time.Chronology chronology87 = chronology78.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long92 = chronology87.getDateTimeMillis(0, (int) (short) -1, 4, (-53));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -53 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(chronology87);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withDaysRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType25 = periodType23.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1643312029209L, 126000000L, periodType25);
        org.joda.time.PeriodType periodType27 = periodType25.withHoursRemoved();
        java.lang.String str28 = periodType27.getName();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "YearsNoYears" + "'", str28, "YearsNoYears");
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.PeriodType periodType33 = periodType17.withMonthsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withHoursRemoved();
        int int36 = periodType34.size();
        org.joda.time.PeriodType periodType37 = periodType34.withHoursRemoved();
        org.joda.time.PeriodType periodType38 = periodType34.withMinutesRemoved();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        int int43 = mutablePeriod42.getYears();
        java.lang.String str44 = mutablePeriod42.toString();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        mutablePeriod42.add((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(readableInstant55, readableInstant56);
        boolean boolean58 = mutablePeriod49.equals((java.lang.Object) readableInstant55);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.millis();
        mutablePeriod49.set(durationFieldType59, (int) (byte) 10);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology65);
        mutablePeriod66.add((long) ' ');
        mutablePeriod66.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        mutablePeriod75.setPeriod(readablePeriod76);
        mutablePeriod75.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.days();
        int int81 = mutablePeriod75.get(durationFieldType80);
        boolean boolean82 = mutablePeriod66.isSupported(durationFieldType80);
        boolean boolean83 = periodType62.isSupported(durationFieldType80);
        java.lang.String str84 = durationFieldType80.getName();
        boolean boolean85 = mutablePeriod49.isSupported(durationFieldType80);
        boolean boolean86 = periodType38.equals((java.lang.Object) mutablePeriod49);
        int int87 = mutablePeriod49.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0.052S" + "'", str44, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "days" + "'", str84, "days");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addHours((int) (short) 1);
        int int45 = mutablePeriod15.getMinutes();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        mutablePeriod53.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod53.copy();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        mutablePeriod53.setPeriod((org.joda.time.ReadableInterval) interval76);
        mutablePeriod15.add((org.joda.time.ReadableInterval) interval76);
        org.joda.time.MutableInterval mutableInterval79 = interval76.toMutableInterval();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration87.toPeriod(chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Interval interval91 = duration87.toIntervalTo(readableInstant90);
        org.joda.time.Interval interval92 = interval91.toInterval();
        org.joda.time.DateTime dateTime93 = interval91.getEnd();
        org.joda.time.Duration duration94 = interval91.toDuration();
        java.lang.String str95 = interval91.toString();
        org.joda.time.MutableInterval mutableInterval96 = interval91.toMutableInterval();
        boolean boolean97 = mutableInterval79.isBefore((org.joda.time.ReadableInterval) interval91);
        long long98 = interval91.toDurationMillis();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(duration94);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-01-27T19:37:54.727Z/2022-02-11T09:39:34.727Z" + "'", str95, "2022-01-27T19:37:54.727Z/2022-02-11T09:39:34.727Z");
        org.junit.Assert.assertNotNull(mutableInterval96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1260100000L + "'", long98 == 1260100000L);
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter7.withLocale(locale8);
        java.io.Writer writer10 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        int int15 = mutablePeriod14.size();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Period period29 = interval27.toPeriod();
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = interval27.contains(readableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        java.lang.Object obj41 = mutablePeriod39.clone();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((java.lang.Object) duration43, chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        mutablePeriod39.add((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod53.setMillis((int) (short) 0);
        mutablePeriod53.addMonths((int) (short) 1);
        int int58 = mutablePeriod53.size();
        int int59 = mutablePeriod53.getWeeks();
        mutablePeriod53.setYears(8);
        mutablePeriod53.addSeconds(1);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Period period76 = interval75.toPeriod();
        org.joda.time.Chronology chronology77 = interval75.getChronology();
        mutablePeriod53.add((org.joda.time.ReadableInterval) interval75);
        boolean boolean79 = interval47.contains((org.joda.time.ReadableInterval) interval75);
        boolean boolean80 = interval27.isBefore((org.joda.time.ReadableInterval) interval75);
        org.joda.time.DateTime dateTime81 = interval27.getEnd();
        org.joda.time.MutableInterval mutableInterval82 = interval27.toMutableInterval();
        mutablePeriod14.add((org.joda.time.ReadableInterval) mutableInterval82);
        org.joda.time.Interval interval84 = mutableInterval82.toInterval();
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((long) '#', (long) 2, periodType87);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((java.lang.Object) interval84, periodType87);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter7.printTo(writer10, (org.joda.time.ReadablePeriod) mutablePeriod89);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(mutableInterval82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod8.copy();
        org.joda.time.PeriodType periodType20 = mutablePeriod8.getPeriodType();
        boolean boolean21 = periodType0.equals((java.lang.Object) mutablePeriod8);
        mutablePeriod8.add((-1), (int) (byte) 0, 2, (int) (short) 10, (int) (byte) 10, 32, 32, (int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        mutablePeriod8.add(durationFieldType38, 7);
        mutablePeriod8.setHours((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod8.copy();
        mutablePeriod8.addMonths(100);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(mutablePeriod45);
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.PeriodType periodType23 = periodType21.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str25 = durationFieldType24.getName();
        java.lang.String str26 = durationFieldType24.getName();
        int int27 = periodType23.indexOf(durationFieldType24);
        org.joda.time.PeriodType periodType28 = periodType23.withMonthsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.PeriodType periodType30 = periodType29.withYearsRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "seconds" + "'", str25, "seconds");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "seconds" + "'", str26, "seconds");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology21.seconds();
        org.joda.time.DurationField durationField28 = chronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.clockhourOfDay();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology13.minutes();
        org.joda.time.DurationField durationField18 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod23.toMutablePeriod();
        mutablePeriod26.setSeconds((int) (short) 10);
        mutablePeriod26.addYears((int) (byte) 10);
        mutablePeriod26.setDays(2);
        org.joda.time.PeriodType periodType33 = mutablePeriod26.getPeriodType();
        org.joda.time.format.PeriodPrinter periodPrinter34 = null;
        org.joda.time.format.PeriodParser periodParser35 = null;
        org.joda.time.format.PeriodFormatter periodFormatter36 = new org.joda.time.format.PeriodFormatter(periodPrinter34, periodParser35);
        java.util.Locale locale37 = periodFormatter36.getLocale();
        boolean boolean38 = periodFormatter36.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter39 = periodFormatter36.getPrinter();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter36.withLocale(locale40);
        boolean boolean42 = periodFormatter41.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale43);
        org.joda.time.format.PeriodParser periodParser45 = periodFormatter44.getParser();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((java.lang.Object) periodParser45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.hourOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.monthOfYear();
        org.joda.time.DurationField durationField63 = chronology60.eras();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((java.lang.Object) periodParser45, chronology60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeField19, periodType33, chronology60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(periodPrinter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNull(periodParser45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration18.toPeriod(chronology26);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period27);
        int int29 = mutablePeriod3.getYears();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration35 = mutablePeriod33.toDurationFrom(readableInstant34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((java.lang.Object) duration37, chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        boolean boolean42 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((java.lang.Object) duration44, chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = mutablePeriod46.toDurationFrom(readableInstant47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) duration50, chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        boolean boolean55 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getEnd();
        org.joda.time.Duration duration70 = interval67.toDuration();
        boolean boolean71 = duration48.isEqual((org.joda.time.ReadableDuration) duration70);
        boolean boolean72 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration76 = duration74.plus(126000L);
        org.joda.time.Duration duration78 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration76, (int) (byte) -1);
        boolean boolean79 = mutablePeriod3.equals((java.lang.Object) duration48);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray40 = mutablePeriod7.getValues();
        org.joda.time.Period period41 = mutablePeriod7.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        boolean boolean55 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getEnd();
        org.joda.time.Interval interval70 = duration48.toIntervalFrom((org.joda.time.ReadableInstant) dateTime69);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval70);
        mutablePeriod7.addMinutes(943);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 42, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.monthOfYear();
        org.joda.time.ReadablePartial readablePartial61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = chronology57.get(readablePartial61, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withLocale(locale3);
        boolean boolean5 = periodFormatter4.isPrinter();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod15.copy();
        org.joda.time.PeriodType periodType27 = mutablePeriod15.getPeriodType();
        org.joda.time.PeriodType periodType28 = periodType27.withWeeksRemoved();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod32.add((long) ' ');
        mutablePeriod32.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutablePeriod41.setPeriod(readablePeriod42);
        mutablePeriod41.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.days();
        int int47 = mutablePeriod41.get(durationFieldType46);
        boolean boolean48 = mutablePeriod32.isSupported(durationFieldType46);
        int int49 = periodType28.indexOf(durationFieldType46);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Period period62 = interval61.toPeriod();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) duration7, periodType28, chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.hourOfDay();
        long long69 = chronology63.add(1L, (long) (-51), 32);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(0, 32, 100, (int) (byte) 100, (int) (byte) -1, 8, (int) (byte) 0, 10);
        int[] intArray80 = chronology63.get((org.joda.time.ReadablePeriod) mutablePeriod78, (long) 10);
        org.joda.time.Period period81 = mutablePeriod78.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int84 = periodFormatter4.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod78, "2022-02-11T09:35:34.715Z", (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1631L) + "'", long69 == (-1631L));
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod13.addHours(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration19, chronology33);
        java.lang.String str35 = chronology33.toString();
        mutablePeriod3.add((long) 2, chronology33);
        mutablePeriod3.setHours(8);
        mutablePeriod3.setWeeks(40);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        java.lang.Class<?> wildcardClass25 = periodType24.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray40 = mutablePeriod7.getValues();
        org.joda.time.Period period41 = mutablePeriod7.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        boolean boolean55 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getEnd();
        org.joda.time.Interval interval70 = duration48.toIntervalFrom((org.joda.time.ReadableInstant) dateTime69);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval70);
        org.joda.time.Chronology chronology72 = interval70.getChronology();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 42, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        org.joda.time.format.PeriodPrinter periodPrinter4 = null;
        org.joda.time.format.PeriodParser periodParser5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = new org.joda.time.format.PeriodFormatter(periodPrinter4, periodParser5);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutablePeriod31.setPeriod(readablePeriod32);
        mutablePeriod31.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.days();
        int int37 = mutablePeriod31.get(durationFieldType36);
        boolean boolean38 = periodType24.isSupported(durationFieldType36);
        int int39 = periodType24.size();
        org.joda.time.PeriodType periodType40 = periodType24.withMonthsRemoved();
        org.joda.time.PeriodType periodType41 = periodType40.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter6.withParseType(periodType40);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(126000L, 1644572114290L, periodType40);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 0L, periodType40);
        org.joda.time.PeriodType periodType45 = periodType40.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType47 = periodType40.getFieldType(487);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 487");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(periodType45);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1643312165987L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        long long6 = interval5.getEndMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        boolean boolean37 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration30.toPeriod(periodType38, chronology39);
        org.joda.time.PeriodType periodType41 = periodType38.withYearsRemoved();
        org.joda.time.PeriodType periodType42 = periodType38.withWeeksRemoved();
        org.joda.time.PeriodType periodType43 = periodType38.withSecondsRemoved();
        org.joda.time.Period period44 = interval18.toPeriod(periodType38);
        org.joda.time.PeriodType periodType45 = periodType38.withSecondsRemoved();
        org.joda.time.PeriodType periodType46 = periodType45.withSecondsRemoved();
        org.joda.time.Period period47 = interval5.toPeriod(periodType46);
        org.joda.time.Duration duration48 = interval5.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572375403L + "'", long6 == 1644572375403L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        int int28 = duration7.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod30.addHours(0);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration36, chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.Period period54 = duration17.toPeriod(chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = chronology50.add(readablePeriod57, 1644572283777L, 52);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str52, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1644572283777L + "'", long60 == 1644572283777L);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        int int28 = duration7.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod30.addHours(0);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration36, chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.Period period54 = duration17.toPeriod(chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = chronology50.secondOfMinute();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str52, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        boolean boolean19 = interval5.overlaps((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.setMillis((int) (short) 0);
        mutablePeriod23.addMonths((int) (short) 1);
        int int28 = mutablePeriod23.size();
        int int29 = mutablePeriod23.getWeeks();
        mutablePeriod23.setYears(8);
        mutablePeriod23.addSeconds(1);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Period period46 = interval45.toPeriod();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        mutablePeriod23.add((org.joda.time.ReadableInterval) interval45);
        boolean boolean49 = interval5.isBefore((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        long long63 = interval62.toDurationMillis();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Interval interval76 = interval75.toInterval();
        org.joda.time.DateTime dateTime77 = interval75.getEnd();
        boolean boolean78 = interval62.isBefore((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Interval interval79 = interval75.toInterval();
        boolean boolean80 = interval5.contains((org.joda.time.ReadableInterval) interval75);
        long long81 = interval75.toDurationMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1260100000L + "'", long63 == 1260100000L);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1260100000L + "'", long81 == 1260100000L);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        mutablePeriod3.setYears(6);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((java.lang.Object) duration36, chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Period period53 = interval52.toPeriod();
        boolean boolean54 = interval40.overlaps((org.joda.time.ReadableInterval) interval52);
        org.joda.time.MutableInterval mutableInterval55 = interval52.toMutableInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval55.getEnd();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardMinutes(1644572177028L);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology65);
        mutablePeriod62.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod66);
        mutablePeriod66.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod77 = mutablePeriod66.copy();
        org.joda.time.PeriodType periodType78 = mutablePeriod66.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration58, periodType78);
        org.joda.time.Duration duration80 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int82 = dateTime56.get(dateTimeFieldType81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(mutablePeriod77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(duration80);
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        org.joda.time.DurationField durationField23 = chronology20.years();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.eras();
        int int23 = periodType20.indexOf(durationFieldType22);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod25.addHours(0);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration31, chronology45);
        java.lang.String str47 = chronology45.toString();
        org.joda.time.DurationField durationField48 = chronology45.hours();
        org.joda.time.DurationField durationField49 = chronology45.hours();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.millisOfDay();
        boolean boolean51 = durationFieldType22.isSupported(chronology45);
        org.joda.time.DurationField durationField52 = chronology45.days();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str47, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology16);
        org.joda.time.DurationField durationField22 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.millisOfSecond();
        org.joda.time.DurationField durationField24 = chronology16.days();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1644572123305L, chronology16);
        java.lang.String str26 = chronology16.toString();
        org.joda.time.ReadablePartial readablePartial27 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology16.set(readablePartial27, 1644572329117L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str26, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology13.seconds();
        java.lang.String str19 = chronology13.toString();
        org.joda.time.DurationField durationField20 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.hourOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str19, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.secondOfMinute();
        org.joda.time.DurationField durationField19 = chronology14.seconds();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 712, chronology14);
        mutablePeriod20.addMinutes(0);
        mutablePeriod20.setDays(0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        boolean boolean46 = mutablePeriod30.isSupported(durationFieldType44);
        int int47 = periodType26.indexOf(durationFieldType44);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, periodType26, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.hourOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = mutablePeriod71.getFieldTypes();
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePeriod) mutablePeriod71, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField77 = chronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = chronology61.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology61);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(100L, (-124L), chronology61);
        mutablePeriod80.addMillis(100);
        mutablePeriod80.add((int) 'a', (int) (short) 100, 100, 0, 2, (int) (short) 100, (int) (short) 100, 0);
        mutablePeriod80.addHours(1);
        mutablePeriod80.clear();
        mutablePeriod80.setValue(0, (int) (short) -1);
        mutablePeriod80.add(1644572189431L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addHours((int) (short) 1);
        int int45 = mutablePeriod15.getMinutes();
        mutablePeriod15.setYears(32);
        mutablePeriod15.setMinutes((int) (short) 10);
        org.joda.time.PeriodType periodType50 = mutablePeriod15.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str52 = durationFieldType51.toString();
        java.lang.String str53 = durationFieldType51.toString();
        boolean boolean54 = mutablePeriod15.isSupported(durationFieldType51);
        java.lang.String str55 = durationFieldType51.getName();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "weekyears" + "'", str52, "weekyears");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "weekyears" + "'", str53, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "weekyears" + "'", str55, "weekyears");
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        mutablePeriod1.addYears(2);
        mutablePeriod1.addYears((int) '4');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod15.copy();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        boolean boolean43 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration36.toPeriod(periodType44, chronology45);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutablePeriod51.setPeriod(readablePeriod52);
        mutablePeriod51.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.days();
        int int57 = mutablePeriod51.get(durationFieldType56);
        boolean boolean58 = periodType44.isSupported(durationFieldType56);
        mutablePeriod15.set(durationFieldType56, (int) '4');
        java.lang.String str61 = durationFieldType56.getName();
        int int62 = mutablePeriod1.indexOf(durationFieldType56);
        int int63 = mutablePeriod1.getYears();
        mutablePeriod1.addMinutes((int) (byte) -1);
        mutablePeriod1.setWeeks(98);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "days" + "'", str61, "days");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 54 + "'", int63 == 54);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 3, 2400000L);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getEnd();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology20 = interval16.getChronology();
        java.lang.String str21 = chronology20.toString();
        org.joda.time.DurationField durationField22 = chronology20.halfdays();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology20.set(readablePartial23, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str21, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfHalfday();
        org.joda.time.DurationField durationField17 = chronology13.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.hourOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str23 = durationFieldType22.toString();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.secondOfMinute();
        org.joda.time.DurationField durationField42 = chronology37.months();
        boolean boolean43 = durationFieldType22.isSupported(chronology37);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1644572139095L, periodType21, chronology37);
        org.joda.time.DateTimeField dateTimeField45 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology37.minuteOfHour();
        org.joda.time.DurationField durationField47 = chronology37.days();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyears" + "'", str23, "weekyears");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        java.lang.String str46 = dateTime45.toString();
        boolean boolean47 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime30.getZone();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes(1644572108797L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        java.lang.String str56 = duration53.toString();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean59 = periodType57.equals((java.lang.Object) false);
        org.joda.time.Period period60 = duration53.toPeriod(periodType57);
        org.joda.time.PeriodType periodType61 = periodType57.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(periodType61);
        org.joda.time.PeriodType periodType63 = periodType61.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration51, periodType63);
        boolean boolean65 = duration1.isEqual((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration67 = duration51.plus(350L);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(126000000L);
        org.joda.time.Duration duration71 = duration69.plus(1644572139204L);
        long long72 = duration71.getStandardDays();
        org.joda.time.Duration duration73 = duration51.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Days days74 = duration73.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:39:36.202Z" + "'", str46, "2022-02-11T09:39:36.202Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT126000S" + "'", str56, "PT126000S");
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 20492L + "'", long72 == 20492L);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(days74);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) '#');
        boolean boolean4 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        long long5 = duration3.getStandardSeconds();
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis((long) (byte) 1);
        org.joda.time.Duration duration8 = duration3.minus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration9 = duration7.toDuration();
        long long10 = duration9.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        java.lang.Object obj22 = mutablePeriod20.clone();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration24, chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        mutablePeriod20.add((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Interval interval30 = interval28.toInterval();
        org.joda.time.Chronology chronology31 = interval28.getChronology();
        boolean boolean32 = interval11.overlaps((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology33 = interval28.getChronology();
        org.joda.time.DateTime dateTime34 = interval28.getEnd();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        int int43 = mutablePeriod38.size();
        mutablePeriod38.add((int) (byte) 0, 8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4');
        mutablePeriod38.clear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology56);
        int int58 = mutablePeriod57.getYears();
        org.joda.time.MutablePeriod mutablePeriod59 = mutablePeriod57.copy();
        mutablePeriod59.setYears((int) (short) 10);
        mutablePeriod59.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Interval interval83 = interval82.toInterval();
        mutablePeriod59.setPeriod((org.joda.time.ReadableInterval) interval83);
        mutablePeriod38.add((org.joda.time.ReadableInterval) interval83);
        org.joda.time.DateTime dateTime86 = interval83.getEnd();
        org.joda.time.DateTimeZone dateTimeZone87 = dateTime86.getZone();
        boolean boolean88 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime86);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration3.withMillis((long) (-1));
        org.joda.time.Duration duration8 = duration5.withDurationAdded(0L, (int) (short) 10);
        org.joda.time.Duration duration10 = duration8.plus(60000L);
        org.joda.time.Period period11 = duration8.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period13 = mutablePeriod12.toPeriod();
        boolean boolean15 = mutablePeriod12.equals((java.lang.Object) 1644572339847L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 0, (int) ' ', (int) '4', (-1));
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod4.copy();
        org.joda.time.format.PeriodPrinter periodPrinter6 = null;
        org.joda.time.format.PeriodParser periodParser7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = new org.joda.time.format.PeriodFormatter(periodPrinter6, periodParser7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration18.toPeriod(periodType26, chronology27);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        int int39 = mutablePeriod33.get(durationFieldType38);
        boolean boolean40 = periodType26.isSupported(durationFieldType38);
        int int41 = periodType26.size();
        org.joda.time.PeriodType periodType42 = periodType26.withMonthsRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter8.withParseType(periodType42);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.format.PeriodFormatter periodFormatter46 = periodFormatter8.withParseType(periodType45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = mutablePeriod4.toString(periodFormatter46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatter46);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        mutablePeriod10.addMillis(1);
        mutablePeriod10.addSeconds((int) 'a');
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod10.copy();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration36 = duration27.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean39 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration38);
        java.lang.String str40 = duration38.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        mutablePeriod44.add((long) ' ');
        int int47 = mutablePeriod44.getDays();
        mutablePeriod44.setMillis((int) (byte) -1);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.DateTime dateTime76 = interval74.getEnd();
        boolean boolean77 = interval62.contains((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration85.toPeriod(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Interval interval89 = duration85.toIntervalTo(readableInstant88);
        org.joda.time.Interval interval90 = interval89.toInterval();
        org.joda.time.DateTime dateTime91 = interval89.getEnd();
        java.lang.String str92 = dateTime91.toString();
        boolean boolean93 = dateTime76.isBefore((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.Duration duration94 = mutablePeriod44.toDurationFrom((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.Chronology chronology95 = dateTime91.getChronology();
        org.joda.time.Period period96 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime91);
        long long97 = dateTime91.getMillis();
        org.joda.time.Duration duration98 = mutablePeriod25.toDurationTo((org.joda.time.ReadableInstant) dateTime91);
        long long99 = duration98.getStandardSeconds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT6000S" + "'", str40, "PT6000S");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022-02-11T09:39:36.467Z" + "'", str92, "2022-02-11T09:39:36.467Z");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(period96);
// flaky:         org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1644572376467L + "'", long97 == 1644572376467L);
        org.junit.Assert.assertNotNull(duration98);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 6048097L + "'", long99 == 6048097L);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1644572181205L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        int int10 = mutablePeriod4.size();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getEnd();
        boolean boolean38 = interval23.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology39 = interval23.getChronology();
        java.lang.String str40 = interval23.toString();
        org.joda.time.Duration duration41 = interval23.toDuration();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        mutablePeriod49.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod60 = mutablePeriod49.copy();
        org.joda.time.PeriodType periodType61 = mutablePeriod49.getPeriodType();
        org.joda.time.PeriodType periodType62 = periodType61.withWeeksRemoved();
        boolean boolean63 = interval23.equals((java.lang.Object) periodType62);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval23);
        mutablePeriod4.setMonths(10);
        int int68 = mutablePeriod4.getValue(0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-01-27T19:37:56.855Z/2022-02-11T09:39:36.855Z" + "'", str40, "2022-01-27T19:37:56.855Z/2022-02-11T09:39:36.855Z");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        boolean boolean21 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration14.toPeriod(periodType22, chronology23);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.days();
        int int35 = mutablePeriod29.get(durationFieldType34);
        boolean boolean36 = periodType22.isSupported(durationFieldType34);
        int int37 = periodType22.size();
        org.joda.time.PeriodType periodType38 = periodType22.withMonthsRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter4.withParseType(periodType38);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(126000L, 1644572114290L, periodType38);
        org.joda.time.PeriodType periodType42 = periodType38.withSecondsRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withWeeksRemoved();
        org.joda.time.PeriodType periodType44 = periodType42.withYearsRemoved();
        int int45 = periodType42.size();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setMonths(35);
        mutablePeriod3.setPeriod(2, 18, 35, 712, 98, 0, (-124), 36);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        long long6 = interval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Interval interval19 = interval18.toInterval();
        long long20 = interval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        boolean boolean35 = interval19.isBefore((org.joda.time.ReadableInterval) interval32);
        java.lang.String str36 = interval32.toString();
        boolean boolean37 = interval5.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Interval interval38 = interval32.toInterval();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        boolean boolean55 = duration42.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration48.toPeriod(periodType56, chronology57);
        org.joda.time.PeriodType periodType59 = periodType56.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.months();
        int int61 = periodType59.indexOf(durationFieldType60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology64);
        int int66 = mutablePeriod65.getWeeks();
        java.lang.Object obj67 = mutablePeriod65.clone();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration76.toPeriod(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        org.joda.time.Period period81 = interval80.toPeriod();
        org.joda.time.Chronology chronology82 = interval80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.hourOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.weekyearOfCentury();
        org.joda.time.DurationField durationField85 = chronology82.days();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.yearOfCentury();
        org.joda.time.DurationField durationField87 = chronology82.halfdays();
        mutablePeriod65.add((long) (-52), chronology82);
        org.joda.time.DateTimeField dateTimeField89 = chronology82.yearOfEra();
        org.joda.time.DateTimeField dateTimeField90 = chronology82.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((java.lang.Object) interval32, periodType59, chronology82);
        org.joda.time.DateTimeField dateTimeField92 = chronology82.halfdayOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 60000L + "'", long6 == 60000L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1260100000L + "'", long20 == 1260100000L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-01-27T19:37:57.047Z/2022-02-11T09:39:37.047Z" + "'", str36, "2022-01-27T19:37:57.047Z/2022-02-11T09:39:37.047Z");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "PT0.035S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "PT0.035S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "PT0.035S");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = chronology13.days();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.minuteOfHour();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addYears(1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        boolean boolean18 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration15);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object) duration21, chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = mutablePeriod23.toDurationFrom(readableInstant24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Hours hours30 = duration29.toStandardHours();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, (org.joda.time.ReadableDuration) duration32, periodType33);
        org.joda.time.Duration duration36 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration32, 10);
        org.joda.time.Duration duration37 = duration25.plus((org.joda.time.ReadableDuration) duration29);
        boolean boolean38 = mutablePeriod3.equals((java.lang.Object) duration37);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((-124L));
        long long41 = duration40.getMillis();
        long long42 = duration40.getStandardSeconds();
        boolean boolean43 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration45 = duration40.plus(0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-124L) + "'", long41 == (-124L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.weekyear();
        org.joda.time.DurationField durationField24 = chronology15.seconds();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withWeeksRemoved();
        org.joda.time.PeriodType periodType23 = periodType18.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(100L, periodType18);
        org.joda.time.PeriodType periodType25 = periodType18.withSecondsRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withMinutesRemoved();
        java.lang.String str27 = periodType25.toString();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[Years]" + "'", str27, "PeriodType[Years]");
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod10.getFieldTypes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod15.addHours(0);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration21, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType13, chronology35);
        java.lang.String str39 = chronology35.toString();
        org.joda.time.DurationField durationField40 = chronology35.months();
        org.joda.time.DurationField durationField41 = chronology35.centuries();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (short) -1, chronology35);
        mutablePeriod42.addWeeks((-20));
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str39, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        int int8 = mutablePeriod3.getMonths();
        mutablePeriod3.addSeconds(52);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        int int12 = mutablePeriod3.get(durationFieldType11);
        mutablePeriod3.setMonths(302);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod33.toMutablePeriod();
        mutablePeriod34.addMillis(8);
        mutablePeriod34.setYears(1250);
        org.junit.Assert.assertNotNull(mutablePeriod34);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(21001L);
        mutablePeriod1.addSeconds(52);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.PeriodType periodType6 = periodType4.withWeeksRemoved();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod10.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod10.toMutablePeriod();
        int[] intArray14 = mutablePeriod10.getValues();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.add((long) ' ');
        mutablePeriod19.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = mutablePeriod19.isSupported(durationFieldType33);
        boolean boolean36 = periodType15.isSupported(durationFieldType33);
        int int37 = mutablePeriod10.indexOf(durationFieldType33);
        int int38 = periodType4.indexOf(durationFieldType33);
        boolean boolean39 = mutablePeriod1.equals((java.lang.Object) durationFieldType33);
        java.lang.String str40 = mutablePeriod1.toString();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Days" + "'", str5, "Days");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT73.001S" + "'", str40, "PT73.001S");
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.PeriodType periodType24 = periodType21.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(40834312119965L, (long) 14, periodType21);
        org.joda.time.PeriodType periodType26 = periodType21.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1643312103626L, 85515989905654L, periodType21);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) duration7, chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        boolean boolean12 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        org.joda.time.Duration duration27 = interval24.toDuration();
        boolean boolean28 = duration5.isEqual((org.joda.time.ReadableDuration) duration27);
        long long29 = duration5.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        mutablePeriod4.addDays((int) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.Object obj26 = mutablePeriod24.clone();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.Chronology chronology35 = interval32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        mutablePeriod4.setPeriod((long) 100, (long) 3, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant40, readableDuration41);
        mutablePeriod42.setMillis(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = mutablePeriod42.getFieldTypes();
        mutablePeriod42.addYears((int) (byte) 0);
        org.joda.time.Period period48 = mutablePeriod42.toPeriod();
        int[] intArray49 = period48.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology35.validate(readablePartial39, intArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(52, 0, 19, 48);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Interval interval17 = interval15.toInterval();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.Object obj29 = mutablePeriod27.clone();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        mutablePeriod27.add((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.Chronology chronology38 = interval35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        org.joda.time.Chronology chronology40 = chronology18.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology18.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial42 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology18.set(readablePartial42, 1643312266109L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.Duration duration25 = duration7.withDurationAdded((long) 3, (int) '4');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, (org.joda.time.ReadableDuration) duration27, periodType28);
        boolean boolean30 = duration7.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration32 = duration7.withMillis((long) (byte) 10);
        org.joda.time.Duration duration33 = duration7.toDuration();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.add((long) ' ');
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod5.setPeriod((long) (short) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 1644572254774L, chronology22);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        mutablePeriod38.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        int int55 = mutablePeriod49.get(durationFieldType54);
        mutablePeriod38.add(durationFieldType54, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod68 = mutablePeriod38.copy();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = mutablePeriod68.get(durationFieldType69);
        long long73 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) ' ', 3);
        mutablePeriod68.setMillis((-27409536));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((java.lang.Object) (-27409536));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-124L) + "'", long73 == (-124L));
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfMinute();
        boolean boolean40 = mutablePeriod3.equals((java.lang.Object) chronology35);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        java.lang.Object obj50 = mutablePeriod48.clone();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((java.lang.Object) duration52, chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        mutablePeriod48.add((org.joda.time.ReadableInterval) interval56);
        mutablePeriod48.addHours((int) (short) 1);
        int[] intArray61 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod48, 1260100000L);
        org.joda.time.DurationField durationField62 = chronology35.millis();
        org.joda.time.DurationField durationField63 = chronology35.weeks();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT1H1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT1H1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT1H1M0.052S");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 2, 0, 14, 1, 40, 0]");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(0L, 1644572138663L);
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((java.lang.Object) duration2);
        long long5 = duration4.getStandardDays();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        java.lang.String str18 = duration13.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, chronology21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        boolean boolean35 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration36 = duration20.minus((org.joda.time.ReadableDuration) duration24);
        boolean boolean37 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration39 = duration13.withMillis(1644572129538L);
        boolean boolean40 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration39);
        boolean boolean42 = duration39.equals((java.lang.Object) "2022-02-11T09:37:49.779Z");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 19034L + "'", long5 == 19034L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT1260100S" + "'", str18, "PT1260100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration9.toPeriod(chronology17);
        org.joda.time.Duration duration20 = duration9.withMillis(1644572149231L);
        org.joda.time.Minutes minutes21 = duration9.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(minutes21);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.format.PeriodFormatter periodFormatter33 = null;
        java.lang.String str34 = mutablePeriod26.toString(periodFormatter33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        org.joda.time.Duration duration61 = interval58.toDuration();
        boolean boolean62 = interval46.overlaps((org.joda.time.ReadableInterval) interval58);
        mutablePeriod26.setPeriod((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration64 = interval58.toDuration();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        mutablePeriod71.setPeriod(readablePeriod72);
        mutablePeriod71.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.days();
        int int77 = mutablePeriod71.get(durationFieldType76);
        java.lang.String str78 = durationFieldType76.getName();
        int int79 = periodType66.indexOf(durationFieldType76);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration64, readableInstant65, periodType66);
        org.joda.time.PeriodType periodType81 = periodType66.withWeeksRemoved();
        java.lang.String str82 = periodType81.getName();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.052S" + "'", str34, "PT0.052S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "days" + "'", str78, "days");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "YearDayTime" + "'", str82, "YearDayTime");
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        boolean boolean42 = interval27.contains((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        java.lang.String str57 = dateTime56.toString();
        boolean boolean58 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime41.getZone();
        org.joda.time.Period period61 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period62 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Instant instant63 = dateTime41.toInstant();
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        long long65 = instant63.getMillis();
        long long66 = instant63.getMillis();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:39:37.915Z" + "'", str57, "2022-02-11T09:39:37.915Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(chronology64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1644572377915L + "'", long65 == 1644572377915L);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1644572377915L + "'", long66 == 1644572377915L);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfMinute();
        boolean boolean40 = mutablePeriod3.equals((java.lang.Object) chronology35);
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        java.lang.String str43 = chronology41.toString();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology15);
        mutablePeriod20.setPeriod(2, (int) (byte) 0, (int) (byte) 10, 1, 4, 2, 2, 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod34.setPeriod((long) (short) 0, chronology51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.secondOfMinute();
        boolean boolean71 = mutablePeriod34.equals((java.lang.Object) chronology66);
        org.joda.time.Chronology chronology72 = chronology66.withUTC();
        mutablePeriod20.setPeriod((long) 100, chronology72);
        org.joda.time.DurationField durationField74 = chronology72.centuries();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.weekyearOfCentury();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        java.util.Locale locale8 = periodFormatter7.getLocale();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        boolean boolean39 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration32.toPeriod(periodType40, chronology41);
        org.joda.time.PeriodType periodType43 = periodType40.withYearsRemoved();
        org.joda.time.PeriodType periodType44 = periodType40.withWeeksRemoved();
        org.joda.time.PeriodType periodType45 = periodType40.withSecondsRemoved();
        org.joda.time.Period period46 = interval20.toPeriod(periodType40);
        org.joda.time.format.PeriodFormatter periodFormatter47 = periodFormatter7.withParseType(periodType40);
        java.io.Writer writer48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter47.printTo(writer48, readablePeriod49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodFormatter47);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod3.setSeconds(1);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod3.copy();
        int int9 = mutablePeriod8.getMonths();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        boolean boolean12 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        org.joda.time.Interval interval27 = duration5.toIntervalFrom((org.joda.time.ReadableInstant) dateTime26);
        java.lang.String str28 = dateTime26.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = dateTime26.get(dateTimeFieldType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:39:38.108Z" + "'", str28, "2022-02-11T09:39:38.108Z");
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.PeriodType periodType24 = periodType21.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(40834312119965L, (long) 14, periodType21);
        org.joda.time.PeriodType periodType26 = periodType21.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1643312236375L, 34L, periodType21);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter3.getParser();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter3.getParser();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.days();
        java.lang.String str11 = periodType10.getName();
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration9.toPeriod(periodType10, chronology13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter3.withParseType(periodType10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.add((long) ' ');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod19.setPeriod((long) (short) 0, chronology36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.hourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.dayOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.secondOfMinute();
        boolean boolean56 = mutablePeriod19.equals((java.lang.Object) chronology51);
        org.joda.time.Chronology chronology57 = chronology51.withUTC();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1644572145972L, periodType10, chronology51);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod58.setYears(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Days" + "'", str11, "Days");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod7.setMillis((int) ' ');
        mutablePeriod7.addDays(0);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod7);
        int int25 = mutablePeriod23.getValue((int) (short) 0);
        mutablePeriod23.addHours(102);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = periodFormatter2.parsePeriod("Time");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology29.days();
        long long39 = chronology29.add((long) (byte) 0, (long) '4', (int) '4');
        org.joda.time.DurationField durationField40 = chronology29.days();
        org.joda.time.DurationField durationField41 = chronology29.weeks();
        org.joda.time.DateTimeField dateTimeField42 = chronology29.year();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.dayOfYear();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutablePeriod65.setPeriod(readablePeriod66);
        mutablePeriod65.addWeeks((int) (byte) 10);
        int[] intArray72 = chronology56.get((org.joda.time.ReadablePeriod) mutablePeriod65, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField73 = chronology56.clockhourOfHalfday();
        java.lang.String str74 = chronology56.toString();
        org.joda.time.DateTimeZone dateTimeZone75 = chronology56.getZone();
        org.joda.time.Chronology chronology76 = chronology29.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.dayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2704L + "'", long39 == 2704L);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str74, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration28 = duration19.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean31 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod33.addHours(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration39, chronology53);
        long long55 = duration39.getStandardSeconds();
        boolean boolean56 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration58 = duration39.minus(1644572120450L);
        org.joda.time.Seconds seconds59 = duration58.toStandardSeconds();
        long long62 = chronology13.add((org.joda.time.ReadablePeriod) seconds59, 1644572250799L, 5);
        java.lang.Class<?> wildcardClass63 = chronology13.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 126000L + "'", long55 == 126000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(seconds59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-6577658349201L) + "'", long62 == (-6577658349201L));
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        int int14 = mutablePeriod3.getYears();
        mutablePeriod3.addWeeks(4);
        mutablePeriod3.addSeconds(32);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType24.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter2.withParseType(periodType24);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter29.withParseType(periodType30);
        boolean boolean32 = periodFormatter29.isPrinter();
        org.joda.time.format.PeriodParser periodParser33 = periodFormatter29.getParser();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod37.add((long) ' ');
        mutablePeriod37.setMonths(0);
        mutablePeriod37.setMonths(10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod47.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod50 = mutablePeriod47.toMutablePeriod();
        int[] intArray51 = mutablePeriod47.getValues();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        boolean boolean68 = duration55.isShorterThan((org.joda.time.ReadableDuration) duration61);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration61.toPeriod(periodType69, chronology70);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        mutablePeriod76.setPeriod(readablePeriod77);
        mutablePeriod76.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.days();
        int int82 = mutablePeriod76.get(durationFieldType81);
        boolean boolean83 = periodType69.isSupported(durationFieldType81);
        mutablePeriod47.set(durationFieldType81, 8);
        int int86 = mutablePeriod37.get(durationFieldType81);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = periodFormatter29.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod37, "2022-02-11T09:36:03.933Z", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(periodParser33);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = mutablePeriod9.toDurationTo(readableInstant21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology25 = null;
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration24, chronology25);
        boolean boolean27 = duration1.isEqual((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        boolean boolean57 = interval42.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.DateTime dateTime71 = interval69.getEnd();
        java.lang.String str72 = dateTime71.toString();
        boolean boolean73 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration74 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime56.getZone();
        boolean boolean77 = dateTime56.equals((java.lang.Object) "PT60S");
        org.joda.time.Period period78 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology79 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.secondOfDay();
        org.joda.time.DurationField durationField81 = chronology79.weekyears();
        org.joda.time.DurationField durationField82 = chronology79.hours();
        org.joda.time.DurationField durationField83 = chronology79.hours();
        org.joda.time.DateTimeField dateTimeField84 = chronology79.yearOfEra();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-11T09:39:38.340Z" + "'", str72, "2022-02-11T09:39:38.340Z");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.eras();
        int int23 = periodType20.indexOf(durationFieldType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        boolean boolean48 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration41.toPeriod(periodType49, chronology50);
        int int52 = duration31.compareTo((org.joda.time.ReadableDuration) duration41);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod54.addHours(0);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Period period73 = interval72.toPeriod();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        mutablePeriod54.setPeriod((org.joda.time.ReadableDuration) duration60, chronology74);
        java.lang.String str76 = chronology74.toString();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.weekOfWeekyear();
        org.joda.time.Period period78 = duration41.toPeriod(chronology74);
        org.joda.time.DateTimeField dateTimeField79 = chronology74.dayOfYear();
        boolean boolean80 = durationFieldType22.isSupported(chronology74);
        org.joda.time.DateTimeField dateTimeField81 = chronology74.centuryOfEra();
        org.joda.time.DurationField durationField82 = chronology74.weekyears();
        java.lang.String str83 = chronology74.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str76, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str83, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setDays((int) (byte) 0);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyearOfCentury();
        org.joda.time.DurationField durationField25 = chronology22.days();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology22.getZone();
        mutablePeriod5.setPeriod(10000L, chronology22);
        mutablePeriod5.setPeriod(54, (int) (byte) -1, 33, 0, 6, (-3), (-53), 918);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((java.lang.Object) duration4, chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = mutablePeriod6.toDurationFrom(readableInstant7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) duration10, chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        boolean boolean15 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration10);
        java.lang.String str16 = duration10.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(126000000L);
        org.joda.time.Duration duration20 = duration18.plus(1644572139204L);
        boolean boolean21 = duration10.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration22 = duration2.plus((org.joda.time.ReadableDuration) duration20);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT60S" + "'", str16, "PT60S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration22);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod18.toMutablePeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration30 = duration21.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean33 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration32);
        java.lang.String str34 = duration32.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        java.lang.Object obj44 = mutablePeriod42.clone();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((java.lang.Object) duration46, chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        mutablePeriod42.add((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.Chronology chronology53 = interval50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = chronology53.getZone();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((java.lang.Object) duration32, chronology53);
        mutablePeriod18.add((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod55.addDays((-35));
        mutablePeriod55.addMillis(658);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT6000S" + "'", str34, "PT6000S");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        long long12 = duration7.getStandardHours();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        int int17 = mutablePeriod16.getMinutes();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod21.setMillis((int) (short) 0);
        mutablePeriod21.addMonths((int) (short) 1);
        mutablePeriod21.setMinutes((int) (byte) 1);
        mutablePeriod21.addYears(1);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        boolean boolean36 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration33);
        mutablePeriod21.add((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int41 = duration31.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        org.joda.time.Period period56 = duration40.toPeriodTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration57 = mutablePeriod16.toDurationTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = duration7.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration59 = duration57.toDuration();
        long long60 = duration59.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 350L + "'", long12 == 350L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.minutes();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.hourOfDay();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getEnd();
        boolean boolean63 = interval48.contains((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Interval interval76 = interval75.toInterval();
        org.joda.time.DateTime dateTime77 = interval75.getEnd();
        java.lang.String str78 = dateTime77.toString();
        boolean boolean79 = dateTime62.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime62.getZone();
        org.joda.time.Chronology chronology81 = chronology29.withZone(dateTimeZone80);
        org.joda.time.ReadablePartial readablePartial82 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long84 = chronology81.set(readablePartial82, 1644572290822L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-11T09:39:38.830Z" + "'", str78, "2022-02-11T09:39:38.830Z");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        int[] intArray20 = mutablePeriod7.getValues();
        int int21 = mutablePeriod7.getMonths();
        mutablePeriod7.setSeconds(19);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 32, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology17);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology17);
        mutablePeriod24.setMillis((int) (byte) -1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod34.copy();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        int int50 = mutablePeriod49.getYears();
        java.lang.String str51 = mutablePeriod49.toString();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutablePeriod56.setPeriod(readablePeriod57);
        mutablePeriod56.addWeeks((int) (byte) 10);
        mutablePeriod49.add((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant62, readableInstant63);
        boolean boolean65 = mutablePeriod56.equals((java.lang.Object) readableInstant62);
        mutablePeriod34.add((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        mutablePeriod71.setPeriod(readablePeriod72);
        mutablePeriod71.addWeeks((int) (byte) 10);
        int int76 = mutablePeriod71.getMonths();
        int int77 = mutablePeriod71.size();
        mutablePeriod71.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod80 = mutablePeriod71.toMutablePeriod();
        mutablePeriod56.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((java.lang.Object) duration83, chronology84);
        mutablePeriod85.setPeriod((int) '#', 2, (int) (short) 10, (-51), (int) '4', (int) '#', 10, 8);
        mutablePeriod71.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod85);
        mutablePeriod24.add((org.joda.time.ReadablePeriod) mutablePeriod85);
        int[] intArray97 = mutablePeriod24.getValues();
        mutablePeriod24.addMillis(943);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT0.052S" + "'", str51, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod80);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[35, 2, 10, -51, 52, 35, 10, 7]");
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfMinute();
        boolean boolean40 = mutablePeriod3.equals((java.lang.Object) chronology35);
        int int41 = mutablePeriod3.getYears();
        int int42 = mutablePeriod3.getMonths();
        mutablePeriod3.setMinutes(658);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        boolean boolean74 = interval59.contains((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = duration76.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Period period84 = duration82.toPeriod(chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        org.joda.time.Interval interval87 = interval86.toInterval();
        org.joda.time.DateTime dateTime88 = interval86.getEnd();
        java.lang.String str89 = dateTime88.toString();
        boolean boolean90 = dateTime73.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Duration duration91 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.PeriodType periodType92 = mutablePeriod46.getPeriodType();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod46);
        mutablePeriod3.addMonths((int) (short) 0);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-11T09:39:38.891Z" + "'", str89, "2022-02-11T09:39:38.891Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(periodType92);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration51 = duration31.withDurationAdded((long) (short) -1, 8);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        int int56 = mutablePeriod55.getYears();
        java.lang.String str57 = mutablePeriod55.toString();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutablePeriod62.setPeriod(readablePeriod63);
        mutablePeriod62.addWeeks((int) (byte) 10);
        mutablePeriod55.add((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(readableInstant68, readableInstant69);
        boolean boolean71 = mutablePeriod62.equals((java.lang.Object) readableInstant68);
        org.joda.time.Period period72 = mutablePeriod62.toPeriod();
        org.joda.time.PeriodType periodType73 = mutablePeriod62.getPeriodType();
        org.joda.time.Period period74 = duration31.toPeriod(periodType73);
        java.lang.String str75 = periodType73.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT0.052S" + "'", str57, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PeriodType[Standard]" + "'", str75, "PeriodType[Standard]");
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(100, (-1), (int) (short) 0, 34);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        mutablePeriod2.addWeeks((int) 'a');
        int int5 = mutablePeriod2.getHours();
        int int6 = mutablePeriod2.getMinutes();
        mutablePeriod2.addYears(33);
        mutablePeriod2.addDays((-3));
        mutablePeriod2.setMinutes((-52));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod12.copy();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = mutablePeriod12.toDurationTo(readableInstant24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration27, chronology28);
        boolean boolean30 = duration4.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getEnd();
        boolean boolean60 = interval45.contains((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getEnd();
        java.lang.String str75 = dateTime74.toString();
        boolean boolean76 = dateTime59.isBefore((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration77 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime59.getZone();
        boolean boolean80 = dateTime59.equals((java.lang.Object) "PT60S");
        org.joda.time.Period period81 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration83 = duration27.plus((long) '#');
        org.joda.time.Duration duration84 = duration1.plus((org.joda.time.ReadableDuration) duration83);
        long long85 = duration83.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-11T09:39:39.142Z" + "'", str75, "2022-02-11T09:39:39.142Z");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration18.toPeriod(periodType26, chronology27);
        int int29 = duration8.compareTo((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod31.addHours(0);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration37, chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.Period period55 = duration18.toPeriod(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(350L, chronology51);
        mutablePeriod58.setMillis(19);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str53, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1644572287346L);
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        mutablePeriod58.setSeconds(340);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1644572155419L, 0L);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        int int8 = mutablePeriod5.size();
        int[] intArray9 = mutablePeriod5.getValues();
        int int10 = mutablePeriod5.getMonths();
        java.lang.String str11 = mutablePeriod5.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, 0, 0, 0, 0, 0, 0, -52]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P10YT0.052S" + "'", str11, "P10YT0.052S");
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(14, 302, 45, 70);
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        boolean boolean19 = interval5.overlaps((org.joda.time.ReadableInterval) interval17);
        org.joda.time.MutableInterval mutableInterval20 = interval17.toMutableInterval();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getEnd();
        boolean boolean48 = interval33.contains((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant49 = dateTime47.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = instant49.isSupported(dateTimeFieldType50);
        boolean boolean52 = interval17.isBefore((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Instant instant53 = instant49.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int55 = instant53.get(dateTimeFieldType54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(instant53);
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval12.getStart();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = dateTime28.isSupported(dateTimeFieldType30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = dateTime28.isSupported(dateTimeFieldType32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays(100000L);
        org.joda.time.Duration duration37 = duration35.minus(0L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.DateTime dateTime64 = interval62.getEnd();
        boolean boolean65 = interval50.contains((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Instant instant66 = dateTime64.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = instant66.isSupported(dateTimeFieldType67);
        org.joda.time.Interval interval69 = duration37.toIntervalFrom((org.joda.time.ReadableInstant) instant66);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        boolean boolean71 = instant66.isSupported(dateTimeFieldType70);
        int int72 = dateTime28.compareTo((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Duration duration78 = duration76.plus(readableDuration77);
        org.joda.time.Duration duration80 = duration74.withDurationAdded((org.joda.time.ReadableDuration) duration76, (int) (byte) 10);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = duration80.toPeriod(chronology81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Interval interval84 = duration80.toIntervalTo(readableInstant83);
        org.joda.time.Period period85 = interval84.toPeriod();
        org.joda.time.Chronology chronology86 = interval84.getChronology();
        org.joda.time.DurationField durationField87 = chronology86.days();
        org.joda.time.DurationField durationField88 = chronology86.centuries();
        org.joda.time.DateTimeField dateTimeField89 = chronology86.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone90 = chronology86.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((java.lang.Object) dateTime28, chronology86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-27T19:37:59.368Z" + "'", str29, "2022-01-27T19:37:59.368Z");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        int int38 = mutablePeriod37.getYears();
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod37.copy();
        mutablePeriod39.setYears((int) (short) 10);
        int int42 = mutablePeriod39.size();
        mutablePeriod39.setMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod39.set(durationFieldType45, 340);
        int int48 = mutablePeriod33.indexOf(durationFieldType45);
        java.lang.Object obj49 = mutablePeriod33.clone();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "P0Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "P0Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "P0Y");
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.addHours(0);
        mutablePeriod3.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod3.getFieldTypes();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.dayOfMonth();
        org.joda.time.Chronology chronology34 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.dayOfYear();
        org.joda.time.DurationField durationField36 = chronology29.weekyears();
        mutablePeriod3.add((long) '#', chronology29);
        org.joda.time.DurationField durationField38 = chronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField41 = chronology29.minutes();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        int int37 = mutablePeriod32.getMonths();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology40);
        mutablePeriod41.add((long) ' ');
        int int44 = mutablePeriod41.getDays();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.millis();
        mutablePeriod41.add(durationFieldType45, (int) (byte) 1);
        boolean boolean48 = mutablePeriod32.equals((java.lang.Object) durationFieldType45);
        mutablePeriod5.set(durationFieldType45, (int) (short) 1);
        mutablePeriod5.addDays((-52));
        mutablePeriod5.setDays((-19));
        int int55 = mutablePeriod5.getYears();
        int int56 = mutablePeriod5.getHours();
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 11 + "'", int56 == 11);
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(5, 712, 1, 49);
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        mutablePeriod3.add(0L);
        int int13 = mutablePeriod3.getWeeks();
        org.joda.time.Period period14 = mutablePeriod3.toPeriod();
        mutablePeriod3.addHours((-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Period period21 = mutablePeriod10.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        mutablePeriod22.addYears(100);
        org.joda.time.Duration duration26 = new org.joda.time.Duration(83873178385487L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Days days35 = duration34.toStandardDays();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (short) -1, periodType37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Period period53 = duration34.toPeriod(periodType37, chronology52);
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration26, chronology52);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        java.lang.String str20 = mutablePeriod3.toString();
        mutablePeriod3.setMinutes(101);
        mutablePeriod3.setValue((int) (short) 1, (-51));
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue((int) ' ', 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "P10MT0.020S" + "'", str20, "P10MT0.020S");
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(100000L, chronology14);
        java.lang.String str20 = mutablePeriod19.toString();
        mutablePeriod19.setYears(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getEnd();
        boolean boolean50 = interval35.contains((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        boolean boolean67 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Minutes minutes68 = duration54.toStandardMinutes();
        org.joda.time.Duration duration70 = duration54.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.Instant instant72 = dateTime49.toInstant();
        org.joda.time.Duration duration73 = mutablePeriod19.toDurationTo((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT1M40S" + "'", str20, "PT1M40S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(duration73);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutablePeriod20.setPeriod(readablePeriod21);
        mutablePeriod20.addWeeks((int) (byte) 10);
        int int25 = mutablePeriod20.getMonths();
        mutablePeriod20.addDays(10);
        mutablePeriod20.setWeeks((int) (byte) -1);
        int[] intArray32 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod20, (long) 100, 10L);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod20.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType35 = mutablePeriod20.getFieldType(712);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, -90]");
        org.junit.Assert.assertNotNull(mutablePeriod33);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.setMillis((int) (short) 0);
        mutablePeriod5.addMonths((int) (short) 1);
        mutablePeriod5.setMinutes((int) (byte) 1);
        mutablePeriod5.addYears(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        boolean boolean20 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration17);
        mutablePeriod5.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int25 = duration15.compareTo((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration36 = duration27.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean39 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration38);
        java.lang.String str40 = duration36.toString();
        boolean boolean41 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration43 = duration36.withMillis((long) (byte) 1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean57 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) 1);
        int int60 = duration54.compareTo((org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = duration43.isLongerThan((org.joda.time.ReadableDuration) duration59);
        boolean boolean62 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) duration64, chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Duration duration68 = mutablePeriod66.toDurationFrom(readableInstant67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Hours hours73 = duration72.toStandardHours();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Duration duration75 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(readableInstant74, (org.joda.time.ReadableDuration) duration75, periodType76);
        org.joda.time.Duration duration79 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration75, 10);
        org.joda.time.Duration duration80 = duration68.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardMinutes(1644572119917L);
        boolean boolean83 = duration72.isShorterThan((org.joda.time.ReadableDuration) duration82);
        boolean boolean84 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Period period85 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT160S" + "'", str40, "PT160S");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(hours73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.dayTime();
        java.lang.String str9 = periodType8.getName();
        int int10 = periodType8.size();
        org.joda.time.PeriodType periodType11 = periodType8.withDaysRemoved();
        org.joda.time.PeriodType periodType12 = periodType8.withMonthsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(487, 33, 80, (int) ' ', 10, 10, (-35), 40, periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DayTime" + "'", str9, "DayTime");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        boolean boolean51 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration44.toPeriod(periodType52, chronology53);
        org.joda.time.PeriodType periodType55 = periodType52.withYearsRemoved();
        org.joda.time.PeriodType periodType56 = periodType52.withWeeksRemoved();
        org.joda.time.PeriodType periodType57 = periodType52.withSecondsRemoved();
        org.joda.time.Period period58 = interval32.toPeriod(periodType52);
        long long59 = interval32.getStartMillis();
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Interval interval61 = interval32.toInterval();
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1643312279946L + "'", long59 == 1643312279946L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        boolean boolean8 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodParser periodParser10 = periodFormatter2.getParser();
        java.util.Locale locale11 = periodFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = periodFormatter2.parseMutablePeriod("2022-02-11T09:39:36.322Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(periodPrinter9);
        org.junit.Assert.assertNull(periodParser10);
        org.junit.Assert.assertNull(locale11);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Period period13 = interval11.toPeriod();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = interval11.contains(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        java.lang.Object obj25 = mutablePeriod23.clone();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((java.lang.Object) duration27, chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        mutablePeriod23.add((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod37.setMillis((int) (short) 0);
        mutablePeriod37.addMonths((int) (short) 1);
        int int42 = mutablePeriod37.size();
        int int43 = mutablePeriod37.getWeeks();
        mutablePeriod37.setYears(8);
        mutablePeriod37.addSeconds(1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        mutablePeriod37.add((org.joda.time.ReadableInterval) interval59);
        boolean boolean63 = interval31.contains((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = interval11.isBefore((org.joda.time.ReadableInterval) interval59);
        org.joda.time.DateTime dateTime65 = interval11.getEnd();
        org.joda.time.Instant instant66 = dateTime65.toInstant();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(instant66);
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.add((int) (short) 1, 32, 2, (int) (byte) 100, (int) (byte) 1, 3, 4, 10);
        mutablePeriod3.setMillis(5);
        mutablePeriod3.addSeconds((-3));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getEnd();
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = interval34.isBefore(readableInterval37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval37);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod39.copy();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod3.addHours(80);
        mutablePeriod3.setMinutes(14);
        org.joda.time.Period period46 = mutablePeriod3.toPeriod();
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        java.lang.String str2 = periodType1.getName();
        int int3 = periodType1.size();
        org.joda.time.PeriodType periodType4 = periodType1.withDaysRemoved();
        org.joda.time.PeriodType periodType5 = periodType1.withMonthsRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1644572311116L, periodType6);
        int int8 = mutablePeriod7.getMillis();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DayTime" + "'", str2, "DayTime");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31116 + "'", int8 == 31116);
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        boolean boolean46 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Minutes minutes47 = duration33.toStandardMinutes();
        org.joda.time.Duration duration49 = duration33.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod54.clear();
        mutablePeriod54.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType64 = null;
        boolean boolean65 = mutablePeriod54.isSupported(durationFieldType64);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration74.toPeriod(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        org.joda.time.Period period79 = interval78.toPeriod();
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.hourOfDay();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.weekyearOfCentury();
        mutablePeriod54.add((long) (short) 100, chronology80);
        org.joda.time.DurationField durationField84 = chronology80.halfdays();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((java.lang.Object) duration33, chronology80);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 51, (long) (byte) -1, chronology80);
        org.joda.time.DateTimeField dateTimeField87 = chronology80.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField88 = chronology80.era();
        org.joda.time.DurationField durationField89 = chronology80.years();
        org.joda.time.DateTimeField dateTimeField90 = chronology80.halfdayOfDay();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572188932L);
        mutablePeriod1.addMinutes((-124));
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DurationField durationField34 = chronology29.seconds();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((java.lang.Object) chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType24.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter2.withParseType(periodType24);
        org.joda.time.PeriodType periodType30 = periodType24.withMonthsRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withMinutesRemoved();
        org.joda.time.PeriodType periodType32 = periodType30.withWeeksRemoved();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        mutablePeriod4.addDays(10);
        mutablePeriod4.setWeeks((int) (byte) -1);
        mutablePeriod4.addWeeks(8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((java.lang.Object) period28, chronology44);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod4, chronology44);
        long long58 = chronology44.getDateTimeMillis((int) (short) 1, 3, (int) (byte) 1, 0, (int) '#', (int) (short) 10, 0);
        org.joda.time.DateTimeField dateTimeField59 = chronology44.halfdayOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        mutablePeriod63.clear();
        org.joda.time.MutablePeriod mutablePeriod70 = mutablePeriod63.copy();
        int[] intArray72 = chronology44.get((org.joda.time.ReadablePeriod) mutablePeriod63, 1644572122254L);
        org.joda.time.DurationField durationField73 = chronology44.weekyears();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-62130497090000L) + "'", long58 == (-62130497090000L));
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 2719, 1, 9, 35, 22, 254]");
        org.junit.Assert.assertNotNull(durationField73);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        java.lang.Object obj3 = mutablePeriod2.clone();
        mutablePeriod2.setPeriod(1643312042898L, 1643312026949L);
        mutablePeriod2.addYears(34);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "P34YT-15.949S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "P34YT-15.949S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "P34YT-15.949S");
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        mutablePeriod3.setMonths((int) (short) 10);
        mutablePeriod3.setMillis((-1));
        org.joda.time.DurationFieldType[] durationFieldTypeArray40 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addDays(32);
        org.joda.time.PeriodType periodType43 = mutablePeriod3.getPeriodType();
        mutablePeriod3.addMonths(97);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(durationFieldTypeArray40);
        org.junit.Assert.assertNotNull(periodType43);
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(10, 5, (-3), (-20), 33, 7, 0, (-53));
        mutablePeriod8.setMonths((int) (short) 0);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.yearOfEra();
        org.joda.time.DurationField durationField37 = chronology29.weekyears();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setMillis(0);
        mutablePeriod2.setSeconds(46);
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology13.dayOfYear();
        java.lang.String str32 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField33 = chronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str32, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1643312066184L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = duration1.toPeriod();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 27388534436");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        mutablePeriod3.setSeconds(5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addYears(1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        boolean boolean18 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration15);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int23 = duration13.compareTo((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration34 = duration25.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean37 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration36);
        java.lang.String str38 = duration34.toString();
        boolean boolean39 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration41 = duration34.withMillis((long) (byte) 1);
        org.joda.time.Duration duration42 = duration34.toDuration();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(0L);
        org.joda.time.Duration duration46 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, 918);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT160S" + "'", str38, "PT160S");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(126001000L, 0L);
        mutablePeriod2.addMonths(102);
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572239601L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Period period30 = interval29.toPeriod();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((java.lang.Object) period15, chronology31);
        org.joda.time.DurationField durationField37 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.secondOfDay();
        org.joda.time.DurationField durationField39 = chronology31.months();
        mutablePeriod1.add(1644572138663L, chronology31);
        org.joda.time.DateTimeField dateTimeField41 = chronology31.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology31.weekyearOfCentury();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology17);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology17);
        mutablePeriod24.setMillis((int) (byte) -1);
        mutablePeriod24.setDays(4);
        mutablePeriod24.addYears(1250);
        mutablePeriod24.addMinutes(36);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Period period40 = interval39.toPeriod();
        boolean boolean41 = interval12.isBefore((org.joda.time.ReadableInterval) interval39);
        long long42 = interval12.getEndMillis();
        org.joda.time.DateTime dateTime43 = interval12.getStart();
        org.joda.time.DateTime dateTime44 = interval12.getStart();
        long long45 = interval12.getStartMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644572380645L + "'", long42 == 1644572380645L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1643312280645L + "'", long45 == 1643312280645L);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.setMinutes((int) ' ');
        mutablePeriod4.setYears(0);
        java.lang.String str11 = mutablePeriod4.toString();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-124L));
        long long14 = duration13.getMillis();
        org.joda.time.Seconds seconds15 = duration13.toStandardSeconds();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.add((long) ' ');
        int int22 = mutablePeriod19.getDays();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.millis();
        mutablePeriod19.add(durationFieldType23, (int) (byte) 1);
        int int26 = mutablePeriod19.getWeeks();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        boolean boolean46 = mutablePeriod30.isSupported(durationFieldType44);
        boolean boolean47 = mutablePeriod19.isSupported(durationFieldType44);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Period period64 = interval63.toPeriod();
        org.joda.time.Chronology chronology65 = interval63.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.days();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.millisOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology65.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology65);
        org.joda.time.DurationField durationField71 = chronology65.centuries();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology65);
        org.joda.time.DurationField durationField73 = durationFieldType44.getField(chronology65);
        int int74 = seconds15.get(durationFieldType44);
        java.lang.String str75 = durationFieldType44.toString();
        mutablePeriod4.set(durationFieldType44, 112);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT32M" + "'", str11, "PT32M");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-124L) + "'", long14 == (-124L));
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "days" + "'", str75, "days");
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        org.joda.time.PeriodType periodType5 = periodFormatter3.getParseType();
        java.util.Locale locale6 = periodFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod7 = org.joda.time.MutablePeriod.parse("P1DT11H", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodType5);
        org.junit.Assert.assertNull(locale6);
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        java.lang.Object obj49 = null;
        boolean boolean50 = duration31.equals(obj49);
        java.lang.String str51 = duration31.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DurationFieldType[] durationFieldTypeArray61 = mutablePeriod59.getFieldTypes();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology78);
        org.joda.time.DateTimeField dateTimeField82 = chronology78.dayOfMonth();
        org.joda.time.Chronology chronology83 = chronology78.withUTC();
        org.joda.time.DateTimeField dateTimeField84 = chronology78.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField85 = chronology78.secondOfMinute();
        mutablePeriod59.add(6000000L, chronology78);
        org.joda.time.DateTimeField dateTimeField87 = chronology78.weekOfWeekyear();
        boolean boolean88 = duration31.equals((java.lang.Object) chronology78);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT126000S" + "'", str51, "PT126000S");
        org.junit.Assert.assertNotNull(durationFieldTypeArray61);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod10.copy();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = mutablePeriod10.toDurationTo(readableInstant22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration25, chronology26);
        boolean boolean28 = duration2.isEqual((org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        java.lang.String str73 = dateTime72.toString();
        boolean boolean74 = dateTime57.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime57.getZone();
        org.joda.time.Period period77 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology79 = dateTime57.getChronology();
        org.joda.time.ReadablePartial readablePartial80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = chronology79.get(readablePartial80, 1644572327904L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:39:40.996Z" + "'", str73, "2022-02-11T09:39:40.996Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        int int4 = mutablePeriod3.getWeeks();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableInstant5, (org.joda.time.ReadableDuration) duration6, periodType7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration19 = duration10.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean22 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration21);
        java.lang.String str23 = duration21.toString();
        int int24 = duration6.compareTo((org.joda.time.ReadableDuration) duration21);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration21);
        java.lang.Object obj26 = mutablePeriod3.clone();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT6000S" + "'", str23, "PT6000S");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT1H40M0.087S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT1H40M0.087S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT1H40M0.087S");
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1644572119390L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = duration11.withMillis(1644572115768L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration25 = duration16.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getEnd();
        boolean boolean55 = interval40.contains((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getEnd();
        java.lang.String str70 = dateTime69.toString();
        boolean boolean71 = dateTime54.isBefore((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration72 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateTime54);
        long long73 = dateTime54.getMillis();
        org.joda.time.Interval interval74 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Interval interval75 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Period period76 = duration11.toPeriod();
        org.joda.time.Duration duration77 = duration1.minus((org.joda.time.ReadableDuration) duration11);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-11T09:39:41.119Z" + "'", str70, "2022-02-11T09:39:41.119Z");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644572381119L + "'", long73 == 1644572381119L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(duration77);
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration13 = interval11.toDuration();
        long long14 = interval11.toDurationMillis();
        org.joda.time.Period period15 = interval11.toPeriod();
        org.joda.time.DateTime dateTime16 = interval11.getEnd();
        org.joda.time.Period period17 = interval11.toPeriod();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((java.lang.Object) duration19, chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        long long24 = interval23.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = interval23.contains(readableInstant25);
        boolean boolean27 = interval11.contains((org.joda.time.ReadableInterval) interval23);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, periodType29);
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod30.toMutablePeriod();
        boolean boolean32 = interval11.equals((java.lang.Object) mutablePeriod31);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1260100000L + "'", long14 == 1260100000L);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField37 = chronology29.halfdayOfDay();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        mutablePeriod3.setMonths((int) (short) 10);
        mutablePeriod3.add(8, 100, 5, 18, 33, 80, 340, (int) (short) 0);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        mutablePeriod50.setMillis((int) (short) 0);
        mutablePeriod50.addMonths((int) (short) 1);
        mutablePeriod50.setMinutes((int) (byte) 1);
        mutablePeriod50.setWeeks((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod59 = mutablePeriod50.toMutablePeriod();
        mutablePeriod50.addYears(100);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutablePeriod59);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addMonths(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod16.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod20.toMutablePeriod();
        mutablePeriod23.setPeriod(54, 943, 0, 20, 2, 2, 35, 3);
        mutablePeriod23.setMonths(19);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(mutablePeriod23);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, 4, 943, 54, 302, (-124), 8, 918);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        boolean boolean71 = interval56.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration79.toPeriod(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Interval interval83 = duration79.toIntervalTo(readableInstant82);
        org.joda.time.Interval interval84 = interval83.toInterval();
        org.joda.time.DateTime dateTime85 = interval83.getEnd();
        java.lang.String str86 = dateTime85.toString();
        boolean boolean87 = dateTime70.isBefore((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean88 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Instant instant89 = dateTime85.toInstant();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:39:41.500Z" + "'", str42, "2022-02-11T09:39:41.500Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022-02-11T09:39:41.500Z" + "'", str86, "2022-02-11T09:39:41.500Z");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(instant89);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.days();
        boolean boolean5 = mutablePeriod1.isSupported(durationFieldType4);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        mutablePeriod19.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod19.copy();
        org.joda.time.PeriodType periodType31 = mutablePeriod19.getPeriodType();
        org.joda.time.PeriodType periodType32 = periodType31.withWeeksRemoved();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod36.add((long) ' ');
        mutablePeriod36.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        mutablePeriod45.setPeriod(readablePeriod46);
        mutablePeriod45.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.days();
        int int51 = mutablePeriod45.get(durationFieldType50);
        boolean boolean52 = mutablePeriod36.isSupported(durationFieldType50);
        int int53 = periodType32.indexOf(durationFieldType50);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        org.joda.time.Period period66 = interval65.toPeriod();
        org.joda.time.Chronology chronology67 = interval65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, periodType32, chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.hourOfDay();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology76);
        mutablePeriod73.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod77);
        org.joda.time.DurationFieldType[] durationFieldTypeArray79 = mutablePeriod77.getFieldTypes();
        int[] intArray82 = chronology67.get((org.joda.time.ReadablePeriod) mutablePeriod77, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField83 = chronology67.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField84 = chronology67.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology67);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(100L, (-124L), chronology67);
        org.joda.time.DateTimeField dateTimeField87 = chronology67.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField88 = chronology67.dayOfWeek();
        org.joda.time.DurationField durationField89 = durationFieldType4.getField(chronology67);
        org.joda.time.DurationField durationField90 = chronology67.weekyears();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationFieldTypeArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(durationField90);
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        boolean boolean32 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration25.toPeriod(periodType33, chronology34);
        org.joda.time.PeriodType periodType36 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType37 = periodType33.withWeeksRemoved();
        org.joda.time.PeriodType periodType38 = periodType33.withSecondsRemoved();
        org.joda.time.Period period39 = interval13.toPeriod(periodType33);
        org.joda.time.PeriodType periodType40 = periodType33.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1644572118532L, (long) 1, periodType40);
        int int42 = mutablePeriod41.getYears();
        org.joda.time.DurationFieldType durationFieldType44 = mutablePeriod41.getFieldType((int) (short) 0);
        mutablePeriod41.addYears(2784);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-52) + "'", int42 == (-52));
        org.junit.Assert.assertNotNull(durationFieldType44);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(10, 456825, 0, (int) (short) 10, (-1), 100, 51, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = mutablePeriod8.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod7.setMillis((int) ' ');
        mutablePeriod7.addMonths(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod30.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod30.copy();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Duration duration43 = mutablePeriod30.toDurationTo(readableInstant42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology46 = null;
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration45, chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        java.lang.Object obj57 = mutablePeriod55.clone();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((java.lang.Object) duration59, chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        mutablePeriod55.add((org.joda.time.ReadableInterval) interval63);
        org.joda.time.DateTime dateTime65 = interval63.getStart();
        org.joda.time.Chronology chronology66 = interval63.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.secondOfDay();
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration45, chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology66.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField73 = chronology66.monthOfYear();
        org.joda.time.DateTimeField dateTimeField74 = chronology66.halfdayOfDay();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology13.years();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        java.lang.String str23 = duration20.toString();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean26 = periodType24.equals((java.lang.Object) false);
        org.joda.time.Period period27 = duration20.toPeriod(periodType24);
        org.joda.time.PeriodType periodType28 = periodType24.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType24);
        int[] intArray31 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod29, 1643312161814L);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod29.setMillis((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT126000S" + "'", str23, "PT126000S");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 2717, 0]");
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        boolean boolean35 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration28.toPeriod(periodType36, chronology37);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutablePeriod43.setPeriod(readablePeriod44);
        mutablePeriod43.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.days();
        int int49 = mutablePeriod43.get(durationFieldType48);
        boolean boolean50 = periodType36.isSupported(durationFieldType48);
        mutablePeriod7.set(durationFieldType48, (int) '4');
        int int53 = mutablePeriod7.getDays();
        mutablePeriod7.addMinutes(40);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 8, (long) '4');
        mutablePeriod2.add((int) '#', (-1), (int) (byte) 0, 4, 32, 100, 32, (int) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        int int16 = mutablePeriod15.getYears();
        java.lang.String str17 = mutablePeriod15.toString();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29);
        boolean boolean31 = mutablePeriod22.equals((java.lang.Object) readableInstant28);
        org.joda.time.Period period32 = mutablePeriod22.toPeriod();
        org.joda.time.Period period33 = mutablePeriod22.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod2.addMonths(2);
        int int38 = mutablePeriod2.getDays();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        mutablePeriod42.clear();
        mutablePeriod42.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType52 = null;
        boolean boolean53 = mutablePeriod42.isSupported(durationFieldType52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology56);
        int int58 = mutablePeriod57.getWeeks();
        mutablePeriod42.add((org.joda.time.ReadablePeriod) mutablePeriod57);
        mutablePeriod57.setWeeks((int) (short) 100);
        mutablePeriod2.add((org.joda.time.ReadablePeriod) mutablePeriod57);
        int int63 = mutablePeriod57.getYears();
        int int64 = mutablePeriod57.size();
        mutablePeriod57.addSeconds(51);
        mutablePeriod57.setMinutes((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.052S" + "'", str17, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 340);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.add((org.joda.time.ReadablePeriod) mutablePeriod9);
        boolean boolean11 = duration1.equals((java.lang.Object) mutablePeriod9);
        mutablePeriod9.addMillis(2);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        java.lang.String str11 = mutablePeriod4.toString();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        int[] intArray42 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod35, (long) '#', (-1L));
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        java.lang.String str47 = duration44.toString();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean50 = periodType48.equals((java.lang.Object) false);
        org.joda.time.Period period51 = duration44.toPeriod(periodType48);
        org.joda.time.PeriodType periodType52 = periodType48.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(periodType52);
        int[] intArray56 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod53, (long) (byte) 1, (long) '#');
        org.joda.time.DurationField durationField57 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField58 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = chronology26.weekOfWeekyear();
        mutablePeriod4.setPeriod(252000000L, chronology26);
        org.joda.time.DurationField durationField61 = chronology26.eras();
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P10W" + "'", str11, "P10W");
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT126000S" + "'", str47, "PT126000S");
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1643312094639L);
        mutablePeriod1.addDays(93);
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod8.copy();
        org.joda.time.PeriodType periodType20 = mutablePeriod8.getPeriodType();
        boolean boolean21 = periodType0.equals((java.lang.Object) mutablePeriod8);
        org.joda.time.PeriodType periodType22 = periodType0.withHoursRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withMinutesRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = periodType24.getFieldType(38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 38");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        long long6 = interval5.getEndMillis();
        org.joda.time.Interval interval7 = interval5.toInterval();
        org.joda.time.Duration duration9 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration20 = duration11.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getEnd();
        boolean boolean50 = interval35.contains((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.DateTime dateTime64 = interval62.getEnd();
        java.lang.String str65 = dateTime64.toString();
        boolean boolean66 = dateTime49.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Duration duration67 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime49.getZone();
        org.joda.time.Period period69 = duration19.toPeriodTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period70 = duration9.toPeriodTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Instant instant71 = dateTime49.toInstant();
        org.joda.time.Chronology chronology72 = instant71.getChronology();
        long long73 = instant71.getMillis();
        boolean boolean74 = interval5.isAfter((org.joda.time.ReadableInstant) instant71);
        long long75 = instant71.getMillis();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant71, readableInstant76, periodType77);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572381900L + "'", long6 == 1644572381900L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-11T09:39:41.900Z" + "'", str65, "2022-02-11T09:39:41.900Z");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(chronology72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644572381900L + "'", long73 == 1644572381900L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1644572381900L + "'", long75 == 1644572381900L);
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (byte) 0, (int) (byte) 0, 0, (int) '#', (int) (short) -1, 3, (int) (short) 1, (int) ' ');
        mutablePeriod5.addWeeks((-19));
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.Chronology chronology40 = chronology35.withUTC();
        mutablePeriod5.setPeriod(560370662326057L, chronology35);
        org.joda.time.DateTimeField dateTimeField42 = chronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addHours((int) (short) 1);
        int int45 = mutablePeriod15.getMinutes();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        mutablePeriod53.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod53.copy();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        mutablePeriod53.setPeriod((org.joda.time.ReadableInterval) interval76);
        mutablePeriod15.add((org.joda.time.ReadableInterval) interval76);
        mutablePeriod15.setHours(102);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType11 = periodType5.getFieldType(456825);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 456825");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology15);
        mutablePeriod20.setPeriod(2, (int) (byte) 0, (int) (byte) 10, 1, 4, 2, 2, 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod34.setPeriod((long) (short) 0, chronology51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.secondOfMinute();
        boolean boolean71 = mutablePeriod34.equals((java.lang.Object) chronology66);
        org.joda.time.Chronology chronology72 = chronology66.withUTC();
        mutablePeriod20.setPeriod((long) 100, chronology72);
        org.joda.time.DurationField durationField74 = chronology72.centuries();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology72.minuteOfDay();
        org.joda.time.DurationField durationField77 = chronology72.centuries();
        org.joda.time.DateTimeField dateTimeField78 = chronology72.clockhourOfDay();
        org.joda.time.DurationField durationField79 = chronology72.halfdays();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter40 = null;
        org.joda.time.format.PeriodParser periodParser41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = new org.joda.time.format.PeriodFormatter(periodPrinter40, periodParser41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        boolean boolean59 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration52.toPeriod(periodType60, chronology61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutablePeriod67.setPeriod(readablePeriod68);
        mutablePeriod67.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.days();
        int int73 = mutablePeriod67.get(durationFieldType72);
        boolean boolean74 = periodType60.isSupported(durationFieldType72);
        int int75 = periodType60.size();
        org.joda.time.PeriodType periodType76 = periodType60.withMonthsRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter42.withParseType(periodType76);
        java.util.Locale locale79 = null;
        org.joda.time.format.PeriodFormatter periodFormatter80 = periodFormatter78.withLocale(locale79);
        java.util.Locale locale81 = periodFormatter78.getLocale();
        boolean boolean82 = periodFormatter78.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter83 = periodFormatter78.getPrinter();
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.time();
        int int85 = periodType84.size();
        org.joda.time.PeriodType periodType86 = periodType84.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter87 = periodFormatter78.withParseType(periodType86);
        org.joda.time.PeriodType periodType88 = periodType86.withMonthsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter89 = periodFormatter2.withParseType(periodType86);
        boolean boolean90 = periodFormatter89.isParser();
        java.util.Locale locale91 = null;
        org.joda.time.format.PeriodFormatter periodFormatter92 = periodFormatter89.withLocale(locale91);
        boolean boolean93 = periodFormatter92.isPrinter();
        java.util.Locale locale94 = periodFormatter92.getLocale();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(periodFormatter80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(periodPrinter83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodFormatter87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodFormatter89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(periodFormatter92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(locale94);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1644572148181L, 1644572356714L);
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.setMillis((int) (short) 0);
        mutablePeriod5.addMonths((int) (short) 1);
        mutablePeriod5.setMinutes((int) (byte) 1);
        mutablePeriod5.addYears(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        boolean boolean20 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration17);
        mutablePeriod5.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int25 = duration15.compareTo((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration36 = duration27.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean39 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration38);
        java.lang.String str40 = duration36.toString();
        boolean boolean41 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration43 = duration36.withMillis((long) (byte) 1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean57 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) 1);
        int int60 = duration54.compareTo((org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = duration43.isLongerThan((org.joda.time.ReadableDuration) duration59);
        boolean boolean62 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) duration64, chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Duration duration68 = mutablePeriod66.toDurationFrom(readableInstant67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Hours hours73 = duration72.toStandardHours();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Duration duration75 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(readableInstant74, (org.joda.time.ReadableDuration) duration75, periodType76);
        org.joda.time.Duration duration79 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration75, 10);
        org.joda.time.Duration duration80 = duration68.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardMinutes(1644572119917L);
        boolean boolean83 = duration72.isShorterThan((org.joda.time.ReadableDuration) duration82);
        boolean boolean84 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds85 = duration82.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 98674327195020");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT160S" + "'", str40, "PT160S");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(hours73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DurationFieldType[] durationFieldTypeArray69 = mutablePeriod67.getFieldTypes();
        int[] intArray72 = chronology57.get((org.joda.time.ReadablePeriod) mutablePeriod67, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField73 = chronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField74 = chronology57.minuteOfHour();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology77);
        mutablePeriod78.add((int) (byte) 10, (int) '#', (int) (byte) 1, (int) ' ', (int) (byte) 10, 2, 100, 100);
        mutablePeriod78.clear();
        long long91 = chronology57.add((org.joda.time.ReadablePeriod) mutablePeriod78, 1643312034248L, 10);
        org.joda.time.DateTimeField dateTimeField92 = chronology57.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone93 = chronology57.getZone();
        org.joda.time.ReadablePartial readablePartial94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = chronology57.get(readablePartial94, 1644572298129L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1643312034248L + "'", long91 == 1643312034248L);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.addSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType8 = mutablePeriod3.getPeriodType();
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:13.523Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:13.523Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutablePeriod7.setPeriod(readablePeriod8);
        mutablePeriod7.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        int int13 = mutablePeriod7.get(durationFieldType12);
        java.lang.String str14 = durationFieldType12.getName();
        int int15 = periodType2.indexOf(durationFieldType12);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getEnd();
        boolean boolean47 = interval32.contains((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration48 = mutablePeriod19.toDurationTo((org.joda.time.ReadableInstant) dateTime46);
        int int49 = mutablePeriod19.getDays();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod53.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod56 = mutablePeriod53.toMutablePeriod();
        mutablePeriod56.setSeconds((int) (short) 10);
        mutablePeriod56.addDays(100);
        mutablePeriod56.addHours((int) '4');
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutablePeriod67.setPeriod(readablePeriod68);
        mutablePeriod67.addWeeks((int) (byte) 10);
        int int72 = mutablePeriod67.getMonths();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology75);
        mutablePeriod76.add((long) ' ');
        int int79 = mutablePeriod76.getDays();
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.millis();
        mutablePeriod76.add(durationFieldType80, (int) (byte) 1);
        boolean boolean83 = mutablePeriod67.equals((java.lang.Object) durationFieldType80);
        mutablePeriod56.set(durationFieldType80, 340);
        mutablePeriod19.set(durationFieldType80, 0);
        int int88 = periodType2.indexOf(durationFieldType80);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(1644572158982L, 1643312036835L, periodType2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType91 = mutablePeriod89.getFieldType((-28));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "days" + "'", str14, "days");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        java.lang.Object obj10 = mutablePeriod8.clone();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((java.lang.Object) duration12, chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval16);
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.Chronology chronology19 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (short) 10, chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.centuryOfEra();
        org.joda.time.DurationField durationField24 = chronology19.halfdays();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getEnd();
        org.joda.time.Duration duration16 = interval13.toDuration();
        org.joda.time.DateTime dateTime17 = interval13.getStart();
        org.joda.time.Period period18 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        boolean boolean31 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration28);
        long long32 = duration28.getStandardSeconds();
        int int33 = duration1.compareTo((org.joda.time.ReadableDuration) duration28);
        long long34 = duration1.getStandardHours();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        java.lang.Object obj44 = mutablePeriod42.clone();
        int int45 = mutablePeriod42.getSeconds();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        boolean boolean73 = interval58.contains((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        java.lang.String str88 = dateTime87.toString();
        boolean boolean89 = dateTime72.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Duration duration90 = mutablePeriod42.toDurationTo((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Duration duration91 = duration1.plus((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Duration duration93 = org.joda.time.Duration.standardMinutes((long) 100);
        long long94 = duration93.getStandardMinutes();
        java.lang.String str95 = duration93.toString();
        org.joda.time.Duration duration96 = new org.joda.time.Duration((java.lang.Object) str95);
        long long97 = duration96.getStandardSeconds();
        long long98 = duration96.getMillis();
        boolean boolean99 = duration91.isEqual((org.joda.time.ReadableDuration) duration96);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1260100L + "'", long32 == 1260100L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.052S");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-11T09:39:42.554Z" + "'", str88, "2022-02-11T09:39:42.554Z");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 100L + "'", long94 == 100L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "PT6000S" + "'", str95, "PT6000S");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 6000L + "'", long97 == 6000L);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 6000000L + "'", long98 == 6000000L);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod39.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod39.add((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod39.add((long) 4);
        int int47 = mutablePeriod39.getMillis();
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod39.setMinutes(4);
        int int51 = mutablePeriod39.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = mutablePeriod39.getValue(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        java.lang.Object obj13 = mutablePeriod11.clone();
        boolean boolean14 = duration1.equals((java.lang.Object) mutablePeriod11);
        mutablePeriod11.setDays((int) ' ');
        mutablePeriod11.setDays((int) (byte) 0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, chronology21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        boolean boolean35 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration36 = duration20.minus((org.joda.time.ReadableDuration) duration24);
        mutablePeriod11.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        boolean boolean50 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration47);
        boolean boolean51 = duration24.isEqual((org.joda.time.ReadableDuration) duration39);
        org.joda.time.ReadableDuration readableDuration52 = null;
        boolean boolean53 = duration39.isLongerThan(readableDuration52);
        org.joda.time.Hours hours54 = duration39.toStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "P1DT11H0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "P1DT11H0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "P1DT11H0.052S");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(hours54);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = mutablePeriod32.getFieldTypes();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod37.addHours(0);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        mutablePeriod37.setPeriod((org.joda.time.ReadableDuration) duration43, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType35, chronology57);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) (short) 1, (long) (short) 100, periodType22, chronology57);
        org.joda.time.PeriodType periodType62 = periodType22.withMinutesRemoved();
        org.joda.time.PeriodType periodType63 = periodType62.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(periodType63);
        java.lang.String str65 = periodType63.getName();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "YearsNoYears" + "'", str65, "YearsNoYears");
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.withMillis(1644572115768L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        java.lang.String str17 = duration14.toString();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean20 = periodType18.equals((java.lang.Object) false);
        org.joda.time.Period period21 = duration14.toPeriod(periodType18);
        org.joda.time.PeriodType periodType22 = periodType18.withYearsRemoved();
        org.joda.time.Period period23 = duration12.toPeriod(periodType18);
        org.joda.time.PeriodType periodType24 = periodType18.withWeeksRemoved();
        org.joda.time.PeriodType periodType25 = periodType18.withYearsRemoved();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Period period39 = interval38.toPeriod();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfYear();
        org.joda.time.Chronology chronology44 = chronology40.withUTC();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(100000L, chronology40);
        org.joda.time.DurationField durationField46 = chronology40.millis();
        org.joda.time.DateTimeField dateTimeField47 = chronology40.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((java.lang.Object) periodType18, chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT126000S" + "'", str17, "PT126000S");
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1644572278721L);
        org.joda.time.Days days2 = duration1.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        mutablePeriod5.addDays((int) 'a');
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        java.lang.String str14 = duration11.toString();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean17 = periodType15.equals((java.lang.Object) false);
        org.joda.time.Period period18 = duration11.toPeriod(periodType15);
        org.joda.time.PeriodType periodType19 = periodType15.withMillisRemoved();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.days();
        boolean boolean21 = periodType15.equals((java.lang.Object) periodType20);
        org.joda.time.PeriodType periodType22 = periodType15.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        boolean boolean24 = periodType15.isSupported(durationFieldType23);
        boolean boolean25 = mutablePeriod5.isSupported(durationFieldType23);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.Period period39 = interval37.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = interval37.isAfter(readableInterval41);
        org.joda.time.MutableInterval mutableInterval43 = interval37.toMutableInterval();
        org.joda.time.format.PeriodPrinter periodPrinter46 = null;
        org.joda.time.format.PeriodParser periodParser47 = null;
        org.joda.time.format.PeriodFormatter periodFormatter48 = new org.joda.time.format.PeriodFormatter(periodPrinter46, periodParser47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        boolean boolean65 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration58.toPeriod(periodType66, chronology67);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        mutablePeriod73.setPeriod(readablePeriod74);
        mutablePeriod73.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.days();
        int int79 = mutablePeriod73.get(durationFieldType78);
        boolean boolean80 = periodType66.isSupported(durationFieldType78);
        int int81 = periodType66.size();
        org.joda.time.PeriodType periodType82 = periodType66.withMonthsRemoved();
        org.joda.time.PeriodType periodType83 = periodType82.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter84 = periodFormatter48.withParseType(periodType82);
        org.joda.time.PeriodType periodType85 = periodType82.withMillisRemoved();
        java.lang.String str86 = periodType82.getName();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1644572181205L, 1644572245457L, periodType82);
        org.joda.time.Period period88 = mutableInterval43.toPeriod(periodType82);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT126000S" + "'", str14, "PT126000S");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodFormatter84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Years" + "'", str86, "Years");
        org.junit.Assert.assertNotNull(period88);
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        java.lang.String str38 = chronology34.toString();
        org.joda.time.DurationField durationField39 = chronology34.hours();
        org.joda.time.DurationField durationField40 = chronology34.centuries();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.year();
        org.joda.time.DurationField durationField42 = chronology34.hours();
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str38, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        long long13 = interval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) 100);
        long long16 = duration15.getStandardMinutes();
        java.lang.String str17 = duration15.toString();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((java.lang.Object) str17);
        org.joda.time.Days days19 = duration18.toStandardDays();
        org.joda.time.Duration duration21 = duration18.withMillis(1644572151352L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        boolean boolean34 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getEnd();
        org.joda.time.Interval interval49 = duration27.toIntervalFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Duration duration52 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableInstant51, (org.joda.time.ReadableDuration) duration52, periodType53);
        org.joda.time.PeriodType periodType55 = periodType53.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1643312068647L, periodType53);
        org.joda.time.Period period57 = duration18.toPeriodTo((org.joda.time.ReadableInstant) dateTime48, periodType53);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        boolean boolean70 = duration59.isLongerThan((org.joda.time.ReadableDuration) duration63);
        java.lang.String str71 = duration59.toString();
        org.joda.time.Duration duration73 = duration59.withMillis(14L);
        boolean boolean74 = dateTime48.equals((java.lang.Object) duration73);
        boolean boolean75 = interval12.contains((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1260100000L + "'", long13 == 1260100000L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT6000S" + "'", str17, "PT6000S");
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT126000S" + "'", str71, "PT126000S");
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((-124L));
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Duration duration15 = duration9.minus(1643312110613L);
        long long16 = duration15.getStandardSeconds();
        org.joda.time.Duration duration17 = duration1.minus((org.joda.time.ReadableDuration) duration15);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1642052010L) + "'", long16 == (-1642052010L));
        org.junit.Assert.assertNotNull(duration17);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getEnd();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology20 = interval16.getChronology();
        org.joda.time.DateTime dateTime21 = interval16.getEnd();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod25.add((long) ' ');
        int int28 = mutablePeriod25.getDays();
        mutablePeriod25.setMillis((int) (byte) -1);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        java.lang.String str73 = dateTime72.toString();
        boolean boolean74 = dateTime57.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology76 = dateTime72.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = dateTime72.isSupported(dateTimeFieldType77);
        boolean boolean79 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration81 = new org.joda.time.Duration((-124L));
        long long82 = duration81.getMillis();
        org.joda.time.Seconds seconds83 = duration81.toStandardSeconds();
        org.joda.time.Duration duration85 = duration81.withMillis(1643312146235L);
        org.joda.time.PeriodType periodType86 = null;
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration85, periodType86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int89 = dateTime21.get(dateTimeFieldType88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:39:43.047Z" + "'", str73, "2022-02-11T09:39:43.047Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-124L) + "'", long82 == (-124L));
        org.junit.Assert.assertNotNull(seconds83);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        int int4 = mutablePeriod3.getWeeks();
        mutablePeriod3.setMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = mutablePeriod3.getFieldType(1250);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getMinutes();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        java.lang.String str17 = duration12.toString();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Period period30 = interval29.toPeriod();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.secondOfMinute();
        org.joda.time.DurationField durationField36 = chronology31.weekyears();
        org.joda.time.DurationField durationField37 = chronology31.millis();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.dayOfMonth();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration12, chronology31);
        org.joda.time.DateTimeField dateTimeField40 = chronology31.centuryOfEra();
        org.joda.time.Chronology chronology41 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.monthOfYear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1260100S" + "'", str17, "PT1260100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        mutablePeriod3.addMillis(1);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod3.toMutablePeriod();
        mutablePeriod35.addHours(0);
        mutablePeriod35.addDays(32);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.DateTime dateTime66 = interval64.getEnd();
        boolean boolean67 = interval52.contains((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = duration75.toPeriod(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = duration75.toIntervalTo(readableInstant78);
        org.joda.time.Interval interval80 = interval79.toInterval();
        org.joda.time.DateTime dateTime81 = interval79.getEnd();
        java.lang.String str82 = dateTime81.toString();
        boolean boolean83 = dateTime66.isBefore((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime66.getZone();
        boolean boolean85 = mutablePeriod35.equals((java.lang.Object) dateTime66);
        org.joda.time.Period period86 = mutablePeriod35.toPeriod();
        mutablePeriod35.setPeriod(4, (-27409536), 1250, (-1), (-28), 2, 54, (int) (short) 1);
        java.lang.String str96 = mutablePeriod35.toString();
        mutablePeriod35.addWeeks((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-11T09:39:43.115Z" + "'", str82, "2022-02-11T09:39:43.115Z");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "P4Y-27409536M1250W-1DT-28H2M54.001S" + "'", str96, "P4Y-27409536M1250W-1DT-28H2M54.001S");
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        mutablePeriod3.add(0L);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        int int14 = mutablePeriod3.indexOf(durationFieldType13);
        mutablePeriod3.addHours((int) (short) 1);
        mutablePeriod3.setPeriod(1644572117941L, 1260100L);
        int int20 = mutablePeriod3.getDays();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        int int38 = mutablePeriod37.getYears();
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod37.copy();
        mutablePeriod39.setYears((int) (short) 10);
        mutablePeriod39.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Interval interval63 = interval62.toInterval();
        mutablePeriod39.setPeriod((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        mutablePeriod39.add((org.joda.time.ReadableInterval) interval76);
        boolean boolean79 = interval33.contains((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Period period80 = interval33.toPeriod();
        boolean boolean81 = mutablePeriod3.equals((java.lang.Object) interval33);
        long long82 = interval33.getEndMillis();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1644572383188L + "'", long82 == 1644572383188L);
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter38.isPrinter();
        org.joda.time.PeriodType periodType40 = periodFormatter38.getParseType();
        org.joda.time.format.PeriodParser periodParser41 = periodFormatter38.getParser();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DurationFieldType[] durationFieldTypeArray61 = mutablePeriod59.getFieldTypes();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.forFields(durationFieldTypeArray61);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod64.addHours(0);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Period period83 = interval82.toPeriod();
        org.joda.time.Chronology chronology84 = interval82.getChronology();
        mutablePeriod64.setPeriod((org.joda.time.ReadableDuration) duration70, chronology84);
        org.joda.time.DateTimeField dateTimeField86 = chronology84.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType62, chronology84);
        org.joda.time.PeriodType periodType88 = periodType62.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(4, (int) (byte) 100, (-19), 5, 32, 4, 7, (int) (byte) 0, periodType62);
        org.joda.time.format.PeriodFormatter periodFormatter90 = periodFormatter38.withParseType(periodType62);
        java.util.Locale locale91 = periodFormatter90.getLocale();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNull(periodParser41);
        org.junit.Assert.assertNotNull(durationFieldTypeArray61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodFormatter90);
        org.junit.Assert.assertNull(locale91);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType45 = mutablePeriod5.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.halfdays();
        int int47 = mutablePeriod5.get(durationFieldType46);
        java.lang.String str48 = mutablePeriod5.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setValue(302, 456825);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 302");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "P4WT28H2M80S" + "'", str48, "P4WT28H2M80S");
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology3);
        int int5 = mutablePeriod4.getWeeks();
        java.lang.Object obj6 = mutablePeriod4.clone();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology21.halfdays();
        mutablePeriod4.add((long) (-52), chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.clockhourOfDay();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, chronology21);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod34.setPeriod((long) (short) 0, chronology51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.secondOfMinute();
        boolean boolean71 = mutablePeriod34.equals((java.lang.Object) chronology66);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology78);
        mutablePeriod75.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod79);
        java.lang.Object obj81 = mutablePeriod79.clone();
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((java.lang.Object) duration83, chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        mutablePeriod79.add((org.joda.time.ReadableInterval) interval87);
        mutablePeriod79.addHours((int) (short) 1);
        int[] intArray92 = chronology66.get((org.joda.time.ReadablePeriod) mutablePeriod79, 1260100000L);
        // The following exception was thrown during execution in test generation
        try {
            chronology21.validate(readablePartial30, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "PT0.035S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "PT0.035S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "PT0.035S");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "PT1H1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "PT1H1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "PT1H1M0.052S");
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 0, 2, 0, 14, 1, 40, 0]");
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology15.halfdays();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1644572120402L, (long) (byte) 10, chronology15);
        mutablePeriod21.setMonths((-53));
        int int24 = mutablePeriod21.getSeconds();
        mutablePeriod21.setYears((int) '#');
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-20) + "'", int24 == (-20));
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes(1644572108797L);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        boolean boolean39 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration36);
        boolean boolean41 = duration28.equals((java.lang.Object) 0.0d);
        org.joda.time.ReadableDuration readableDuration42 = null;
        boolean boolean43 = duration28.isLongerThan(readableDuration42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod47.setMillis((int) (short) 0);
        mutablePeriod47.addMonths((int) (short) 1);
        mutablePeriod47.setMinutes((int) (byte) 1);
        mutablePeriod47.addYears(1);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        boolean boolean62 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration59);
        mutablePeriod47.add((org.joda.time.ReadableDuration) duration57);
        int int64 = duration28.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration65 = duration25.plus((org.joda.time.ReadableDuration) duration57);
        long long66 = duration57.getMillis();
        org.joda.time.Seconds seconds67 = duration57.toStandardSeconds();
        java.lang.Class<?> wildcardClass68 = duration57.getClass();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 126000000L + "'", long66 == 126000000L);
        org.junit.Assert.assertNotNull(seconds67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1643312280645L, 1643312128201L);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        int int8 = mutablePeriod5.size();
        mutablePeriod5.setMinutes((int) (short) 1);
        mutablePeriod5.setPeriod(1644572154810L);
        mutablePeriod5.setMillis((int) '#');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572153833L);
        mutablePeriod1.setMonths(102);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration4 = new org.joda.time.Duration((java.lang.Object) 102);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1083773027377440L);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        java.lang.String str22 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.dayOfYear();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        java.lang.String str30 = durationFieldType28.getName();
        mutablePeriod7.add(durationFieldType28, (int) (byte) 1);
        mutablePeriod7.setMillis(80);
        mutablePeriod7.setMillis((-14));
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "days" + "'", str30, "days");
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        java.lang.String str63 = periodType48.getName();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType48, chronology64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        long long72 = interval71.toDurationMillis();
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval71);
        boolean boolean74 = interval25.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Period period75 = interval71.toPeriod();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology82);
        mutablePeriod79.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod83);
        org.joda.time.DurationFieldType[] durationFieldTypeArray85 = mutablePeriod83.getFieldTypes();
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.forFields(durationFieldTypeArray85);
        boolean boolean87 = interval71.equals((java.lang.Object) durationFieldTypeArray85);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType89 = periodType88.withYearsRemoved();
        org.joda.time.Duration duration91 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology92 = null;
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((java.lang.Object) duration91, chronology92);
        org.joda.time.ReadableInstant readableInstant94 = null;
        org.joda.time.Interval interval95 = duration91.toIntervalTo(readableInstant94);
        long long96 = interval95.toDurationMillis();
        org.joda.time.Period period97 = interval95.toPeriod();
        boolean boolean98 = periodType89.equals((java.lang.Object) interval95);
        boolean boolean99 = interval71.isAfter((org.joda.time.ReadableInterval) interval95);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Years" + "'", str63, "Years");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldTypeArray85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 60000L + "'", long96 == 60000L);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        java.util.Locale locale5 = periodFormatter2.getLocale();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        int int12 = mutablePeriod11.getYears();
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod11.copy();
        mutablePeriod13.setDays((int) (byte) 0);
        int int16 = mutablePeriod13.getYears();
        mutablePeriod13.addMonths((int) (short) -1);
        mutablePeriod13.addHours(3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.era();
        java.lang.String str24 = chronology18.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology18.getZone();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str24, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        mutablePeriod21.clear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType41 = null;
        int int42 = mutablePeriod38.get(durationFieldType41);
        int int43 = mutablePeriod38.size();
        mutablePeriod38.addWeeks((int) (short) 0);
        mutablePeriod38.add(0L);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.days();
        int int49 = mutablePeriod38.indexOf(durationFieldType48);
        mutablePeriod38.addHours((int) (short) 1);
        mutablePeriod38.setPeriod(1644572117941L, 1260100L);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) mutablePeriod38);
        mutablePeriod38.setValue((int) (byte) 1, (int) ' ');
        int int59 = mutablePeriod38.getDays();
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = duration31.minus((long) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        int int55 = mutablePeriod54.getYears();
        java.lang.String str56 = mutablePeriod54.toString();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        mutablePeriod61.setPeriod(readablePeriod62);
        mutablePeriod61.addWeeks((int) (byte) 10);
        mutablePeriod54.add((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(readableInstant67, readableInstant68);
        boolean boolean70 = mutablePeriod61.equals((java.lang.Object) readableInstant67);
        org.joda.time.Period period71 = mutablePeriod61.toPeriod();
        org.joda.time.Period period72 = mutablePeriod61.toPeriod();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Duration duration74 = mutablePeriod61.toDurationTo(readableInstant73);
        org.joda.time.Duration duration76 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration74, 3);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology79);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology83);
        mutablePeriod80.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod84);
        mutablePeriod84.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod95 = mutablePeriod84.copy();
        org.joda.time.ReadableInstant readableInstant96 = null;
        org.joda.time.Duration duration97 = mutablePeriod84.toDurationTo(readableInstant96);
        int int98 = duration76.compareTo((org.joda.time.ReadableDuration) duration97);
        org.joda.time.Period period99 = duration76.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.052S" + "'", str56, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(mutablePeriod95);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(100000L, chronology14);
        java.lang.String str20 = mutablePeriod19.toString();
        mutablePeriod19.setYears(0);
        mutablePeriod19.setSeconds(1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        mutablePeriod32.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        mutablePeriod46.clear();
        mutablePeriod46.setValue((int) (byte) 0, (-1));
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod46, chronology57);
        mutablePeriod58.setSeconds((int) '4');
        mutablePeriod58.addHours(100);
        mutablePeriod19.add((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod58.setMonths((int) (short) -1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT1M40S" + "'", str20, "PT1M40S");
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addYears(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DurationFieldType[] durationFieldTypeArray23 = mutablePeriod21.getFieldTypes();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.forFields(durationFieldTypeArray23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod26.addHours(0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Period period45 = interval44.toPeriod();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration32, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType24, chronology46);
        org.joda.time.DateTimeField dateTimeField50 = chronology46.weekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.clockhourOfDay();
        boolean boolean52 = mutablePeriod3.equals((java.lang.Object) dateTimeField51);
        org.joda.time.DurationFieldType[] durationFieldTypeArray53 = mutablePeriod3.getFieldTypes();
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis((long) (-53));
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration55);
        org.junit.Assert.assertNotNull(durationFieldTypeArray23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray53);
        org.junit.Assert.assertNotNull(duration55);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) period12, chronology28);
        org.joda.time.DurationField durationField34 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.centuryOfEra();
        org.joda.time.DurationField durationField37 = chronology28.years();
        org.joda.time.DurationField durationField38 = chronology28.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology28.millisOfSecond();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        boolean boolean5 = periodFormatter2.isParser();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter7.getPrinter();
        java.io.Writer writer9 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod13.setMillis((int) (short) 0);
        mutablePeriod13.addMonths((int) (short) 1);
        int int18 = mutablePeriod13.size();
        mutablePeriod13.add((int) (byte) 0, 8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4');
        mutablePeriod13.clear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        int int33 = mutablePeriod32.getYears();
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod32.copy();
        mutablePeriod34.setYears((int) (short) 10);
        mutablePeriod34.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Interval interval58 = interval57.toInterval();
        mutablePeriod34.setPeriod((org.joda.time.ReadableInterval) interval58);
        mutablePeriod13.add((org.joda.time.ReadableInterval) interval58);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter7.printTo(writer9, (org.joda.time.ReadablePeriod) mutablePeriod13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(periodPrinter8);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType14, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = chronology36.minuteOfDay();
        org.joda.time.DurationField durationField44 = chronology36.eras();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1644572150989L, chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-11T09:35:38.441Z", chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:38.441Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.Duration duration3 = duration1.withMillis(1644572167808L);
        org.joda.time.Seconds seconds4 = duration1.toStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds4);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        boolean boolean19 = interval5.overlaps((org.joda.time.ReadableInterval) interval17);
        org.joda.time.MutableInterval mutableInterval20 = interval17.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval21 = interval17.toMutableInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        boolean boolean34 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getEnd();
        org.joda.time.Interval interval49 = duration27.toIntervalFrom((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = interval17.contains((org.joda.time.ReadableInterval) interval49);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.days();
        java.lang.String str52 = periodType51.getName();
        org.joda.time.PeriodType periodType53 = periodType51.withSecondsRemoved();
        org.joda.time.PeriodType periodType54 = periodType53.withHoursRemoved();
        java.lang.String str55 = periodType54.toString();
        org.joda.time.PeriodType periodType56 = periodType54.withSecondsRemoved();
        org.joda.time.Period period57 = interval49.toPeriod(periodType54);
        int[] intArray58 = period57.getValues();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Days" + "'", str52, "Days");
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PeriodType[Days]" + "'", str55, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType24.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter2.withParseType(periodType24);
        java.util.Locale locale30 = periodFormatter29.getLocale();
        org.joda.time.PeriodType periodType31 = periodFormatter29.getParseType();
        java.util.Locale locale32 = null;
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter29.withLocale(locale32);
        org.joda.time.PeriodType periodType34 = periodFormatter29.getParseType();
        java.lang.StringBuffer stringBuffer35 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod39.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod39.toMutablePeriod();
        mutablePeriod42.setSeconds((int) (short) 10);
        mutablePeriod42.addYears((int) (byte) 10);
        mutablePeriod42.setDays(2);
        org.joda.time.PeriodType periodType49 = mutablePeriod42.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter29.printTo(stringBuffer35, (org.joda.time.ReadablePeriod) mutablePeriod42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        int int28 = duration7.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period29 = duration7.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(60000L, 0L);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        mutablePeriod2.setPeriod(readablePeriod3);
        mutablePeriod2.addSeconds(671);
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType45 = mutablePeriod5.getPeriodType();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.days();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.monthOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.millisOfDay();
        mutablePeriod5.setPeriod(1000L, chronology60);
        mutablePeriod5.setDays(100);
        int int70 = mutablePeriod5.getDays();
        int int71 = mutablePeriod5.getYears();
        mutablePeriod5.addYears((-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology13.minutes();
        org.joda.time.DurationField durationField18 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology13.getDateTimeMillis(1644572155419L, 93, 0, (int) (byte) -1, 32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 93 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType9 = periodType8.withYearsRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withWeeksRemoved();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod18.copy();
        org.joda.time.PeriodType periodType30 = mutablePeriod18.getPeriodType();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType33 = periodType30.getFieldType(1);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1644572151088L);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod40.addHours(0);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration46, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.halfdayOfDay();
        org.joda.time.DurationField durationField63 = durationFieldType38.getField(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.year();
        org.joda.time.DurationField durationField66 = chronology60.seconds();
        mutablePeriod35.setPeriod(1644572280187L, 1644572266085L, chronology60);
        org.joda.time.DurationField durationField68 = durationFieldType33.getField(chronology60);
        boolean boolean69 = periodType8.isSupported(durationFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(92, (int) ' ', 340, 80, (int) (short) 0, 10, 92, (-23), periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1644572129538L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Seconds seconds14 = duration9.toStandardSeconds();
        long long15 = duration9.getMillis();
        org.joda.time.Duration duration17 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration9, 102);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (short) 1);
        boolean boolean20 = duration1.isEqual((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration21 = duration1.toDuration();
        org.joda.time.Duration duration23 = duration21.plus((long) 918);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1260100000L + "'", long15 == 1260100000L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        org.joda.time.Chronology chronology15 = null;
        mutablePeriod3.setPeriod(1644572128330L, chronology15);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        org.joda.time.Period period31 = interval30.toPeriod();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(350L, 2100L, chronology32);
        org.joda.time.DateTimeField dateTimeField38 = chronology32.yearOfCentury();
        boolean boolean39 = mutablePeriod3.equals((java.lang.Object) dateTimeField38);
        mutablePeriod3.addYears(2);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant62, readableInstant63);
        mutablePeriod64.addWeeks((int) 'a');
        mutablePeriod45.add((org.joda.time.ReadablePeriod) mutablePeriod64);
        int int68 = mutablePeriod64.getMonths();
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        mutablePeriod3.addDays(8);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(918, 918, 340, 70, 45, (int) '4', 2719, 943);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = periodFormatter3.getParseType();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        boolean boolean26 = periodType5.equals((java.lang.Object) mutablePeriod13);
        org.joda.time.PeriodType periodType27 = periodType5.withHoursRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withMinutesRemoved();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod32.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod32.toMutablePeriod();
        mutablePeriod32.addDays((int) (byte) 1);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        boolean boolean54 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration47.toPeriod(chronology55);
        mutablePeriod32.mergePeriod((org.joda.time.ReadablePeriod) period56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.weeks();
        int int59 = mutablePeriod32.indexOf(durationFieldType58);
        boolean boolean60 = periodType27.isSupported(durationFieldType58);
        org.joda.time.format.PeriodFormatter periodFormatter61 = periodFormatter3.withParseType(periodType27);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 658, periodType27);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(periodFormatter61);
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getEnd();
        boolean boolean33 = interval18.contains((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration34 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) dateTime32);
        java.lang.String str35 = dateTime32.toString();
        org.joda.time.Instant instant36 = dateTime32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone37 = instant36.getZone();
        org.joda.time.Period period38 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) instant36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((java.lang.Object) instant36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-11T09:39:45.145Z" + "'", str35, "2022-02-11T09:39:45.145Z");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration1.minus(1644572139243L);
        org.joda.time.Duration duration6 = duration1.toDuration();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((java.lang.Object) duration1);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1644572257195L);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = interval13.isAfter(readableInterval14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        boolean boolean43 = interval28.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getEnd();
        org.joda.time.Duration duration70 = interval67.toDuration();
        boolean boolean71 = interval55.overlaps((org.joda.time.ReadableInterval) interval67);
        boolean boolean72 = interval28.isBefore((org.joda.time.ReadableInterval) interval55);
        boolean boolean73 = interval13.equals((java.lang.Object) boolean72);
        org.joda.time.Chronology chronology74 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(1644572162472L, 1644572261323L, chronology74);
        mutablePeriod75.setPeriod((-27409536), 9, (-14), 184, 943, 2, (-53), 54);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Days days8 = duration7.toStandardDays();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (short) -1, periodType10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Period period26 = duration7.toPeriod(periodType10, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfMinute();
        long long35 = chronology25.getDateTimeMillis((long) (-19), 0, 51, (int) '4', 100);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod39.add((long) ' ');
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        mutablePeriod39.setPeriod((long) (short) 0, chronology56);
        int[] intArray60 = chronology25.get((org.joda.time.ReadablePeriod) mutablePeriod39, (long) 712, (long) 32);
        java.lang.String str61 = chronology25.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-83287900L) + "'", long35 == (-83287900L));
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 0, -680]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str61, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) -1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        mutablePeriod1.add(durationFieldType40, (int) '4');
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        mutablePeriod53.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod53.copy();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Duration duration66 = mutablePeriod53.toDurationTo(readableInstant65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration74.toPeriod(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        org.joda.time.Period period79 = interval78.toPeriod();
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.secondOfMinute();
        org.joda.time.DurationField durationField82 = chronology80.months();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration66, chronology80);
        org.joda.time.DateTimeField dateTimeField84 = chronology80.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long89 = chronology80.getDateTimeMillis((int) 'a', 32, 31116, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        org.joda.time.DurationField durationField77 = chronology74.minutes();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.dayOfYear();
        org.joda.time.Chronology chronology79 = chronology74.withUTC();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.weekyearOfCentury();
        org.joda.time.DurationField durationField81 = chronology79.weeks();
        java.lang.String str82 = chronology79.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:39:45.388Z" + "'", str42, "2022-02-11T09:39:45.388Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ISOChronology[UTC]" + "'", str82, "ISOChronology[UTC]");
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        boolean boolean8 = duration1.isEqual((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        int int13 = mutablePeriod12.getMinutes();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod17.setMillis((int) (short) 0);
        mutablePeriod17.addMonths((int) (short) 1);
        mutablePeriod17.setMinutes((int) (byte) 1);
        mutablePeriod17.addYears(1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        boolean boolean32 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration29);
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int37 = duration27.compareTo((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.DateTime dateTime51 = interval49.getEnd();
        org.joda.time.Period period52 = duration36.toPeriodTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration53 = mutablePeriod12.toDurationTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        boolean boolean70 = duration57.isShorterThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration63.toPeriod(periodType71, chronology72);
        org.joda.time.PeriodType periodType74 = periodType71.withYearsRemoved();
        org.joda.time.PeriodType periodType75 = periodType74.withDaysRemoved();
        org.joda.time.PeriodType periodType76 = periodType75.withYearsRemoved();
        org.joda.time.Period period77 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime51, periodType76);
        org.joda.time.Period period78 = duration1.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod79 = period78.toMutablePeriod();
        java.lang.String str80 = period78.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "PT35H" + "'", str80, "PT35H");
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutablePeriod8.setPeriod(readablePeriod9);
        mutablePeriod8.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        int int14 = mutablePeriod8.get(durationFieldType13);
        mutablePeriod8.setMinutes((-1));
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration18 = new org.joda.time.Duration((java.lang.Object) mutablePeriod8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        boolean boolean8 = periodFormatter7.isParser();
        boolean boolean9 = periodFormatter7.isPrinter();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod13.setMillis((int) (short) 0);
        mutablePeriod13.addMonths((int) (short) 1);
        int int18 = mutablePeriod13.size();
        int int19 = mutablePeriod13.getWeeks();
        mutablePeriod13.setYears(8);
        mutablePeriod13.addSeconds(1);
        int int24 = mutablePeriod13.getWeeks();
        java.lang.Object obj25 = null;
        boolean boolean26 = mutablePeriod13.equals(obj25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = periodFormatter7.print((org.joda.time.ReadablePeriod) mutablePeriod13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.centuryOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod26.copy();
        int[] intArray40 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod37, 1644572145972L, (long) 80);
        org.joda.time.DurationField durationField41 = chronology13.weekyears();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-52, -1, -1, -3, -9, -35, -45, -892]");
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.PeriodType periodType2 = periodType0.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod6.toMutablePeriod();
        int[] intArray10 = mutablePeriod6.getValues();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod15.add((long) ' ');
        mutablePeriod15.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = mutablePeriod15.isSupported(durationFieldType29);
        boolean boolean32 = periodType11.isSupported(durationFieldType29);
        int int33 = mutablePeriod6.indexOf(durationFieldType29);
        int int34 = periodType0.indexOf(durationFieldType29);
        org.joda.time.PeriodType periodType35 = periodType0.withWeeksRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withMonthsRemoved();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        long long50 = interval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.DateTime dateTime64 = interval62.getEnd();
        java.lang.String str65 = dateTime64.toString();
        boolean boolean66 = interval49.isAfter((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period67 = interval49.toPeriod();
        boolean boolean68 = periodType35.equals((java.lang.Object) period67);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Days" + "'", str1, "Days");
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1260100000L + "'", long50 == 1260100000L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-11T09:39:45.800Z" + "'", str65, "2022-02-11T09:39:45.800Z");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        int int8 = mutablePeriod5.size();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(100, (int) '#', 2, (-1));
        mutablePeriod13.setYears((-1));
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        java.lang.String str11 = duration8.toString();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean14 = periodType12.equals((java.lang.Object) false);
        org.joda.time.Period period15 = duration8.toPeriod(periodType12);
        org.joda.time.PeriodType periodType16 = periodType12.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        boolean boolean18 = periodType12.equals((java.lang.Object) periodType17);
        org.joda.time.PeriodType periodType19 = periodType12.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        boolean boolean21 = periodType12.isSupported(durationFieldType20);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withParseType(periodType12);
        java.util.Locale locale23 = periodFormatter2.getLocale();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.days();
        java.lang.String str26 = periodType25.getName();
        org.joda.time.PeriodType periodType27 = periodType25.withSecondsRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1644572181667L, periodType27);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod29, "2022-02-11T09:38:03.679Z", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT126000S" + "'", str11, "PT126000S");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Days" + "'", str26, "Days");
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Hours hours4 = duration3.toStandardHours();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        boolean boolean9 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        int int20 = duration6.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod24.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod24.toMutablePeriod();
        mutablePeriod27.setPeriod((int) '4', 100, 10, (int) (byte) 10, 0, (int) (short) 1, (int) '#', 0);
        java.lang.String str37 = mutablePeriod27.toString();
        boolean boolean38 = duration17.equals((java.lang.Object) mutablePeriod27);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DurationFieldType[] durationFieldTypeArray48 = mutablePeriod46.getFieldTypes();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.forFields(durationFieldTypeArray48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod52.addHours(0);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Period period71 = interval70.toPeriod();
        org.joda.time.Chronology chronology72 = interval70.getChronology();
        mutablePeriod52.setPeriod((org.joda.time.ReadableDuration) duration58, chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.halfdayOfDay();
        org.joda.time.DurationField durationField75 = durationFieldType50.getField(chronology72);
        boolean boolean76 = periodType49.isSupported(durationFieldType50);
        org.joda.time.Period period77 = duration17.toPeriod(periodType49);
        org.joda.time.PeriodType periodType78 = periodType49.withWeeksRemoved();
        java.lang.String str79 = periodType78.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "P52Y100M10W10DT1M35S" + "'", str37, "P52Y100M10W10DT1M35S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PeriodType[StandardNoWeeks]" + "'", str79, "PeriodType[StandardNoWeeks]");
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) (byte) 100, (int) (short) 100, 0, (int) (byte) 1, 0, (int) 'a', (int) (short) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        int int26 = mutablePeriod25.getYears();
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod25.copy();
        mutablePeriod27.setYears((int) (short) 10);
        mutablePeriod27.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        mutablePeriod27.setPeriod((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        mutablePeriod27.add((org.joda.time.ReadableInterval) interval64);
        boolean boolean67 = interval21.contains((org.joda.time.ReadableInterval) interval64);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval64);
        long long69 = interval64.getEndMillis();
        org.joda.time.MutableInterval mutableInterval70 = interval64.toMutableInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval70.getStart();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int73 = dateTime71.get(dateTimeFieldType72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1644572386060L + "'", long69 == 1644572386060L);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.days();
        boolean boolean11 = periodType5.equals((java.lang.Object) periodType10);
        java.lang.String str12 = periodType5.toString();
        org.joda.time.PeriodType periodType13 = periodType5.withDaysRemoved();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        java.lang.Object obj23 = mutablePeriod21.clone();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) duration25, chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        mutablePeriod21.add((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.Chronology chronology32 = interval29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfHour();
        boolean boolean35 = periodType13.equals((java.lang.Object) dateTimeField34);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PeriodType[YearWeekDay]" + "'", str12, "PeriodType[YearWeekDay]");
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType17.withWeeksRemoved();
        org.joda.time.PeriodType periodType22 = periodType17.withWeeksRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withDaysRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        org.joda.time.PeriodType periodType25 = periodType23.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        int int28 = mutablePeriod26.get(durationFieldType27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((java.lang.Object) duration30, chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod38.toMutablePeriod();
        mutablePeriod41.setSeconds((int) (short) 10);
        mutablePeriod41.addDays(100);
        mutablePeriod41.setYears(7);
        boolean boolean48 = duration30.equals((java.lang.Object) mutablePeriod41);
        mutablePeriod41.addMonths((int) (byte) 0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        mutablePeriod54.add((long) ' ');
        mutablePeriod54.addSeconds((int) (byte) 100);
        mutablePeriod54.addWeeks((int) '#');
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology63);
        int int65 = mutablePeriod64.getYears();
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod64.copy();
        mutablePeriod66.setYears((int) (short) 10);
        int int69 = mutablePeriod66.size();
        mutablePeriod66.setMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod66.set(durationFieldType72, 340);
        mutablePeriod54.add(durationFieldType72, 32);
        mutablePeriod41.set(durationFieldType72, 49);
        boolean boolean79 = mutablePeriod26.isSupported(durationFieldType72);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        java.lang.String str2 = periodType0.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PeriodType[Millis]" + "'", str2, "PeriodType[Millis]");
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        int int2 = periodType1.size();
        org.joda.time.PeriodType periodType3 = periodType1.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1644572193502L, periodType1);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.addWeeks(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        mutablePeriod3.setHours(1);
        mutablePeriod3.setPeriod(2, (int) (byte) -1, 8, (int) (short) 0, 8, 0, (int) 'a', (int) (byte) 1);
        mutablePeriod3.setPeriod(33, 0, 0, (int) (byte) 100, (-1), 0, (-124), 34);
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(340, (int) 'a', 51, (int) (short) -1, 0, (int) (short) 0, 0, 8);
        mutablePeriod8.addYears(0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology25.seconds();
        java.lang.String str31 = chronology25.toString();
        org.joda.time.DurationField durationField32 = chronology25.minutes();
        mutablePeriod8.setPeriod((-31221671993702L), chronology25);
        mutablePeriod8.add(33, 102, 102, 943, (-124), 0, 45, 9);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str31, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(100L);
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        int int43 = periodType42.size();
        org.joda.time.PeriodType periodType44 = periodType42.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter41.withParseType(periodType44);
        java.util.Locale locale46 = null;
        org.joda.time.format.PeriodFormatter periodFormatter47 = periodFormatter45.withLocale(locale46);
        org.joda.time.PeriodType periodType48 = periodFormatter47.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod49 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:26.356Z", periodFormatter47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodFormatter45);
        org.junit.Assert.assertNotNull(periodFormatter47);
        org.junit.Assert.assertNotNull(periodType48);
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod10.add((long) ' ');
        int int13 = mutablePeriod10.getDays();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.millis();
        mutablePeriod10.add(durationFieldType14, (int) (byte) 1);
        int int17 = mutablePeriod10.getWeeks();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod21.add((long) ' ');
        mutablePeriod21.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutablePeriod30.setPeriod(readablePeriod31);
        mutablePeriod30.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.days();
        int int36 = mutablePeriod30.get(durationFieldType35);
        boolean boolean37 = mutablePeriod21.isSupported(durationFieldType35);
        boolean boolean38 = mutablePeriod10.isSupported(durationFieldType35);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.days();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology56);
        org.joda.time.DurationField durationField62 = chronology56.centuries();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology56);
        org.joda.time.DurationField durationField64 = durationFieldType35.getField(chronology56);
        java.lang.String str65 = durationFieldType35.toString();
        mutablePeriod3.add(durationFieldType35, 3);
        mutablePeriod3.addHours(51);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "days" + "'", str65, "days");
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        java.lang.String str8 = duration5.toString();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean11 = periodType9.equals((java.lang.Object) false);
        org.joda.time.Period period12 = duration5.toPeriod(periodType9);
        org.joda.time.PeriodType periodType13 = periodType9.withMillisRemoved();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.days();
        boolean boolean15 = periodType9.equals((java.lang.Object) periodType14);
        org.joda.time.PeriodType periodType16 = periodType9.withMonthsRemoved();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod26.copy();
        org.joda.time.PeriodType periodType38 = mutablePeriod26.getPeriodType();
        org.joda.time.PeriodType periodType39 = periodType38.withWeeksRemoved();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        mutablePeriod43.add((long) ' ');
        mutablePeriod43.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutablePeriod52.setPeriod(readablePeriod53);
        mutablePeriod52.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.days();
        int int58 = mutablePeriod52.get(durationFieldType57);
        boolean boolean59 = mutablePeriod43.isSupported(durationFieldType57);
        int int60 = periodType39.indexOf(durationFieldType57);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Period period73 = interval72.toPeriod();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((java.lang.Object) duration18, periodType39, chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) (byte) 0, 0L, periodType9, chronology74);
        org.joda.time.DateTimeField dateTimeField78 = chronology74.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1644572130173L, (-62130497090000L), chronology74);
        org.joda.time.DurationField durationField80 = chronology74.halfdays();
        org.joda.time.DateTimeField dateTimeField81 = chronology74.weekyear();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT126000S" + "'", str8, "PT126000S");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.dayOfMonth();
        org.joda.time.Chronology chronology34 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, 28083659L, chronology29);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.format.PeriodPrinter periodPrinter38 = null;
        org.joda.time.format.PeriodParser periodParser39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = new org.joda.time.format.PeriodFormatter(periodPrinter38, periodParser39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        boolean boolean57 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration50.toPeriod(periodType58, chronology59);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutablePeriod65.setPeriod(readablePeriod66);
        mutablePeriod65.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.days();
        int int71 = mutablePeriod65.get(durationFieldType70);
        boolean boolean72 = periodType58.isSupported(durationFieldType70);
        int int73 = periodType58.size();
        org.joda.time.PeriodType periodType74 = periodType58.withMonthsRemoved();
        org.joda.time.PeriodType periodType75 = periodType74.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter76 = periodFormatter40.withParseType(periodType74);
        java.util.Locale locale77 = null;
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter76.withLocale(locale77);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.time();
        int int80 = periodType79.size();
        org.joda.time.PeriodType periodType81 = periodType79.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter82 = periodFormatter78.withParseType(periodType81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = mutablePeriod36.toString(periodFormatter78);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodFormatter76);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodFormatter82);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean4 = periodType2.equals((java.lang.Object) false);
        org.joda.time.PeriodType periodType5 = periodType2.withMillisRemoved();
        org.joda.time.PeriodType periodType6 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod9.addHours(0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration15, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology29.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1643312097539L, 1644572246147L, periodType6, chronology29);
        mutablePeriod37.add(1643308500943L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:38:10.602Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:38:10.602Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Hours hours4 = duration3.toStandardHours();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        boolean boolean9 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        int int20 = duration6.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getEnd();
        boolean boolean62 = interval47.contains((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.DateTime dateTime76 = interval74.getEnd();
        java.lang.String str77 = dateTime76.toString();
        boolean boolean78 = dateTime61.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod80.addYears(112);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-11T09:39:46.540Z" + "'", str77, "2022-02-11T09:39:46.540Z");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology15);
        org.joda.time.DurationField durationField21 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = chronology15.monthOfYear();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        boolean boolean22 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration23 = duration9.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration25 = duration11.withMillis((long) (short) 100);
        long long26 = duration11.getStandardDays();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours(1644572229213L);
        org.joda.time.Duration duration29 = duration11.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration40 = duration31.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        boolean boolean57 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration50.toPeriod(periodType58, chronology59);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutablePeriod65.setPeriod(readablePeriod66);
        mutablePeriod65.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.days();
        int int71 = mutablePeriod65.get(durationFieldType70);
        boolean boolean72 = periodType58.isSupported(durationFieldType70);
        org.joda.time.PeriodType periodType73 = periodType58.withDaysRemoved();
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Period period88 = interval87.toPeriod();
        org.joda.time.Chronology chronology89 = interval87.getChronology();
        org.joda.time.DurationField durationField90 = chronology89.days();
        org.joda.time.DateTimeField dateTimeField91 = chronology89.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField92 = chronology89.millisOfDay();
        org.joda.time.DateTimeField dateTimeField93 = chronology89.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology89);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((java.lang.Object) duration40, periodType58, chronology89);
        org.joda.time.Period period96 = duration29.toPeriod(periodType58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((int) (byte) 10, 93, 2, 9, 31116, (-14), 712, 302, periodType58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology3);
        int int5 = mutablePeriod4.getWeeks();
        java.lang.Object obj6 = mutablePeriod4.clone();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology21.halfdays();
        mutablePeriod4.add((long) (-52), chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.clockhourOfDay();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, chronology21);
        mutablePeriod29.setDays(456825);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "PT0.035S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "PT0.035S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "PT0.035S");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField30 = chronology21.centuries();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = mutablePeriod7.getFieldTypes();
        mutablePeriod7.setValue(0, 0);
        mutablePeriod7.setWeeks((int) (short) 0);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        boolean boolean12 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        org.joda.time.Interval interval27 = duration5.toIntervalFrom((org.joda.time.ReadableInstant) dateTime26);
        java.lang.String str28 = dateTime26.toString();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime42);
        mutablePeriod43.clear();
        org.joda.time.PeriodType periodType45 = mutablePeriod43.getPeriodType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:39:46.754Z" + "'", str28, "2022-02-11T09:39:46.754Z");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType45);
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        mutablePeriod48.addWeeks(93);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-20), 14, (int) (short) 10, 14);
        mutablePeriod4.addHours(38);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, (long) 19);
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter40 = null;
        org.joda.time.format.PeriodParser periodParser41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = new org.joda.time.format.PeriodFormatter(periodPrinter40, periodParser41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        boolean boolean59 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration52.toPeriod(periodType60, chronology61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutablePeriod67.setPeriod(readablePeriod68);
        mutablePeriod67.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.days();
        int int73 = mutablePeriod67.get(durationFieldType72);
        boolean boolean74 = periodType60.isSupported(durationFieldType72);
        int int75 = periodType60.size();
        org.joda.time.PeriodType periodType76 = periodType60.withMonthsRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter42.withParseType(periodType76);
        java.util.Locale locale79 = null;
        org.joda.time.format.PeriodFormatter periodFormatter80 = periodFormatter78.withLocale(locale79);
        java.util.Locale locale81 = periodFormatter78.getLocale();
        boolean boolean82 = periodFormatter78.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter83 = periodFormatter78.getPrinter();
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.time();
        int int85 = periodType84.size();
        org.joda.time.PeriodType periodType86 = periodType84.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter87 = periodFormatter78.withParseType(periodType86);
        org.joda.time.PeriodType periodType88 = periodType86.withMonthsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter89 = periodFormatter2.withParseType(periodType86);
        org.joda.time.PeriodType periodType90 = periodType86.withWeeksRemoved();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(periodFormatter80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(periodPrinter83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodFormatter87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodFormatter89);
        org.junit.Assert.assertNotNull(periodType90);
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod10.getFieldTypes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod15.addHours(0);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration21, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType13, chronology35);
        java.lang.String str39 = chronology35.toString();
        org.joda.time.DurationField durationField40 = chronology35.hours();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (byte) 10, chronology35);
        mutablePeriod41.setMinutes(2);
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str39, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        int int25 = mutablePeriod24.getYears();
        java.lang.String str26 = mutablePeriod24.toString();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutablePeriod31.setPeriod(readablePeriod32);
        mutablePeriod31.addWeeks((int) (byte) 10);
        mutablePeriod24.add((org.joda.time.ReadablePeriod) mutablePeriod31);
        boolean boolean38 = mutablePeriod24.equals((java.lang.Object) (-1.0f));
        mutablePeriod24.setMinutes((int) (short) 1);
        int int41 = mutablePeriod24.getHours();
        int[] intArray43 = chronology18.get((org.joda.time.ReadablePeriod) mutablePeriod24, 1643312029209L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        java.lang.Object obj53 = mutablePeriod51.clone();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((java.lang.Object) duration55, chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        mutablePeriod51.add((org.joda.time.ReadableInterval) interval59);
        org.joda.time.DateTime dateTime61 = interval59.getStart();
        org.joda.time.Chronology chronology62 = interval59.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.dayOfYear();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.secondOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.era();
        org.joda.time.DurationField durationField68 = chronology62.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) 1643312029209L, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.052S" + "'", str26, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 2717, 0, 19, 33, 49, 209]");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        mutablePeriod1.addYears(2);
        org.joda.time.PeriodType periodType6 = mutablePeriod1.getPeriodType();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean10 = periodType8.equals((java.lang.Object) false);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, periodType8, chronology24);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod25.toMutablePeriod();
        mutablePeriod1.add((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod1.isSupported(durationFieldType37);
        java.lang.String str40 = durationFieldType37.toString();
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "days" + "'", str40, "days");
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.add((long) ' ');
        int int15 = mutablePeriod12.getDays();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        mutablePeriod12.add(durationFieldType16, (int) (byte) 1);
        int int19 = mutablePeriod12.getWeeks();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        boolean boolean40 = mutablePeriod12.isSupported(durationFieldType37);
        int int41 = mutablePeriod3.get(durationFieldType37);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod3, periodType42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        boolean boolean71 = interval56.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology72 = interval56.getChronology();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval56);
        mutablePeriod3.setWeeks(0);
        mutablePeriod3.setValue((int) (byte) 1, 340);
        mutablePeriod3.addMonths((-53));
        int int81 = mutablePeriod3.size();
        mutablePeriod3.setMonths(184);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        boolean boolean34 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration27.toPeriod(periodType35, chronology36);
        org.joda.time.PeriodType periodType38 = periodType35.withYearsRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1643312029538L, 0L, periodType38);
        int[] intArray42 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod40, 1644572182062L);
        org.joda.time.DateTimeField dateTimeField43 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology13.secondOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod13.addHours(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration19, chronology33);
        java.lang.String str35 = chronology33.toString();
        mutablePeriod3.add((long) 2, chronology33);
        mutablePeriod3.addSeconds(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType40 = mutablePeriod3.getFieldType((-14));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        long long6 = interval5.getEndMillis();
        org.joda.time.Interval interval7 = interval5.toInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval7.toMutableInterval();
        long long9 = interval7.getEndMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572387431L + "'", long6 == 1644572387431L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572387431L + "'", long9 == 1644572387431L);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DurationField durationField17 = chronology15.centuries();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int int27 = mutablePeriod22.getMonths();
        mutablePeriod22.addDays(10);
        mutablePeriod22.setWeeks((int) (byte) -1);
        int[] intArray34 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) 100, 10L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        mutablePeriod37.addWeeks((int) 'a');
        mutablePeriod37.addYears(3);
        mutablePeriod37.addMinutes(33);
        int[] intArray45 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod37, 0L);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1643312263026L, 1643312029209L, chronology15);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, -90]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) '4', (-51), 35, (int) (byte) 1, (int) '#', 0, 2, 32);
        mutablePeriod8.setMonths(52);
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getEnd();
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        boolean boolean53 = interval38.contains((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = interval38.getStart();
        java.lang.String str55 = dateTime54.toString();
        boolean boolean56 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime54);
        int[] intArray58 = mutablePeriod3.getValues();
        mutablePeriod3.addMinutes((int) (byte) 100);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology63);
        int int65 = mutablePeriod64.getYears();
        java.lang.String str66 = mutablePeriod64.toString();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        mutablePeriod71.setPeriod(readablePeriod72);
        mutablePeriod71.addWeeks((int) (byte) 10);
        mutablePeriod64.add((org.joda.time.ReadablePeriod) mutablePeriod71);
        boolean boolean78 = mutablePeriod64.equals((java.lang.Object) (-1.0f));
        mutablePeriod64.setMinutes((int) (short) 1);
        int int81 = mutablePeriod64.getHours();
        org.joda.time.Period period82 = mutablePeriod64.toPeriod();
        mutablePeriod64.setMonths(1);
        mutablePeriod64.addMonths((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod87 = mutablePeriod64.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType89 = mutablePeriod87.getFieldType(2);
        int int90 = mutablePeriod3.get(durationFieldType89);
        mutablePeriod3.setSeconds(0);
        int int93 = mutablePeriod3.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType95 = mutablePeriod3.getFieldType(18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:39:47.477Z" + "'", str25, "2022-02-11T09:39:47.477Z");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-01-27T19:38:07.477Z" + "'", str55, "2022-01-27T19:38:07.477Z");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT0.052S" + "'", str66, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(mutablePeriod87);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod35.setMillis((int) (short) 0);
        mutablePeriod35.addMonths((int) (short) 1);
        mutablePeriod35.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutablePeriod46.setPeriod(readablePeriod47);
        mutablePeriod46.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        int int52 = mutablePeriod46.get(durationFieldType51);
        mutablePeriod35.add(durationFieldType51, (int) '#');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.MutablePeriod mutablePeriod65 = mutablePeriod35.copy();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.weeks();
        int int67 = mutablePeriod65.get(durationFieldType66);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = duration75.toPeriod(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = duration75.toIntervalTo(readableInstant78);
        org.joda.time.Period period80 = interval79.toPeriod();
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.hourOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.dayOfYear();
        org.joda.time.DateTimeField dateTimeField85 = chronology81.secondOfMinute();
        org.joda.time.DurationField durationField86 = chronology81.weekyears();
        org.joda.time.DurationField durationField87 = chronology81.millis();
        boolean boolean88 = durationFieldType66.isSupported(chronology81);
        boolean boolean89 = durationFieldType29.isSupported(chronology81);
        org.joda.time.DateTimeField dateTimeField90 = chronology81.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology81.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField92 = chronology81.dayOfYear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = periodFormatter38.getParseType();
        java.io.Writer writer42 = null;
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        java.lang.String str47 = duration44.toString();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Duration duration49 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(readableInstant48, (org.joda.time.ReadableDuration) duration49, periodType50);
        org.joda.time.Duration duration53 = duration49.minus((long) 10);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.Duration duration67 = interval65.toDuration();
        int int68 = duration53.compareTo((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration69 = duration44.plus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Period period70 = duration69.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod71 = period70.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter38.printTo(writer42, (org.joda.time.ReadablePeriod) mutablePeriod71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT126000S" + "'", str47, "PT126000S");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(mutablePeriod71);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField79 = chronology74.clockhourOfHalfday();
        org.joda.time.Chronology chronology80 = chronology74.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long85 = chronology80.getDateTimeMillis((-19), 2719, (int) '4', 40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2719 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:39:47.641Z" + "'", str42, "2022-02-11T09:39:47.641Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        mutablePeriod21.clear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType41 = null;
        int int42 = mutablePeriod38.get(durationFieldType41);
        int int43 = mutablePeriod38.size();
        mutablePeriod38.addWeeks((int) (short) 0);
        mutablePeriod38.add(0L);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.days();
        int int49 = mutablePeriod38.indexOf(durationFieldType48);
        mutablePeriod38.addHours((int) (short) 1);
        mutablePeriod38.setPeriod(1644572117941L, 1260100L);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.MutablePeriod mutablePeriod56 = mutablePeriod21.toMutablePeriod();
        int[] intArray57 = mutablePeriod21.getValues();
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-52, -1, -1, -3, -9, -14, -17, -841]");
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology29.getZone();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.weekyearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        long long45 = interval42.getStartMillis();
        long long46 = interval42.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        boolean boolean59 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        org.joda.time.Interval interval74 = duration52.toIntervalFrom((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration75 = interval74.toDuration();
        boolean boolean76 = interval42.contains((org.joda.time.ReadableInterval) interval74);
        long long77 = interval42.getEndMillis();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1643312287755L + "'", long45 == 1643312287755L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1260100000L + "'", long46 == 1260100000L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1644572387755L + "'", long77 == 1644572387755L);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.joda.time.format.PeriodPrinter periodPrinter3 = null;
        org.joda.time.format.PeriodParser periodParser4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = new org.joda.time.format.PeriodFormatter(periodPrinter3, periodParser4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        boolean boolean22 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration15.toPeriod(periodType23, chronology24);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutablePeriod30.setPeriod(readablePeriod31);
        mutablePeriod30.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.days();
        int int36 = mutablePeriod30.get(durationFieldType35);
        boolean boolean37 = periodType23.isSupported(durationFieldType35);
        int int38 = periodType23.size();
        org.joda.time.PeriodType periodType39 = periodType23.withMonthsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter5.withParseType(periodType39);
        java.util.Locale locale42 = null;
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter41.withLocale(locale42);
        org.joda.time.PeriodType periodType44 = periodFormatter41.getParseType();
        org.joda.time.PeriodType periodType45 = periodType44.withHoursRemoved();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology61);
        org.joda.time.DurationField durationField67 = chronology61.centuries();
        org.joda.time.DateTimeField dateTimeField68 = chronology61.millisOfSecond();
        org.joda.time.DurationField durationField69 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField70 = chronology61.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology61.millisOfDay();
        org.joda.time.Chronology chronology72 = chronology61.withUTC();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(1644572186979L, periodType44, chronology72);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1644572171990L, 1644572205739L, chronology72);
        mutablePeriod74.setPeriod(1643312103626L, 1644572174522L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        mutablePeriod3.setHours(1);
        mutablePeriod3.setPeriod(2, (int) (byte) -1, 8, (int) (short) 0, 8, 0, (int) 'a', (int) (byte) 1);
        mutablePeriod3.setMonths(19);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval12.getStart();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.days();
        java.lang.String str30 = periodType29.getName();
        org.joda.time.Period period31 = interval12.toPeriod(periodType29);
        org.joda.time.PeriodType periodType32 = periodType29.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        int int34 = periodType29.indexOf(durationFieldType33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) (-124));
        mutablePeriod36.setYears(97);
        mutablePeriod36.addMonths(0);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str42 = durationFieldType41.getName();
        java.lang.String str43 = durationFieldType41.getName();
        mutablePeriod36.add(durationFieldType41, (int) (byte) -1);
        int int46 = periodType29.indexOf(durationFieldType41);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Days" + "'", str30, "Days");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "seconds" + "'", str42, "seconds");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "seconds" + "'", str43, "seconds");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.add((int) (byte) 0, 8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4');
        mutablePeriod3.setPeriod(1644572296221L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.setMillis((int) (short) 0);
        mutablePeriod6.addMonths((int) (short) 1);
        mutablePeriod6.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutablePeriod17.setPeriod(readablePeriod18);
        mutablePeriod17.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        int int23 = mutablePeriod17.get(durationFieldType22);
        mutablePeriod6.add(durationFieldType22, (int) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod6.clear();
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod6);
        int int38 = mutablePeriod6.getSeconds();
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        mutablePeriod10.set(durationFieldType20, (int) (byte) 10);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod27.add((long) ' ');
        mutablePeriod27.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutablePeriod36.setPeriod(readablePeriod37);
        mutablePeriod36.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.days();
        int int42 = mutablePeriod36.get(durationFieldType41);
        boolean boolean43 = mutablePeriod27.isSupported(durationFieldType41);
        boolean boolean44 = periodType23.isSupported(durationFieldType41);
        java.lang.String str45 = durationFieldType41.getName();
        boolean boolean46 = mutablePeriod10.isSupported(durationFieldType41);
        int int47 = mutablePeriod10.getSeconds();
        int int48 = mutablePeriod10.getDays();
        java.lang.String str49 = mutablePeriod10.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "days" + "'", str45, "days");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "P10WT0.010S" + "'", str49, "P10WT0.010S");
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addHours((int) (short) 1);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        java.lang.String str49 = duration46.toString();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean52 = periodType50.equals((java.lang.Object) false);
        org.joda.time.Period period53 = duration46.toPeriod(periodType50);
        org.joda.time.PeriodType periodType54 = periodType50.withMillisRemoved();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.days();
        boolean boolean56 = periodType50.equals((java.lang.Object) periodType55);
        org.joda.time.PeriodType periodType57 = periodType50.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.hours();
        boolean boolean59 = periodType50.isSupported(durationFieldType58);
        boolean boolean60 = mutablePeriod15.isSupported(durationFieldType58);
        mutablePeriod15.setPeriod((int) (short) 0, (int) (byte) 1, 11, (-19), (-35), 340, 18, 54);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT126000S" + "'", str49, "PT126000S");
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) duration7, chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        boolean boolean12 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration7);
        java.lang.String str13 = duration7.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        int int18 = mutablePeriod17.getMinutes();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        java.lang.String str31 = duration26.toString();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.secondOfMinute();
        org.joda.time.DurationField durationField50 = chronology45.weekyears();
        org.joda.time.DurationField durationField51 = chronology45.millis();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.dayOfMonth();
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration26, chronology45);
        boolean boolean54 = duration7.isEqual((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology63);
        mutablePeriod60.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DurationFieldType[] durationFieldTypeArray66 = mutablePeriod64.getFieldTypes();
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.forFields(durationFieldTypeArray66);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod69.addHours(0);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Duration duration75 = duration73.plus(readableDuration74);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Period period88 = interval87.toPeriod();
        org.joda.time.Chronology chronology89 = interval87.getChronology();
        mutablePeriod69.setPeriod((org.joda.time.ReadableDuration) duration75, chronology89);
        org.joda.time.DateTimeField dateTimeField91 = chronology89.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType67, chronology89);
        org.joda.time.DateTimeField dateTimeField93 = chronology89.halfdayOfDay();
        org.joda.time.DurationField durationField94 = chronology89.months();
        org.joda.time.DateTimeField dateTimeField95 = chronology89.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((java.lang.Object) boolean54, chronology89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT60S" + "'", str13, "PT60S");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT1260100S" + "'", str31, "PT1260100S");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(40, 80, 102, 10, 671, 184, (int) (byte) 100, 102);
        mutablePeriod8.setMinutes(2);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setMillis(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = mutablePeriod2.getFieldTypes();
        mutablePeriod2.addYears((int) (byte) 0);
        org.joda.time.Period period8 = mutablePeriod2.toPeriod();
        mutablePeriod2.addDays(340);
        mutablePeriod2.addYears((int) '4');
        org.joda.time.DurationFieldType durationFieldType14 = mutablePeriod2.getFieldType(6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType14);
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        int int38 = mutablePeriod37.getYears();
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod37.copy();
        mutablePeriod39.setYears((int) (short) 10);
        int int42 = mutablePeriod39.size();
        mutablePeriod39.setMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod39.set(durationFieldType45, 340);
        int int48 = mutablePeriod33.indexOf(durationFieldType45);
        java.lang.String str49 = durationFieldType45.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "minutes" + "'", str49, "minutes");
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology15.minutes();
        org.joda.time.DurationField durationField20 = chronology15.seconds();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (-1), 1644572119917L, chronology15);
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField24 = chronology15.months();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:36:47.737Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:36:47.737Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = mutablePeriod7.getFieldTypes();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getEnd();
        org.joda.time.Duration duration24 = interval21.toDuration();
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval21);
        long long26 = interval21.getEndMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Hours hours35 = duration34.toStandardHours();
        org.joda.time.Duration duration37 = duration34.minus((-1L));
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        org.joda.time.Duration duration64 = interval61.toDuration();
        boolean boolean65 = interval49.overlaps((org.joda.time.ReadableInterval) interval61);
        long long66 = interval61.getStartMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        boolean boolean79 = duration68.isLongerThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration87.toPeriod(chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Interval interval91 = duration87.toIntervalTo(readableInstant90);
        org.joda.time.Interval interval92 = interval91.toInterval();
        org.joda.time.DateTime dateTime93 = interval91.getEnd();
        org.joda.time.Interval interval94 = duration72.toIntervalFrom((org.joda.time.ReadableInstant) dateTime93);
        java.lang.String str95 = dateTime93.toString();
        boolean boolean96 = interval61.contains((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.Interval interval97 = duration34.toIntervalFrom((org.joda.time.ReadableInstant) dateTime93);
        boolean boolean98 = interval21.isAfter((org.joda.time.ReadableInterval) interval97);
        org.joda.time.MutableInterval mutableInterval99 = interval97.toMutableInterval();
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572388364L + "'", long26 == 1644572388364L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1643312288364L + "'", long66 == 1643312288364L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(interval94);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-02-11T09:39:48.364Z" + "'", str95, "2022-02-11T09:39:48.364Z");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(interval97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(mutableInterval99);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        int int41 = mutablePeriod40.getYears();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod40.copy();
        mutablePeriod42.setYears((int) (short) 10);
        mutablePeriod42.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        mutablePeriod42.setMillis((int) (short) -1);
        mutablePeriod42.addDays((-19));
        org.joda.time.DurationFieldType durationFieldType59 = mutablePeriod42.getFieldType(0);
        long long62 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod42, 1644572311508L, (int) (byte) 1);
        org.joda.time.DurationField durationField63 = chronology29.weeks();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1747993050507L + "'", long62 == 1747993050507L);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter41.getParser();
        java.util.Locale locale43 = periodFormatter41.getLocale();
        boolean boolean44 = periodFormatter41.isParser();
        boolean boolean45 = periodFormatter41.isPrinter();
        org.joda.time.format.PeriodParser periodParser46 = periodFormatter41.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod47 = org.joda.time.MutablePeriod.parse("2022-02-11T09:38:18.791Z", periodFormatter41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNull(periodParser42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(periodParser46);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod18.copy();
        org.joda.time.PeriodType periodType30 = mutablePeriod18.getPeriodType();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod35.add((long) ' ');
        mutablePeriod35.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutablePeriod44.setPeriod(readablePeriod45);
        mutablePeriod44.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.days();
        int int50 = mutablePeriod44.get(durationFieldType49);
        boolean boolean51 = mutablePeriod35.isSupported(durationFieldType49);
        int int52 = periodType31.indexOf(durationFieldType49);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) duration10, periodType31, chronology66);
        java.lang.String str68 = periodType31.getName();
        org.joda.time.PeriodType periodType69 = periodType31.withHoursRemoved();
        java.lang.String str70 = periodType31.getName();
        org.joda.time.PeriodType periodType71 = periodType31.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(1644572135829L, periodType31);
        org.joda.time.PeriodType periodType73 = periodType31.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((-1), 10, 5, 93, (int) (short) 100, (-124), 4, (-35), periodType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "StandardNoWeeks" + "'", str68, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "StandardNoWeeks" + "'", str70, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType73);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(340, 9, (-23), 80);
        int int5 = mutablePeriod4.getWeeks();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField42 = chronology34.halfdays();
        long long46 = chronology34.add((long) (short) 10, (long) 32, 1);
        org.joda.time.DurationField durationField47 = chronology34.millis();
        org.joda.time.DateTimeField dateTimeField48 = chronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = chronology34.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = chronology34.getDateTimeMillis(1250, 4, 671, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 671 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 42L + "'", long46 == 42L);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType5 = periodType4.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(20492L, 1644572120180L, periodType4);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(42L, 1644572181667L, periodType4);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        mutablePeriod8.addYears(52);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setMonths(54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.centuryOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod26.copy();
        int[] intArray40 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod37, 1644572145972L, (long) 80);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod37.toMutablePeriod();
        int[] intArray42 = mutablePeriod41.getValues();
        int int43 = mutablePeriod41.getMillis();
        java.lang.String str44 = mutablePeriod41.toString();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration46.minus(1644572139243L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Period period63 = interval62.toPeriod();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.minuteOfDay();
        mutablePeriod41.setPeriod((org.joda.time.ReadableDuration) duration46, chronology64);
        mutablePeriod41.addDays(54);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-52, -1, -1, -3, -9, -35, -45, -892]");
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 32, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-53) + "'", int43 == (-53));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "P32W97DT97H1M0.053S" + "'", str44, "P32W97DT97H1M0.053S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addHours((int) (short) 1);
        int int45 = mutablePeriod15.getMinutes();
        mutablePeriod15.setValue((int) (short) 0, 32);
        mutablePeriod15.setPeriod((-53), 918, 6, 101, 32, (-14), (-9), 9);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-01-27T19:34:14.149Z/2022-02-11T09:35:54.149Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.days();
        boolean boolean5 = mutablePeriod1.isSupported(durationFieldType4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        mutablePeriod29.add((long) ' ');
        mutablePeriod29.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutablePeriod38.setPeriod(readablePeriod39);
        mutablePeriod38.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.days();
        int int44 = mutablePeriod38.get(durationFieldType43);
        boolean boolean45 = mutablePeriod29.isSupported(durationFieldType43);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant46, readableInstant47);
        mutablePeriod48.addWeeks((int) 'a');
        mutablePeriod29.add((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.seconds();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        boolean boolean69 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration62.toPeriod(periodType70, chronology71);
        org.joda.time.PeriodType periodType73 = periodType70.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.months();
        int int75 = periodType73.indexOf(durationFieldType74);
        int int76 = periodType52.indexOf(durationFieldType74);
        mutablePeriod29.add(durationFieldType74, (int) (byte) -1);
        int int79 = mutablePeriod13.get(durationFieldType74);
        int int80 = mutablePeriod1.get(durationFieldType74);
        mutablePeriod1.setDays((int) (short) -1);
        mutablePeriod1.setWeeks((-42));
        // The following exception was thrown during execution in test generation
        try {
            int int86 = mutablePeriod1.getValue(70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setMillis(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = mutablePeriod2.getFieldTypes();
        mutablePeriod2.addYears((int) (byte) 0);
        mutablePeriod2.addMonths(6);
        mutablePeriod2.addWeeks(3);
        int int12 = mutablePeriod2.getMillis();
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.Duration duration25 = duration7.withDurationAdded((long) 3, (int) '4');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, (org.joda.time.ReadableDuration) duration27, periodType28);
        boolean boolean30 = duration7.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration32 = duration7.withMillis((long) (byte) 10);
        org.joda.time.Seconds seconds33 = duration7.toStandardSeconds();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(seconds33);
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology4);
        mutablePeriod5.setPeriod((long) 1);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfYear();
        org.joda.time.Chronology chronology27 = chronology23.withUTC();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = interval39.isBefore(readableInterval42);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval42);
        int int45 = mutablePeriod44.getHours();
        mutablePeriod44.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray57 = chronology27.get((org.joda.time.ReadablePeriod) mutablePeriod44, (long) 1, (long) 3);
        org.joda.time.DateTimeField dateTimeField58 = chronology27.dayOfWeek();
        mutablePeriod5.setPeriod(14L, 1644572122264L, chronology27);
        org.joda.time.DateTimeField dateTimeField60 = chronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = chronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = chronology27.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 18, 21001L, chronology27);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        int int68 = mutablePeriod67.getYears();
        java.lang.String str69 = mutablePeriod67.toString();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        mutablePeriod74.setPeriod(readablePeriod75);
        mutablePeriod74.addWeeks((int) (byte) 10);
        mutablePeriod67.add((org.joda.time.ReadablePeriod) mutablePeriod74);
        boolean boolean81 = mutablePeriod67.equals((java.lang.Object) (-1.0f));
        mutablePeriod67.setMinutes((int) (short) 1);
        int int84 = mutablePeriod67.getHours();
        mutablePeriod67.setPeriod(36, (int) '4', 3, 70, 100, 487, 102, 3);
        mutablePeriod67.setYears(38);
        long long98 = chronology27.add((org.joda.time.ReadablePeriod) mutablePeriod67, 98674334934540L, 0);
        mutablePeriod67.clear();
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT0.052S" + "'", str69, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 98674334934540L + "'", long98 == 98674334934540L);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isParser();
        boolean boolean6 = periodFormatter2.isPrinter();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter2.withParseType(periodType24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period29 = periodFormatter2.parsePeriod("2022-02-11T09:36:11.745Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodFormatter27);
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.joda.time.format.PeriodPrinter periodPrinter3 = null;
        org.joda.time.format.PeriodParser periodParser4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = new org.joda.time.format.PeriodFormatter(periodPrinter3, periodParser4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        boolean boolean22 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration15.toPeriod(periodType23, chronology24);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutablePeriod30.setPeriod(readablePeriod31);
        mutablePeriod30.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.days();
        int int36 = mutablePeriod30.get(durationFieldType35);
        boolean boolean37 = periodType23.isSupported(durationFieldType35);
        int int38 = periodType23.size();
        org.joda.time.PeriodType periodType39 = periodType23.withMonthsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter5.withParseType(periodType39);
        java.util.Locale locale42 = null;
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter41.withLocale(locale42);
        org.joda.time.PeriodType periodType44 = periodFormatter41.getParseType();
        org.joda.time.PeriodType periodType45 = periodType44.withHoursRemoved();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology61);
        org.joda.time.DurationField durationField67 = chronology61.centuries();
        org.joda.time.DateTimeField dateTimeField68 = chronology61.millisOfSecond();
        org.joda.time.DurationField durationField69 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField70 = chronology61.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology61.millisOfDay();
        org.joda.time.Chronology chronology72 = chronology61.withUTC();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(1644572186979L, periodType44, chronology72);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1644572171990L, 1644572205739L, chronology72);
        mutablePeriod74.addHours(943);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        mutablePeriod5.addWeeks((int) (short) 0);
        int int10 = mutablePeriod5.getDays();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration14.withMillis((long) (-1));
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration16);
        mutablePeriod5.addWeeks(100);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        java.lang.String str59 = periodType22.getName();
        org.joda.time.PeriodType periodType60 = periodType22.withHoursRemoved();
        java.lang.String str61 = periodType22.getName();
        org.joda.time.PeriodType periodType62 = periodType22.withMonthsRemoved();
        org.joda.time.PeriodType periodType63 = periodType22.withMonthsRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "StandardNoWeeks" + "'", str59, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "StandardNoWeeks" + "'", str61, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.hourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.dayOfYear();
        org.joda.time.Chronology chronology62 = chronology58.withUTC();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(100000L, chronology58);
        java.lang.String str64 = mutablePeriod63.toString();
        mutablePeriod63.setYears(0);
        mutablePeriod63.setSeconds(1);
        boolean boolean69 = dateTime26.equals((java.lang.Object) mutablePeriod63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration70 = new org.joda.time.Duration((java.lang.Object) mutablePeriod63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:39:49.134Z" + "'", str42, "2022-02-11T09:39:49.134Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT1M40S" + "'", str64, "PT1M40S");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(100000L, chronology14);
        org.joda.time.DurationFieldType durationFieldType20 = null;
        int int21 = mutablePeriod19.get(durationFieldType20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        boolean boolean34 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration27);
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration27);
        mutablePeriod19.setPeriod(918, 8, (int) 'a', (-14), (-28), (int) (byte) 1, 184, (int) (byte) 10);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = mutablePeriod1.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod1.copy();
        mutablePeriod1.addMonths(102);
        java.lang.String str9 = mutablePeriod1.toString();
        int int10 = mutablePeriod1.getHours();
        mutablePeriod1.addHours(59);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P102MT0.052S" + "'", str9, "P102MT0.052S");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1643312097539L, (long) (short) 10);
        long long3 = duration2.getStandardMinutes();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-27388534L) + "'", long3 == (-27388534L));
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.centuryOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod26.copy();
        int[] intArray40 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod37, 1644572145972L, (long) 80);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod37.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod37.setValue(20, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-52, -1, -1, -3, -9, -35, -45, -892]");
        org.junit.Assert.assertNotNull(mutablePeriod41);
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.millis(1644572120402L);
        boolean boolean6 = mutablePeriod3.equals((java.lang.Object) duration5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod14.copy();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        boolean boolean42 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration35.toPeriod(periodType43, chronology44);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutablePeriod50.setPeriod(readablePeriod51);
        mutablePeriod50.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.days();
        int int56 = mutablePeriod50.get(durationFieldType55);
        boolean boolean57 = periodType43.isSupported(durationFieldType55);
        mutablePeriod14.set(durationFieldType55, (int) '4');
        java.lang.String str60 = durationFieldType55.getName();
        java.lang.String str61 = durationFieldType55.toString();
        boolean boolean62 = mutablePeriod3.isSupported(durationFieldType55);
        mutablePeriod3.add((long) 100);
        mutablePeriod3.addMonths((-1));
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue(51, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "days" + "'", str60, "days");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "days" + "'", str61, "days");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.Duration duration14 = interval11.toDuration();
        java.lang.String str15 = interval11.toString();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        boolean boolean34 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration27.toPeriod(periodType35, chronology36);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutablePeriod42.setPeriod(readablePeriod43);
        mutablePeriod42.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.days();
        int int48 = mutablePeriod42.get(durationFieldType47);
        boolean boolean49 = periodType35.isSupported(durationFieldType47);
        java.lang.String str50 = periodType35.getName();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType35, chronology51);
        boolean boolean53 = interval11.equals((java.lang.Object) 100);
        org.joda.time.Chronology chronology54 = interval11.getChronology();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        mutablePeriod63.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod74 = mutablePeriod63.copy();
        org.joda.time.PeriodType periodType75 = mutablePeriod63.getPeriodType();
        boolean boolean76 = periodType55.equals((java.lang.Object) mutablePeriod63);
        org.joda.time.PeriodType periodType77 = periodType55.withHoursRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(periodType77);
        org.joda.time.Period period80 = interval11.toPeriod(periodType77);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-01-27T19:38:09.432Z/2022-02-11T09:39:49.432Z" + "'", str15, "2022-01-27T19:38:09.432Z/2022-02-11T09:39:49.432Z");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Years" + "'", str50, "Years");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (byte) 0);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.weeks();
        int int37 = periodType20.indexOf(durationFieldType36);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod39.addHours(0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration45, chronology59);
        org.joda.time.DurationField durationField61 = durationFieldType36.getField(chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.clockhourOfHalfday();
        mutablePeriod1.add(1643312018503L, chronology59);
        org.joda.time.Chronology chronology64 = chronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.minuteOfDay();
        org.joda.time.DurationField durationField66 = chronology64.years();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType12 = mutablePeriod3.getPeriodType();
        int int13 = mutablePeriod3.getMinutes();
        mutablePeriod3.addMinutes((int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = mutablePeriod19.get(durationFieldType22);
        int int24 = mutablePeriod19.size();
        mutablePeriod19.addWeeks((int) (short) 0);
        mutablePeriod19.add(0L);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod19.indexOf(durationFieldType29);
        mutablePeriod19.addHours((int) (short) 1);
        mutablePeriod19.setPeriod(1644572117941L, 1260100L);
        int int36 = mutablePeriod19.getDays();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((java.lang.Object) duration38, chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        boolean boolean56 = interval42.overlaps((org.joda.time.ReadableInterval) interval54);
        java.lang.String str57 = interval54.toString();
        org.joda.time.MutableInterval mutableInterval58 = interval54.toMutableInterval();
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.DateTime dateTime60 = mutableInterval58.getEnd();
        mutablePeriod3.add((org.joda.time.ReadableInterval) mutableInterval58);
        mutablePeriod3.setSeconds((-53));
        mutablePeriod3.setMinutes((-124));
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-01-27T19:38:09.516Z/2022-02-11T09:39:49.516Z" + "'", str57, "2022-01-27T19:38:09.516Z/2022-02-11T09:39:49.516Z");
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        java.lang.String str34 = duration31.toString();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean37 = periodType35.equals((java.lang.Object) false);
        org.joda.time.Period period38 = duration31.toPeriod(periodType35);
        org.joda.time.PeriodType periodType39 = periodType35.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(periodType39);
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod40, (long) (byte) 1, (long) '#');
        org.joda.time.DateTimeField dateTimeField44 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField45 = chronology13.millis();
        org.joda.time.Chronology chronology46 = chronology13.withUTC();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT126000S" + "'", str34, "PT126000S");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        int int4 = mutablePeriod3.getWeeks();
        java.lang.Object obj5 = mutablePeriod3.clone();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology20.halfdays();
        mutablePeriod3.add((long) (-52), chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology20.set(readablePartial28, 1643312253300L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT0.035S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT0.035S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT0.035S");
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getMinutes();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        java.lang.String str17 = duration12.toString();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Period period30 = interval29.toPeriod();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.secondOfMinute();
        org.joda.time.DurationField durationField36 = chronology31.weekyears();
        org.joda.time.DurationField durationField37 = chronology31.millis();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.dayOfMonth();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration12, chronology31);
        org.joda.time.DurationField durationField40 = chronology31.years();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1260100S" + "'", str17, "PT1260100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        java.util.Locale locale8 = periodFormatter2.getLocale();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(locale8);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField17 = chronology13.minutes();
        java.lang.String str18 = chronology13.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, chronology21);
        mutablePeriod22.setPeriod((int) '#', 2, (int) (short) 10, (-51), (int) '4', (int) '#', 10, 8);
        int[] intArray34 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, 1644572148181L, 1644572190074L);
        org.joda.time.DateTimeField dateTimeField35 = chronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = chronology13.weekyear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str18, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 41, 893]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        java.lang.String str63 = periodType48.getName();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType48, chronology64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        long long72 = interval71.toDurationMillis();
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval71);
        boolean boolean74 = interval25.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Period period75 = interval71.toPeriod();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology82);
        mutablePeriod79.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod83);
        org.joda.time.DurationFieldType[] durationFieldTypeArray85 = mutablePeriod83.getFieldTypes();
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.forFields(durationFieldTypeArray85);
        boolean boolean87 = interval71.equals((java.lang.Object) durationFieldTypeArray85);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.days();
        java.lang.String str89 = periodType88.getName();
        org.joda.time.PeriodType periodType90 = periodType88.withSecondsRemoved();
        org.joda.time.PeriodType periodType91 = periodType90.withHoursRemoved();
        java.lang.String str92 = periodType91.toString();
        org.joda.time.Period period93 = interval71.toPeriod(periodType91);
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((java.lang.Object) interval71);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Years" + "'", str63, "Years");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldTypeArray85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Days" + "'", str89, "Days");
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "PeriodType[Days]" + "'", str92, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        boolean boolean6 = periodFormatter2.isParser();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.addSeconds((int) (byte) 100);
        mutablePeriod3.addWeeks((int) '#');
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology49);
        org.joda.time.DateTimeField dateTimeField53 = chronology49.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((java.lang.Object) period33, chronology49);
        org.joda.time.DurationField durationField55 = chronology49.days();
        boolean boolean56 = durationFieldType19.isSupported(chronology49);
        int int57 = mutablePeriod3.get(durationFieldType19);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((java.lang.Object) duration59, chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Period period76 = interval75.toPeriod();
        boolean boolean77 = interval63.overlaps((org.joda.time.ReadableInterval) interval75);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval63);
        mutablePeriod3.setValue(0, 7);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        int int43 = mutablePeriod15.getWeeks();
        mutablePeriod15.addYears(52);
        mutablePeriod15.addSeconds((int) (short) -1);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.months();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.add((long) ' ');
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod5.setPeriod((long) (short) 0, chronology22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.secondOfMinute();
        boolean boolean42 = mutablePeriod5.equals((java.lang.Object) chronology37);
        org.joda.time.DurationField durationField43 = chronology37.years();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(10L, periodType1, chronology37);
        org.joda.time.DateTimeField dateTimeField45 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology37.millisOfSecond();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        java.util.Locale locale5 = periodFormatter4.getLocale();
        java.util.Locale locale6 = periodFormatter4.getLocale();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter4.getParser();
        org.joda.time.PeriodType periodType8 = periodFormatter4.getParseType();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration18.toPeriod(periodType26, chronology27);
        org.joda.time.PeriodType periodType29 = periodType26.withYearsRemoved();
        org.joda.time.PeriodType periodType30 = periodType26.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter4.withParseType(periodType26);
        org.joda.time.PeriodType periodType32 = periodType26.withMonthsRemoved();
        org.joda.time.PeriodType periodType33 = periodType32.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1644572239783L, 1644572260767L, periodType32);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertNull(periodType8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        int int42 = periodType41.size();
        org.joda.time.PeriodType periodType43 = periodType41.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter40.withParseType(periodType43);
        java.util.Locale locale45 = periodFormatter40.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = periodFormatter40.parsePeriod("2022-02-11T09:37:24.548Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNull(locale45);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Days days8 = duration7.toStandardDays();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (short) -1, periodType10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Period period26 = duration7.toPeriod(periodType10, chronology25);
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.year();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        java.lang.String str12 = duration7.toString();
        org.joda.time.Period period13 = duration7.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        int int22 = duration7.compareTo((org.joda.time.ReadableDuration) duration21);
        long long23 = duration21.getStandardHours();
        org.joda.time.Duration duration25 = duration21.withMillis(1644572142744L);
        org.joda.time.Duration duration28 = new org.joda.time.Duration(1644572161677L, (long) (-3));
        int int29 = duration21.compareTo((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus(1644572320132L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT1260100S" + "'", str12, "PT1260100S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 350L + "'", long23 == 350L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(duration31);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withDaysRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType25 = periodType23.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1643312029209L, 126000000L, periodType25);
        org.joda.time.PeriodType periodType27 = periodType25.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType29 = periodType27.getFieldType(456825);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 456825");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        int int21 = mutablePeriod7.getWeeks();
        mutablePeriod7.addDays(14);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod7.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = mutablePeriod7.getValue(70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(mutablePeriod24);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-23), 2, 48, (-28));
        mutablePeriod4.addWeeks((-28));
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(157802760000L);
        long long2 = duration1.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 9468165600000000L + "'", long2 == 9468165600000000L);
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1643312021316L);
        mutablePeriod1.setPeriod((-19), 80, 45, (int) (byte) -1, (-124), 100, (int) (short) 1, 45);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getEnd();
        boolean boolean38 = interval23.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.DateTime dateTime64 = interval62.getEnd();
        org.joda.time.Duration duration65 = interval62.toDuration();
        boolean boolean66 = interval50.overlaps((org.joda.time.ReadableInterval) interval62);
        boolean boolean67 = interval23.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.MutableInterval mutableInterval68 = interval23.toMutableInterval();
        long long69 = mutableInterval68.getStartMillis();
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) mutableInterval68);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mutableInterval68);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1643312290107L + "'", long69 == 1643312290107L);
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter3.getParser();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter3.getParser();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.days();
        java.lang.String str11 = periodType10.getName();
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration9.toPeriod(periodType10, chronology13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter3.withParseType(periodType10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.add((long) ' ');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod19.setPeriod((long) (short) 0, chronology36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.hourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.dayOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.secondOfMinute();
        boolean boolean56 = mutablePeriod19.equals((java.lang.Object) chronology51);
        org.joda.time.Chronology chronology57 = chronology51.withUTC();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1644572145972L, periodType10, chronology51);
        org.joda.time.PeriodType periodType59 = periodType10.withDaysRemoved();
        java.lang.String str60 = periodType10.getName();
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Days" + "'", str11, "Days");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Days" + "'", str60, "Days");
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableInstant5, (org.joda.time.ReadableDuration) duration6, periodType7);
        org.joda.time.Duration duration10 = duration6.minus((long) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.Duration duration24 = interval22.toDuration();
        int int25 = duration10.compareTo((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration26 = duration1.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration28 = org.joda.time.Duration.millis(1643312106882L);
        org.joda.time.Duration duration30 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration28, 18);
        long long31 = duration28.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 456475L + "'", long31 == 456475L);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 2784);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = periodFormatter2.parsePeriod("2022-02-11T09:37:28.909Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(periodType6);
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        int int50 = mutablePeriod49.getYears();
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod49.copy();
        mutablePeriod51.setYears((int) (short) 10);
        mutablePeriod51.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        mutablePeriod51.setPeriod((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Duration duration82 = duration80.plus(readableDuration81);
        org.joda.time.Duration duration84 = duration78.withDurationAdded((org.joda.time.ReadableDuration) duration80, (int) (byte) 10);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Period period86 = duration84.toPeriod(chronology85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Interval interval88 = duration84.toIntervalTo(readableInstant87);
        org.joda.time.Period period89 = interval88.toPeriod();
        mutablePeriod51.add((org.joda.time.ReadableInterval) interval88);
        boolean boolean91 = interval45.contains((org.joda.time.ReadableInterval) interval88);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval45);
        mutablePeriod3.setHours(10);
        int int95 = mutablePeriod3.getHours();
        mutablePeriod3.setWeeks((-51));
        mutablePeriod3.setMillis((int) (byte) 1);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1643312094639L);
        int int2 = mutablePeriod1.getDays();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod10.copy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        int int26 = mutablePeriod25.getYears();
        java.lang.String str27 = mutablePeriod25.toString();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        mutablePeriod25.add((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant38, readableInstant39);
        boolean boolean41 = mutablePeriod32.equals((java.lang.Object) readableInstant38);
        mutablePeriod10.add((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.PeriodType periodType43 = mutablePeriod10.getPeriodType();
        mutablePeriod1.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.052S" + "'", str27, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodType43);
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        java.lang.String str63 = periodType48.getName();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType48, chronology64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        long long72 = interval71.toDurationMillis();
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval71);
        boolean boolean74 = interval25.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime75 = interval71.getStart();
        org.joda.time.Duration duration76 = new org.joda.time.Duration((java.lang.Object) interval71);
        org.joda.time.Hours hours77 = duration76.toStandardHours();
        org.joda.time.Duration duration78 = duration76.toDuration();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Years" + "'", str63, "Years");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(hours77);
        org.junit.Assert.assertNotNull(duration78);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology13.minutes();
        org.joda.time.DurationField durationField18 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration21 = new org.joda.time.Duration((java.lang.Object) dateTimeField20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setMillis(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = mutablePeriod2.getFieldTypes();
        mutablePeriod2.addYears((int) (byte) 0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = mutablePeriod2.getFieldTypes();
        mutablePeriod2.setWeeks(102);
        mutablePeriod2.setHours((-9));
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(durationFieldTypeArray8);
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        java.lang.String str14 = duration12.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        mutablePeriod18.add((long) ' ');
        int int21 = mutablePeriod18.getDays();
        mutablePeriod18.setMillis((int) (byte) -1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        boolean boolean51 = interval36.contains((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.DateTime dateTime65 = interval63.getEnd();
        java.lang.String str66 = dateTime65.toString();
        boolean boolean67 = dateTime50.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration68 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology69 = dateTime65.getChronology();
        org.joda.time.Period period70 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime65);
        long long71 = dateTime65.getMillis();
        org.joda.time.Chronology chronology72 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.millisOfDay();
        org.joda.time.DurationField durationField74 = chronology72.minutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT6000S" + "'", str14, "PT6000S");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-11T09:39:50.378Z" + "'", str66, "2022-02-11T09:39:50.378Z");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(period70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1644572390378L + "'", long71 == 1644572390378L);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.centuryOfEra();
        org.joda.time.DurationField durationField36 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = chronology29.clockhourOfDay();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis(126000L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.days();
        org.joda.time.DurationField durationField23 = chronology21.centuries();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        int int33 = mutablePeriod28.getMonths();
        mutablePeriod28.addDays(10);
        mutablePeriod28.setWeeks((int) (byte) -1);
        int[] intArray40 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod28, (long) 100, 10L);
        org.joda.time.DateTimeField dateTimeField41 = chronology21.millisOfSecond();
        org.joda.time.Period period42 = duration7.toPeriod(chronology21);
        org.joda.time.DateTimeField dateTimeField43 = chronology21.centuryOfEra();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration5, chronology21);
        int int45 = mutablePeriod3.getDays();
        java.lang.String str46 = mutablePeriod3.toString();
        mutablePeriod3.addMillis(302);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, -90]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.032S" + "'", str46, "PT0.032S");
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        int int17 = mutablePeriod16.getYears();
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod16.copy();
        mutablePeriod18.setYears((int) (short) 10);
        mutablePeriod18.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        mutablePeriod18.setPeriod((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        mutablePeriod18.add((org.joda.time.ReadableInterval) interval55);
        boolean boolean58 = interval12.contains((org.joda.time.ReadableInterval) interval55);
        org.joda.time.MutableInterval mutableInterval59 = interval12.toMutableInterval();
        org.joda.time.DateTime dateTime60 = interval12.getEnd();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.setMillis((int) (short) 0);
        mutablePeriod12.addMonths((int) (short) 1);
        mutablePeriod12.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        mutablePeriod12.add(durationFieldType28, (int) '#');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.format.PeriodFormatter periodFormatter42 = null;
        java.lang.String str43 = mutablePeriod35.toString(periodFormatter42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getEnd();
        org.joda.time.Duration duration70 = interval67.toDuration();
        boolean boolean71 = interval55.overlaps((org.joda.time.ReadableInterval) interval67);
        mutablePeriod35.setPeriod((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Duration duration78 = duration76.plus(readableDuration77);
        org.joda.time.Duration duration80 = duration74.withDurationAdded((org.joda.time.ReadableDuration) duration76, (int) (byte) 10);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = duration80.toPeriod(chronology81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Interval interval84 = duration80.toIntervalTo(readableInstant83);
        org.joda.time.Period period85 = interval84.toPeriod();
        org.joda.time.Period period86 = interval84.toPeriod();
        boolean boolean87 = interval67.isBefore((org.joda.time.ReadableInterval) interval84);
        org.joda.time.DateTime dateTime88 = interval84.getStart();
        org.joda.time.Duration duration89 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Instant instant90 = dateTime88.toInstant();
        long long91 = instant90.getMillis();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0.052S" + "'", str43, "PT0.052S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(instant90);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1643312290503L + "'", long91 == 1643312290503L);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.Duration duration19 = interval15.toDuration();
        org.joda.time.Interval interval20 = interval15.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = interval15.toMutableInterval();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(mutableInterval21);
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod7.setMillis((int) ' ');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        mutablePeriod28.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod28.copy();
        org.joda.time.PeriodType periodType40 = mutablePeriod28.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType43 = periodType40.getFieldType(1);
        mutablePeriod7.add(durationFieldType43, (int) ' ');
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod49.add((long) ' ');
        int int52 = mutablePeriod49.getDays();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.millis();
        mutablePeriod49.add(durationFieldType53, (int) (byte) 1);
        int int56 = mutablePeriod49.getWeeks();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology59);
        mutablePeriod60.add((long) ' ');
        mutablePeriod60.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        mutablePeriod69.setPeriod(readablePeriod70);
        mutablePeriod69.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.days();
        int int75 = mutablePeriod69.get(durationFieldType74);
        boolean boolean76 = mutablePeriod60.isSupported(durationFieldType74);
        boolean boolean77 = mutablePeriod49.isSupported(durationFieldType74);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Duration duration79 = mutablePeriod49.toDurationTo(readableInstant78);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.millis();
        int int81 = mutablePeriod49.get(durationFieldType80);
        mutablePeriod7.add(durationFieldType80, 80);
        int int84 = mutablePeriod7.getMonths();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-19) + "'", int81 == (-19));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32);
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1644572350237L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        int int14 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears((-52));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutablePeriod52.clear();
        mutablePeriod52.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType62 = null;
        boolean boolean63 = mutablePeriod52.isSupported(durationFieldType62);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekyearOfCentury();
        mutablePeriod52.add((long) (short) 100, chronology78);
        org.joda.time.DurationField durationField82 = chronology78.halfdays();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, chronology78);
        org.joda.time.DateTimeField dateTimeField84 = chronology78.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField85 = chronology78.year();
        org.joda.time.DateTimeField dateTimeField86 = chronology78.dayOfMonth();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Period period21 = mutablePeriod10.toPeriod();
        mutablePeriod10.setPeriod((-51), 51, (int) (short) 1, 51, 32, 0, (int) (short) -1, (-52));
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod35.clear();
        mutablePeriod35.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType45 = null;
        boolean boolean46 = mutablePeriod35.isSupported(durationFieldType45);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.weekyearOfCentury();
        mutablePeriod35.add((long) (short) 100, chronology61);
        org.joda.time.DurationField durationField65 = chronology61.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.year();
        mutablePeriod10.setPeriod(1644572149392L, chronology61);
        mutablePeriod10.addMillis((-51));
        mutablePeriod10.setPeriod(20, 0, 40, 33, 36, (-42), 32, (-9));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1644572122264L, 2704L);
        mutablePeriod2.setWeeks((int) (byte) 0);
        mutablePeriod2.setPeriod(32L, 1644572352930L);
        int int8 = mutablePeriod2.getMinutes();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 39 + "'", int8 == 39);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        int int43 = periodType42.size();
        org.joda.time.PeriodType periodType44 = periodType42.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter41.withParseType(periodType44);
        java.util.Locale locale46 = null;
        org.joda.time.format.PeriodFormatter periodFormatter47 = periodFormatter45.withLocale(locale46);
        org.joda.time.PeriodType periodType48 = periodFormatter45.getParseType();
        org.joda.time.PeriodType periodType49 = periodFormatter45.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod50 = org.joda.time.MutablePeriod.parse("2022-02-11T09:38:09.644Z", periodFormatter45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodFormatter45);
        org.junit.Assert.assertNotNull(periodFormatter47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod18.toMutablePeriod();
        int int20 = mutablePeriod18.size();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod24.addHours(0);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration30, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.halfdayOfDay();
        org.joda.time.DurationField durationField47 = durationFieldType22.getField(chronology44);
        org.joda.time.DurationField durationField48 = chronology44.minutes();
        org.joda.time.DurationField durationField49 = chronology44.months();
        mutablePeriod18.add(1644572145724L, chronology44);
        org.joda.time.DateTimeField dateTimeField51 = chronology44.weekyear();
        org.joda.time.Chronology chronology52 = chronology44.withUTC();
        java.lang.String str53 = chronology52.toString();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int9 = mutablePeriod7.size();
        int int10 = mutablePeriod7.getDays();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Period period25 = interval22.toPeriod();
        org.joda.time.Interval interval26 = interval22.toInterval();
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval22);
        mutablePeriod7.addYears((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = mutablePeriod7.getValue((-42));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -42");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int9 = mutablePeriod7.size();
        int int10 = mutablePeriod7.getDays();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Period period25 = interval22.toPeriod();
        org.joda.time.Interval interval26 = interval22.toInterval();
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval22);
        mutablePeriod7.addYears((int) (byte) -1);
        mutablePeriod7.addMinutes(3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addMinutes(18);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withLocale(locale3);
        boolean boolean5 = periodFormatter4.isPrinter();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod9.clear();
        mutablePeriod9.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = mutablePeriod9.isSupported(durationFieldType19);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        mutablePeriod9.add((long) (short) 100, chronology35);
        org.joda.time.DurationField durationField39 = chronology35.halfdays();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.hourOfHalfday();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        mutablePeriod44.setMillis((int) (short) 0);
        mutablePeriod44.addMonths((int) (short) 1);
        mutablePeriod44.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        mutablePeriod44.add(durationFieldType60, (int) '#');
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.MutablePeriod mutablePeriod74 = mutablePeriod44.copy();
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.weeks();
        int int76 = mutablePeriod74.get(durationFieldType75);
        long long79 = chronology35.add((org.joda.time.ReadablePeriod) mutablePeriod74, (long) ' ', 3);
        java.lang.Object obj80 = mutablePeriod74.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int83 = periodFormatter4.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod74, "2022-01-27T19:34:07.551Z", 11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-124L) + "'", long79 == (-124L));
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "PT0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "PT0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "PT0.052S");
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter40.withLocale(locale41);
        boolean boolean43 = periodFormatter40.isPrinter();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.days();
        boolean boolean5 = mutablePeriod1.isSupported(durationFieldType4);
        org.joda.time.PeriodType periodType6 = mutablePeriod1.getPeriodType();
        mutablePeriod1.setMinutes(0);
        int int9 = mutablePeriod1.getSeconds();
        mutablePeriod1.addHours(0);
        mutablePeriod1.setSeconds((-53));
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod1.toMutablePeriod();
        mutablePeriod14.addMonths(6);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod14);
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        org.joda.time.PeriodType periodType39 = periodFormatter38.getParseType();
        java.lang.String str40 = periodType39.toString();
        java.lang.String str41 = periodType39.toString();
        org.joda.time.PeriodType periodType42 = periodType39.withMillisRemoved();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PeriodType[Years]" + "'", str40, "PeriodType[Years]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PeriodType[Years]" + "'", str41, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutablePeriod38.setPeriod(readablePeriod39);
        mutablePeriod38.addWeeks((int) (byte) 10);
        int int43 = mutablePeriod38.getMonths();
        int int44 = mutablePeriod38.size();
        mutablePeriod38.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod38.toMutablePeriod();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes((long) 1);
        mutablePeriod47.add((org.joda.time.ReadableDuration) duration49);
        mutablePeriod33.add((org.joda.time.ReadableDuration) duration49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType53 = mutablePeriod33.getFieldType((-53));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(duration49);
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(3289144462468L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 3289144462468 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setMillis(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = mutablePeriod2.getFieldTypes();
        mutablePeriod2.addYears((int) (byte) 0);
        org.joda.time.Period period8 = mutablePeriod2.toPeriod();
        mutablePeriod2.addDays(340);
        mutablePeriod2.addYears((int) '4');
        mutablePeriod2.addSeconds(100);
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Days days6 = duration5.toStandardDays();
        org.joda.time.Days days7 = duration5.toStandardDays();
        org.joda.time.Duration duration9 = duration5.withMillis(1644572184618L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration9);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(32, (int) '#', (int) (byte) -1, 4);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.days();
        java.lang.String str6 = periodType5.getName();
        org.joda.time.PeriodType periodType7 = periodType5.withWeeksRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod11.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod11.toMutablePeriod();
        int[] intArray15 = mutablePeriod11.getValues();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        mutablePeriod20.add((long) ' ');
        mutablePeriod20.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.days();
        int int35 = mutablePeriod29.get(durationFieldType34);
        boolean boolean36 = mutablePeriod20.isSupported(durationFieldType34);
        boolean boolean37 = periodType16.isSupported(durationFieldType34);
        int int38 = mutablePeriod11.indexOf(durationFieldType34);
        int int39 = periodType5.indexOf(durationFieldType34);
        mutablePeriod4.set(durationFieldType34, (int) '4');
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Period period54 = interval53.toPeriod();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfYear();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.minuteOfDay();
        org.joda.time.DurationField durationField60 = durationFieldType34.getField(chronology55);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutablePeriod65.setPeriod(readablePeriod66);
        mutablePeriod65.addWeeks((int) (byte) 10);
        int int70 = mutablePeriod65.getMonths();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Duration duration73 = new org.joda.time.Duration(readableInstant71, readableInstant72);
        mutablePeriod65.setPeriod((org.joda.time.ReadableDuration) duration73);
        int int75 = mutablePeriod65.getMinutes();
        int[] intArray78 = chronology55.get((org.joda.time.ReadablePeriod) mutablePeriod65, 1644572206170L, 1644572236437L);
        org.joda.time.DateTimeField dateTimeField79 = chronology55.hourOfHalfday();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Days" + "'", str6, "Days");
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0, 0, 0, 30, 267]");
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1643312021315L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
        mutablePeriod4.setMillis(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = mutablePeriod4.getFieldTypes();
        mutablePeriod4.setPeriod((int) (short) 100, 48, (int) (short) 1, 456825, 14, 3, 5, (int) (byte) -1);
        boolean boolean17 = duration1.equals((java.lang.Object) (byte) -1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1644572123588L, 10L);
        long long3 = duration2.getStandardMinutes();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-27409535L) + "'", long3 == (-27409535L));
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = interval29.isBefore(readableInterval32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval32);
        int int35 = mutablePeriod34.getHours();
        mutablePeriod34.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray47 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 1, (long) 3);
        org.joda.time.DateTimeField dateTimeField48 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField49 = chronology17.yearOfCentury();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Period period63 = interval62.toPeriod();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfYear();
        org.joda.time.Chronology chronology68 = chronology64.withUTC();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(100000L, chronology64);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) duration71, chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        long long76 = interval75.getEndMillis();
        org.joda.time.Interval interval77 = interval75.toInterval();
        mutablePeriod69.setPeriod((org.joda.time.ReadableInterval) interval77);
        mutablePeriod69.addMonths(10);
        long long83 = chronology17.add((org.joda.time.ReadablePeriod) mutablePeriod69, 36000000L, 6);
        org.joda.time.ReadablePartial readablePartial84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = chronology17.get(readablePartial84, 1643312057389L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(interval75);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1644572391165L + "'", long76 == 1644572391165L);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 157802760000L + "'", long83 == 157802760000L);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(100000L);
        org.joda.time.Duration duration3 = duration1.plus(1644572122254L);
        org.joda.time.Duration duration5 = duration1.withMillis(98674326527820L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField42 = chronology34.halfdays();
        long long46 = chronology34.add((long) (short) 10, (long) 32, 1);
        org.joda.time.DurationField durationField47 = chronology34.millis();
        org.joda.time.DateTimeField dateTimeField48 = chronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField49 = chronology34.monthOfYear();
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 42L + "'", long46 == 42L);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        mutablePeriod3.setMillis(6);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        mutablePeriod32.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod43 = mutablePeriod32.copy();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Duration duration45 = mutablePeriod32.toDurationTo(readableInstant44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology48 = null;
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration47, chronology48);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod32.isSupported(durationFieldType59);
        java.lang.String str62 = durationFieldType59.toString();
        boolean boolean63 = mutablePeriod3.isSupported(durationFieldType59);
        java.lang.String str64 = durationFieldType59.getName();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "days" + "'", str62, "days");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "days" + "'", str64, "days");
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 0, 8, (-23));
        mutablePeriod4.addWeeks((int) (short) 1);
        int int7 = mutablePeriod4.getMinutes();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 10, 97, 36, 80);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        mutablePeriod3.addYears(0);
        mutablePeriod3.clear();
        java.lang.Object obj9 = mutablePeriod3.clone();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0S");
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.Period period9 = duration1.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyearOfCentury();
        org.joda.time.Period period26 = duration1.toPeriod(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        int int38 = mutablePeriod33.getMonths();
        mutablePeriod33.addDays(10);
        mutablePeriod33.setMinutes(0);
        int[] intArray43 = mutablePeriod33.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology23.validate(readablePartial28, intArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 10, 10, 0, 0, 0, 0]");
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) '4', 0, (int) (byte) 10, 1, (int) (short) 0, (int) (short) 0, (int) (short) 10, 4);
        mutablePeriod8.addMinutes(51);
        mutablePeriod8.setWeeks(14);
        int int13 = mutablePeriod8.getHours();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod17.setMillis((int) (short) 0);
        mutablePeriod17.addMonths((int) (short) 1);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours(1644572118532L);
        long long25 = duration24.getMillis();
        org.joda.time.Duration duration27 = duration24.plus(1644572298827L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Period period40 = interval39.toPeriod();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfYear();
        org.joda.time.Chronology chronology45 = chronology41.withUTC();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getEnd();
        org.joda.time.ReadableInterval readableInterval60 = null;
        boolean boolean61 = interval57.isBefore(readableInterval60);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval60);
        int int63 = mutablePeriod62.getHours();
        mutablePeriod62.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray75 = chronology45.get((org.joda.time.ReadablePeriod) mutablePeriod62, (long) 1, (long) 3);
        org.joda.time.DateTimeField dateTimeField76 = chronology45.era();
        org.joda.time.DateTimeField dateTimeField77 = chronology45.yearOfCentury();
        long long81 = chronology45.add(1643312106882L, 1644572187937L, 45);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration27, chronology45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 9789122472");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5920459626715200000L + "'", long25 == 5920459626715200000L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 75649060564047L + "'", long81 == 75649060564047L);
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        boolean boolean31 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration24.toPeriod(periodType32, chronology33);
        org.joda.time.PeriodType periodType35 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType32.withWeeksRemoved();
        org.joda.time.PeriodType periodType37 = periodType32.withSecondsRemoved();
        org.joda.time.Period period38 = interval12.toPeriod(periodType32);
        org.joda.time.PeriodType periodType39 = periodType32.withSecondsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1643312105429L, periodType40);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        long long13 = interval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getEnd();
        boolean boolean28 = interval12.isBefore((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        boolean boolean59 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration52.toPeriod(periodType60, chronology61);
        org.joda.time.PeriodType periodType63 = periodType60.withYearsRemoved();
        org.joda.time.PeriodType periodType64 = periodType60.withWeeksRemoved();
        org.joda.time.PeriodType periodType65 = periodType60.withSecondsRemoved();
        org.joda.time.Period period66 = interval40.toPeriod(periodType60);
        boolean boolean67 = interval12.contains((org.joda.time.ReadableInterval) interval40);
        org.joda.time.MutableInterval mutableInterval68 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology69 = mutableInterval68.getChronology();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1260100000L + "'", long13 == 1260100000L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1644572166531L, (long) 19);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.PeriodType periodType23 = periodType21.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str25 = durationFieldType24.getName();
        java.lang.String str26 = durationFieldType24.getName();
        int int27 = periodType23.indexOf(durationFieldType24);
        org.joda.time.PeriodType periodType28 = periodType23.withWeeksRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "seconds" + "'", str25, "seconds");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "seconds" + "'", str26, "seconds");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.add((long) ' ');
        int int15 = mutablePeriod12.getDays();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        mutablePeriod12.add(durationFieldType16, (int) (byte) 1);
        int int19 = mutablePeriod12.getWeeks();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        boolean boolean40 = mutablePeriod12.isSupported(durationFieldType37);
        int int41 = mutablePeriod3.get(durationFieldType37);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod3, periodType42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        boolean boolean71 = interval56.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology72 = interval56.getChronology();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTime dateTime74 = interval56.getEnd();
        long long75 = interval56.getStartMillis();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1643312291920L + "'", long75 == 1643312291920L);
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean4 = periodType2.equals((java.lang.Object) false);
        org.joda.time.PeriodType periodType5 = periodType2.withMillisRemoved();
        org.joda.time.PeriodType periodType6 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod9.addHours(0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration15, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology29.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1643312097539L, 1644572246147L, periodType6, chronology29);
        org.joda.time.DurationField durationField38 = chronology29.hours();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        java.lang.String str2 = duration1.toString();
        long long3 = duration1.getStandardDays();
        org.joda.time.Period period4 = duration1.toPeriod();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration15 = duration6.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean18 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration29 = duration20.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.DateTime dateTime58 = interval56.getEnd();
        boolean boolean59 = interval44.contains((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        java.lang.String str74 = dateTime73.toString();
        boolean boolean75 = dateTime58.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration76 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime58.getZone();
        org.joda.time.Period period78 = duration28.toPeriodTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Instant instant79 = dateTime58.toInstant();
        org.joda.time.DateTimeZone dateTimeZone80 = instant79.getZone();
        org.joda.time.Period period81 = duration15.toPeriodTo((org.joda.time.ReadableInstant) instant79);
        org.joda.time.Period period82 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) instant79);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT60S" + "'", str2, "PT60S");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-11T09:39:51.986Z" + "'", str74, "2022-02-11T09:39:51.986Z");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period82);
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572115768L);
        org.joda.time.DurationFieldType durationFieldType3 = mutablePeriod1.getFieldType(4);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod28.addHours(0);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.days();
        boolean boolean32 = mutablePeriod28.isSupported(durationFieldType31);
        mutablePeriod5.set(durationFieldType31, (-1));
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod5.toMutablePeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        boolean boolean52 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration45.toPeriod(periodType53, chronology54);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        mutablePeriod60.setPeriod(readablePeriod61);
        mutablePeriod60.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.days();
        int int66 = mutablePeriod60.get(durationFieldType65);
        boolean boolean67 = periodType53.isSupported(durationFieldType65);
        int int68 = periodType53.size();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = periodType53.indexOf(durationFieldType69);
        mutablePeriod35.set(durationFieldType69, 51);
        int int73 = mutablePeriod1.get(durationFieldType69);
        mutablePeriod1.setMillis(5);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getEnd();
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        boolean boolean44 = interval29.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = interval29.getStart();
        java.lang.String str46 = dateTime45.toString();
        boolean boolean47 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Interval interval48 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) dateTime15);
        java.lang.String str49 = interval48.toString();
        long long50 = interval48.getStartMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:39:52.087Z" + "'", str16, "2022-02-11T09:39:52.087Z");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-01-27T19:38:12.087Z" + "'", str46, "2022-01-27T19:38:12.087Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-11T09:39:52.087Z/2022-02-11T10:14:52.087Z" + "'", str49, "2022-02-11T09:39:52.087Z/2022-02-11T10:14:52.087Z");
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644572392087L + "'", long50 == 1644572392087L);
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(340, (int) 'a', 51, (int) (short) -1, 0, (int) (short) 0, 0, 8);
        mutablePeriod8.addYears(0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology25.seconds();
        java.lang.String str31 = chronology25.toString();
        org.joda.time.DurationField durationField32 = chronology25.minutes();
        mutablePeriod8.setPeriod((-31221671993702L), chronology25);
        org.joda.time.DateTimeField dateTimeField34 = chronology25.hourOfDay();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str31, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod7.setMillis((int) ' ');
        mutablePeriod7.addDays(0);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod7);
        mutablePeriod7.setPeriod(1644572119917L);
        mutablePeriod7.add(1644572129538L);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod7.setValue(49, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        int int1 = periodType0.size();
        org.joda.time.PeriodType periodType2 = periodType0.withYearsRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        int int4 = periodType3.size();
        java.lang.String str5 = periodType3.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PeriodType[TimeNoHours]" + "'", str5, "PeriodType[TimeNoHours]");
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableInstant2);
        mutablePeriod3.addWeeks((int) 'a');
        int int6 = mutablePeriod3.getHours();
        org.joda.time.PeriodType periodType7 = mutablePeriod3.getPeriodType();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod15.copy();
        mutablePeriod15.setMillis((int) ' ');
        mutablePeriod15.addMonths(0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        mutablePeriod38.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod49 = mutablePeriod38.copy();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = mutablePeriod38.toDurationTo(readableInstant50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology54 = null;
        mutablePeriod38.setPeriod((org.joda.time.ReadableDuration) duration53, chronology54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.secondOfDay();
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration53, chronology74);
        org.joda.time.DurationField durationField79 = chronology74.days();
        org.joda.time.DateTimeField dateTimeField80 = chronology74.hourOfDay();
        org.joda.time.DateTimeField dateTimeField81 = chronology74.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 918, periodType7, chronology74);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        long long13 = interval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getEnd();
        boolean boolean28 = interval12.isBefore((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        boolean boolean59 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration52.toPeriod(periodType60, chronology61);
        org.joda.time.PeriodType periodType63 = periodType60.withYearsRemoved();
        org.joda.time.PeriodType periodType64 = periodType60.withWeeksRemoved();
        org.joda.time.PeriodType periodType65 = periodType60.withSecondsRemoved();
        org.joda.time.Period period66 = interval40.toPeriod(periodType60);
        boolean boolean67 = interval12.contains((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Period period68 = interval40.toPeriod();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        boolean boolean81 = duration70.isShorterThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        java.lang.String str86 = duration83.toString();
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean89 = periodType87.equals((java.lang.Object) false);
        org.joda.time.Period period90 = duration83.toPeriod(periodType87);
        org.joda.time.PeriodType periodType91 = periodType87.withMillisRemoved();
        org.joda.time.PeriodType periodType92 = org.joda.time.PeriodType.days();
        boolean boolean93 = periodType87.equals((java.lang.Object) periodType92);
        org.joda.time.PeriodType periodType94 = periodType87.withMonthsRemoved();
        org.joda.time.Period period95 = duration70.toPeriod(periodType94);
        org.joda.time.ReadableInstant readableInstant96 = null;
        org.joda.time.Interval interval97 = duration70.toIntervalTo(readableInstant96);
        org.joda.time.DateTime dateTime98 = interval97.getStart();
        boolean boolean99 = interval40.isAfter((org.joda.time.ReadableInstant) dateTime98);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1260100000L + "'", long13 == 1260100000L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT126000S" + "'", str86, "PT126000S");
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(interval97);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant11, (org.joda.time.ReadableDuration) duration12, periodType13);
        org.joda.time.Duration duration16 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        org.joda.time.Duration duration17 = duration5.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration21 = duration19.withMillis(126000000L);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod23.addHours(0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Period period42 = interval41.toPeriod();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        mutablePeriod23.setPeriod((org.joda.time.ReadableDuration) duration29, chronology43);
        org.joda.time.Duration duration47 = duration29.withDurationAdded((long) 3, (int) '4');
        boolean boolean48 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        mutablePeriod52.setMillis((int) (short) 0);
        mutablePeriod52.addMonths((int) (short) 1);
        mutablePeriod52.setMinutes((int) (byte) 1);
        mutablePeriod52.setYears((int) (short) 100);
        mutablePeriod52.addDays(1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology69);
        mutablePeriod66.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        java.lang.Object obj72 = mutablePeriod70.clone();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((java.lang.Object) duration74, chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        mutablePeriod70.add((org.joda.time.ReadableInterval) interval78);
        org.joda.time.DateTime dateTime80 = interval78.getStart();
        org.joda.time.Duration duration81 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Duration duration83 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) -1);
        org.joda.time.Duration duration84 = duration5.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration87 = duration84.withDurationAdded(1643312259694L, 14);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration87);
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes(1644572108797L);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration25);
        mutablePeriod23.setYears((int) (byte) 1);
        org.joda.time.PeriodType periodType29 = mutablePeriod23.getPeriodType();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType29);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType1 = periodType0.withDaysRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withMonthsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, 126000L);
        mutablePeriod2.addHours(1250);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:37:37.066Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:37:37.066Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getEnd();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology20 = interval16.getChronology();
        org.joda.time.DateTime dateTime21 = interval16.getEnd();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        boolean boolean34 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        java.lang.String str39 = duration36.toString();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean42 = periodType40.equals((java.lang.Object) false);
        org.joda.time.Period period43 = duration36.toPeriod(periodType40);
        org.joda.time.PeriodType periodType44 = periodType40.withMillisRemoved();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        boolean boolean46 = periodType40.equals((java.lang.Object) periodType45);
        org.joda.time.PeriodType periodType47 = periodType40.withMonthsRemoved();
        org.joda.time.Period period48 = duration23.toPeriod(periodType47);
        org.joda.time.Duration duration50 = duration23.plus((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration50.toIntervalFrom(readableInstant51);
        boolean boolean53 = interval16.overlaps((org.joda.time.ReadableInterval) interval52);
        long long54 = interval52.toDurationMillis();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT126000S" + "'", str39, "PT126000S");
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 126000001L + "'", long54 == 126000001L);
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology28 = interval12.getChronology();
        java.lang.String str29 = interval12.toString();
        org.joda.time.Duration duration30 = interval12.toDuration();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        mutablePeriod38.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod49 = mutablePeriod38.copy();
        org.joda.time.PeriodType periodType50 = mutablePeriod38.getPeriodType();
        org.joda.time.PeriodType periodType51 = periodType50.withWeeksRemoved();
        boolean boolean52 = interval12.equals((java.lang.Object) periodType51);
        java.lang.Object obj53 = null;
        boolean boolean54 = interval12.equals(obj53);
        org.joda.time.Duration duration55 = interval12.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-27T19:38:12.405Z/2022-02-11T09:39:52.405Z" + "'", str29, "2022-01-27T19:38:12.405Z/2022-02-11T09:39:52.405Z");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        java.lang.String str45 = interval42.toString();
        org.joda.time.Duration duration46 = interval42.toDuration();
        org.joda.time.Duration duration48 = duration46.minus(1644572174829L);
        long long49 = duration46.getMillis();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-01-27T19:38:12.433Z/2022-02-11T09:39:52.433Z" + "'", str45, "2022-01-27T19:38:12.433Z/2022-02-11T09:39:52.433Z");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1260100000L + "'", long49 == 1260100000L);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod2.addHours(0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration8, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType0.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.year();
        org.joda.time.DurationField durationField28 = chronology22.halfdays();
        java.lang.String str29 = chronology22.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology22.year();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str29, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Minutes minutes49 = duration31.toStandardMinutes();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = dateTime63.isEqual(readableInstant65);
        java.lang.Object obj67 = null;
        boolean boolean68 = dateTime63.equals(obj67);
        java.lang.String str69 = dateTime63.toString();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        boolean boolean72 = dateTime63.isSupported(dateTimeFieldType71);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType74 = periodType73.withYearsRemoved();
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((java.lang.Object) duration76, chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        long long81 = interval80.toDurationMillis();
        org.joda.time.Period period82 = interval80.toPeriod();
        boolean boolean83 = periodType74.equals((java.lang.Object) interval80);
        org.joda.time.DateTime dateTime84 = interval80.getEnd();
        boolean boolean85 = dateTime63.isAfter((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int87 = dateTime63.compareTo(readableInstant86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-11T09:39:52.650Z" + "'", str64, "2022-02-11T09:39:52.650Z");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-11T09:39:52.650Z" + "'", str69, "2022-02-11T09:39:52.650Z");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 60000L + "'", long81 == 60000L);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter2.isPrinter();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        mutablePeriod47.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod58 = mutablePeriod47.copy();
        mutablePeriod58.addMillis((int) (byte) 100);
        int int61 = mutablePeriod58.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology59);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology80);
        int int82 = mutablePeriod81.getYears();
        org.joda.time.MutablePeriod mutablePeriod83 = mutablePeriod81.copy();
        mutablePeriod83.setYears((int) (short) 10);
        int[] intArray87 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod83, 1644572114290L);
        org.joda.time.DateTimeField dateTimeField88 = chronology59.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField89 = chronology59.dayOfWeek();
        org.joda.time.DurationField durationField90 = chronology59.hours();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 2719, 1, 9, 35, 14, 290]");
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField90);
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        int int8 = mutablePeriod5.size();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) 2, (long) ' ');
        org.joda.time.Duration duration13 = duration11.withMillis(21001L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours(1644572142121L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = mutablePeriod19.get(durationFieldType22);
        int int24 = mutablePeriod19.size();
        mutablePeriod19.addWeeks((int) (short) 0);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getEnd();
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.DateTime dateTime68 = interval66.getEnd();
        boolean boolean69 = interval54.contains((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime70 = interval54.getStart();
        java.lang.String str71 = dateTime70.toString();
        boolean boolean72 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = mutablePeriod19.toDurationTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        java.lang.String str78 = duration75.toString();
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean81 = periodType79.equals((java.lang.Object) false);
        org.joda.time.Period period82 = duration75.toPeriod(periodType79);
        org.joda.time.PeriodType periodType83 = periodType79.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(periodType83);
        org.joda.time.Period period85 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime70, periodType83);
        org.joda.time.Chronology chronology86 = dateTime70.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology86);
        org.joda.time.DateTimeField dateTimeField88 = chronology86.halfdayOfDay();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-11T09:39:52.744Z" + "'", str41, "2022-02-11T09:39:52.744Z");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-01-27T19:38:12.744Z" + "'", str71, "2022-01-27T19:38:12.744Z");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT126000S" + "'", str78, "PT126000S");
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology59);
        mutablePeriod77.addHours((int) (byte) 0);
        int int80 = mutablePeriod77.size();
        mutablePeriod77.add(1644572232634L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology13.months();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology18);
        mutablePeriod19.setHours(1);
        int[] intArray23 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod19, 98674326653820000L);
        mutablePeriod19.setValue(0, (-51));
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod19.toMutablePeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 163151995, 0, 21, 37, 0, 0]");
        org.junit.Assert.assertNotNull(mutablePeriod27);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        long long13 = interval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getEnd();
        java.lang.String str28 = dateTime27.toString();
        boolean boolean29 = interval12.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval30 = interval12.toMutableInterval();
        org.joda.time.DateTime dateTime31 = interval12.getEnd();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        boolean boolean48 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Minutes minutes49 = duration35.toStandardMinutes();
        org.joda.time.Duration duration51 = duration35.plus((long) 8);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Interval interval77 = interval76.toInterval();
        org.joda.time.DateTime dateTime78 = interval76.getEnd();
        boolean boolean79 = interval64.contains((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Instant instant80 = dateTime78.toInstant();
        org.joda.time.Period period81 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) instant80);
        org.joda.time.DateTimeZone dateTimeZone82 = instant80.getZone();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant80, readableInstant83);
        org.joda.time.Duration duration87 = new org.joda.time.Duration(35000L, 1644572121340L);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant80, (org.joda.time.ReadableDuration) duration87);
        org.joda.time.Duration duration89 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) instant80);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1260100000L + "'", long13 == 1260100000L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:39:53.039Z" + "'", str28, "2022-02-11T09:39:53.039Z");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.clear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = mutablePeriod14.get(durationFieldType17);
        int int19 = mutablePeriod14.size();
        mutablePeriod14.setMinutes((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getEnd();
        mutablePeriod26.setPeriod((org.joda.time.ReadableInterval) interval38);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        boolean boolean59 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration52.toPeriod(periodType60, chronology61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutablePeriod67.setPeriod(readablePeriod68);
        mutablePeriod67.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.days();
        int int73 = mutablePeriod67.get(durationFieldType72);
        boolean boolean74 = periodType60.isSupported(durationFieldType72);
        int int75 = periodType60.size();
        org.joda.time.PeriodType periodType76 = periodType60.withMonthsRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withYearsRemoved();
        java.lang.String str78 = periodType76.toString();
        org.joda.time.PeriodType periodType79 = periodType76.withMillisRemoved();
        org.joda.time.Period period80 = interval38.toPeriod(periodType76);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        org.joda.time.Duration duration88 = duration82.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = duration88.toPeriod(chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = duration88.toIntervalTo(readableInstant91);
        org.joda.time.Interval interval93 = interval92.toInterval();
        org.joda.time.Chronology chronology94 = interval92.getChronology();
        boolean boolean95 = interval38.overlaps((org.joda.time.ReadableInterval) interval92);
        org.joda.time.Interval interval96 = interval92.toInterval();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval92);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PeriodType[Years]" + "'", str78, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(interval96);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        boolean boolean5 = periodFormatter2.isParser();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter7.getPrinter();
        boolean boolean9 = periodFormatter7.isPrinter();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(periodPrinter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.format.PeriodFormatter periodFormatter33 = null;
        java.lang.String str34 = mutablePeriod26.toString(periodFormatter33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        org.joda.time.Duration duration61 = interval58.toDuration();
        boolean boolean62 = interval46.overlaps((org.joda.time.ReadableInterval) interval58);
        mutablePeriod26.setPeriod((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        boolean boolean80 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration73.toPeriod(periodType81, chronology82);
        org.joda.time.PeriodType periodType84 = periodType81.withYearsRemoved();
        org.joda.time.PeriodType periodType85 = periodType84.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.eras();
        int int87 = periodType84.indexOf(durationFieldType86);
        int int88 = mutablePeriod26.indexOf(durationFieldType86);
        org.joda.time.MutablePeriod mutablePeriod89 = mutablePeriod26.toMutablePeriod();
        int int90 = mutablePeriod26.getWeeks();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.052S" + "'", str34, "PT0.052S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(mutablePeriod89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1643312021316L, (long) 33);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str4 = durationFieldType3.toString();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.secondOfMinute();
        org.joda.time.DurationField durationField23 = chronology18.months();
        boolean boolean24 = durationFieldType3.isSupported(chronology18);
        org.joda.time.Chronology chronology25 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.yearOfCentury();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod34.copy();
        org.joda.time.MutablePeriod mutablePeriod46 = mutablePeriod45.toMutablePeriod();
        mutablePeriod45.addWeeks(4);
        int[] intArray51 = chronology18.get((org.joda.time.ReadablePeriod) mutablePeriod45, 1644572166531L, (long) 45);
        boolean boolean52 = mutablePeriod2.equals((java.lang.Object) mutablePeriod45);
        org.joda.time.format.PeriodPrinter periodPrinter53 = null;
        org.joda.time.format.PeriodParser periodParser54 = null;
        org.joda.time.format.PeriodFormatter periodFormatter55 = new org.joda.time.format.PeriodFormatter(periodPrinter53, periodParser54);
        java.util.Locale locale56 = periodFormatter55.getLocale();
        java.util.Locale locale57 = periodFormatter55.getLocale();
        org.joda.time.format.PeriodParser periodParser58 = periodFormatter55.getParser();
        org.joda.time.format.PeriodParser periodParser59 = periodFormatter55.getParser();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.days();
        java.lang.String str63 = periodType62.getName();
        org.joda.time.PeriodType periodType64 = periodType62.withWeeksRemoved();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration61.toPeriod(periodType62, chronology65);
        org.joda.time.format.PeriodFormatter periodFormatter67 = periodFormatter55.withParseType(periodType62);
        boolean boolean68 = periodFormatter55.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter69 = periodFormatter55.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = mutablePeriod2.toString(periodFormatter55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "weekyears" + "'", str4, "weekyears");
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-52, -1, -1, -3, -9, -36, -6, -486]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNull(locale57);
        org.junit.Assert.assertNull(periodParser58);
        org.junit.Assert.assertNull(periodParser59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Days" + "'", str63, "Days");
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodFormatter67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(periodPrinter69);
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        long long13 = interval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((java.lang.Object) duration15, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        java.lang.Object obj27 = mutablePeriod25.clone();
        boolean boolean28 = duration15.equals((java.lang.Object) mutablePeriod25);
        mutablePeriod25.setDays((int) ' ');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        java.lang.String str73 = dateTime72.toString();
        boolean boolean74 = dateTime57.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime57.getZone();
        org.joda.time.Duration duration76 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean77 = interval12.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval78 = interval12.toMutableInterval();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1260100000L + "'", long13 == 1260100000L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32DT0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32DT0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32DT0.052S");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:39:53.313Z" + "'", str73, "2022-02-11T09:39:53.313Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(mutableInterval78);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        java.util.Locale locale7 = periodFormatter2.getLocale();
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter2.withLocale(locale8);
        java.lang.StringBuffer stringBuffer10 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod14.toMutablePeriod();
        int int18 = mutablePeriod17.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer10, (org.joda.time.ReadablePeriod) mutablePeriod17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-42) + "'", int18 == (-42));
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        java.lang.Object obj10 = mutablePeriod8.clone();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((java.lang.Object) duration12, chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval16);
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.Chronology chronology19 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (short) 10, chronology19);
        mutablePeriod22.addMinutes(100);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        int int29 = mutablePeriod28.getYears();
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod28.copy();
        mutablePeriod30.setYears((int) (short) 10);
        mutablePeriod30.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        mutablePeriod30.setPeriod((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Period period68 = interval67.toPeriod();
        mutablePeriod30.add((org.joda.time.ReadableInterval) interval67);
        org.joda.time.PeriodType periodType70 = mutablePeriod30.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.halfdays();
        int int72 = mutablePeriod30.get(durationFieldType71);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod22.set(durationFieldType71, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.Chronology chronology22 = null;
        mutablePeriod7.setPeriod(1644572184618L, 1260100000L, chronology22);
        mutablePeriod7.setPeriod(97, (int) (short) -1, (-53), 102, 1, 1, 33, (int) (short) 0);
        org.joda.time.PeriodType periodType33 = mutablePeriod7.getPeriodType();
        mutablePeriod7.clear();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        int int72 = mutablePeriod33.getYears();
        mutablePeriod33.addSeconds(10);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-52) + "'", int72 == (-52));
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.Chronology chronology16 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.hourOfDay();
        java.lang.String str18 = chronology13.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = mutablePeriod28.getFieldTypes();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.forFields(durationFieldTypeArray30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod33.addHours(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration39, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType31, chronology53);
        org.joda.time.DateTimeField dateTimeField57 = chronology53.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.year();
        org.joda.time.DateTimeZone dateTimeZone59 = chronology53.getZone();
        org.joda.time.Chronology chronology60 = chronology13.withZone(dateTimeZone59);
        org.joda.time.DurationField durationField61 = chronology13.months();
        org.joda.time.DateTimeField dateTimeField62 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str18, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT32M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT32M\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        mutablePeriod7.clear();
        int int11 = mutablePeriod7.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = mutablePeriod7.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0S");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology20.set(readablePartial23, 1644572139095L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        boolean boolean42 = interval27.contains((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        java.lang.String str57 = dateTime56.toString();
        boolean boolean58 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime41.getZone();
        org.joda.time.Period period61 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period62 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Instant instant63 = dateTime41.toInstant();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Interval interval76 = interval75.toInterval();
        org.joda.time.DateTime dateTime77 = interval75.getEnd();
        java.lang.String str78 = dateTime77.toString();
        org.joda.time.ReadableInstant readableInstant79 = null;
        boolean boolean80 = dateTime77.isEqual(readableInstant79);
        java.lang.Object obj81 = null;
        boolean boolean82 = dateTime77.equals(obj81);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        java.lang.String str87 = duration84.toString();
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean90 = periodType88.equals((java.lang.Object) false);
        org.joda.time.Period period91 = duration84.toPeriod(periodType88);
        org.joda.time.PeriodType periodType92 = periodType88.withMillisRemoved();
        org.joda.time.PeriodType periodType93 = org.joda.time.PeriodType.days();
        boolean boolean94 = periodType88.equals((java.lang.Object) periodType93);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) dateTime77, periodType88);
        org.joda.time.DurationFieldType durationFieldType96 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod95.add(durationFieldType96, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:36:07.695Z" + "'", str57, "2022-02-11T09:36:07.695Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-11T09:36:07.695Z" + "'", str78, "2022-02-11T09:36:07.695Z");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PT126000S" + "'", str87, "PT126000S");
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1L, periodType1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.setMillis((int) (short) 0);
        mutablePeriod6.addMonths((int) (short) 1);
        int int11 = mutablePeriod6.size();
        int int12 = mutablePeriod6.getWeeks();
        mutablePeriod6.setYears(8);
        mutablePeriod6.addSeconds(1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        boolean boolean50 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration43.toPeriod(periodType51, chronology52);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutablePeriod58.setPeriod(readablePeriod59);
        mutablePeriod58.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.days();
        int int64 = mutablePeriod58.get(durationFieldType63);
        boolean boolean65 = periodType51.isSupported(durationFieldType63);
        java.lang.String str66 = periodType51.getName();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType51, chronology67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) duration70, chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        long long75 = interval74.toDurationMillis();
        mutablePeriod68.setPeriod((org.joda.time.ReadableInterval) interval74);
        boolean boolean77 = interval28.contains((org.joda.time.ReadableInterval) interval74);
        long long78 = interval28.toDurationMillis();
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval28);
        mutablePeriod2.addHours(8);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Years" + "'", str66, "Years");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1260100000L + "'", long78 == 1260100000L);
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 10, (int) (short) 0, 4, (-51));
        int int5 = mutablePeriod4.size();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology29.weekOfWeekyear();
        long long41 = chronology29.add((long) 'a', (long) (short) 10, (-53));
        org.joda.time.DurationField durationField42 = chronology29.eras();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-433L) + "'", long41 == (-433L));
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.format.PeriodParser periodParser41 = periodFormatter40.getParser();
        java.util.Locale locale42 = periodFormatter40.getLocale();
        boolean boolean43 = periodFormatter40.isParser();
        java.lang.StringBuffer stringBuffer44 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        mutablePeriod52.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod63 = mutablePeriod52.copy();
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod63.toMutablePeriod();
        java.lang.String str65 = mutablePeriod64.toString();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter40.printTo(stringBuffer44, (org.joda.time.ReadablePeriod) mutablePeriod64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(periodParser41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "P32W97DT97H1M0.053S" + "'", str65, "P32W97DT97H1M0.053S");
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        boolean boolean32 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration25.toPeriod(periodType33, chronology34);
        org.joda.time.PeriodType periodType36 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType37 = periodType33.withWeeksRemoved();
        org.joda.time.PeriodType periodType38 = periodType33.withSecondsRemoved();
        org.joda.time.Period period39 = interval13.toPeriod(periodType33);
        org.joda.time.PeriodType periodType40 = periodType33.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1644572118532L, (long) 1, periodType40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        int int46 = mutablePeriod45.getYears();
        java.lang.String str47 = mutablePeriod45.toString();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutablePeriod52.setPeriod(readablePeriod53);
        mutablePeriod52.addWeeks((int) (byte) 10);
        mutablePeriod45.add((org.joda.time.ReadablePeriod) mutablePeriod52);
        boolean boolean59 = mutablePeriod45.equals((java.lang.Object) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0.052S" + "'", str47, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        boolean boolean7 = periodFormatter2.isPrinter();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = periodType25.isSupported(durationFieldType37);
        int int40 = periodType25.size();
        org.joda.time.PeriodType periodType41 = periodType25.withMonthsRemoved();
        org.joda.time.PeriodType periodType42 = periodType41.withYearsRemoved();
        java.lang.String str43 = periodType41.toString();
        org.joda.time.PeriodType periodType44 = periodType41.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod46.addHours(0);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        mutablePeriod46.setPeriod((org.joda.time.ReadableDuration) duration52, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) boolean7, periodType44, chronology66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PeriodType[Years]" + "'", str43, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.withMillis(1644572115768L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration23 = duration14.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        boolean boolean53 = interval38.contains((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.DateTime dateTime67 = interval65.getEnd();
        java.lang.String str68 = dateTime67.toString();
        boolean boolean69 = dateTime52.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration70 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateTime52);
        long long71 = dateTime52.getMillis();
        org.joda.time.Interval interval72 = duration14.toIntervalFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Interval interval73 = duration9.toIntervalFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.time();
        int int76 = periodType75.size();
        org.joda.time.PeriodType periodType77 = periodType75.withYearsRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withHoursRemoved();
        org.joda.time.Period period79 = interval73.toPeriod(periodType77);
        org.joda.time.Period period80 = period79.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-11T09:36:08.146Z" + "'", str68, "2022-02-11T09:36:08.146Z");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(duration70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1644572168146L + "'", long71 == 1644572168146L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getEnd();
        boolean boolean37 = interval22.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.DateTime dateTime51 = interval49.getEnd();
        java.lang.String str52 = dateTime51.toString();
        boolean boolean53 = dateTime36.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime36.getZone();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardMinutes(1644572108797L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        java.lang.String str62 = duration59.toString();
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean65 = periodType63.equals((java.lang.Object) false);
        org.joda.time.Period period66 = duration59.toPeriod(periodType63);
        org.joda.time.PeriodType periodType67 = periodType63.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(periodType67);
        org.joda.time.PeriodType periodType69 = periodType67.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration57, periodType69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(35, (-19), 8, 4, 6, 0, 7, (int) 'a', periodType69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-11T09:36:08.198Z" + "'", str52, "2022-02-11T09:36:08.198Z");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT126000S" + "'", str62, "PT126000S");
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType69);
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.add((long) ' ');
        int int15 = mutablePeriod12.getDays();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        mutablePeriod12.add(durationFieldType16, (int) (byte) 1);
        int int19 = mutablePeriod12.getWeeks();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        boolean boolean40 = mutablePeriod12.isSupported(durationFieldType37);
        int int41 = mutablePeriod3.get(durationFieldType37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod48 = mutablePeriod45.toMutablePeriod();
        int[] intArray49 = mutablePeriod45.getValues();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        boolean boolean66 = duration53.isShorterThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration59.toPeriod(periodType67, chronology68);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        mutablePeriod74.setPeriod(readablePeriod75);
        mutablePeriod74.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.days();
        int int80 = mutablePeriod74.get(durationFieldType79);
        boolean boolean81 = periodType67.isSupported(durationFieldType79);
        mutablePeriod45.set(durationFieldType79, 8);
        int int84 = mutablePeriod3.indexOf(durationFieldType79);
        mutablePeriod3.setYears(10);
        int[] intArray87 = mutablePeriod3.getValues();
        mutablePeriod3.setWeeks((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType91 = mutablePeriod3.getFieldType((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 1, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        mutablePeriod3.setMonths((int) (short) 10);
        mutablePeriod3.setMillis((-1));
        org.joda.time.DurationFieldType[] durationFieldTypeArray40 = mutablePeriod3.getFieldTypes();
        java.lang.Class<?> wildcardClass41 = mutablePeriod3.getClass();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(durationFieldTypeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray40 = mutablePeriod7.getValues();
        org.joda.time.Period period41 = mutablePeriod7.toPeriod();
        org.joda.time.format.PeriodPrinter periodPrinter42 = null;
        org.joda.time.format.PeriodParser periodParser43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = new org.joda.time.format.PeriodFormatter(periodPrinter42, periodParser43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        boolean boolean61 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration54.toPeriod(periodType62, chronology63);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        mutablePeriod69.setPeriod(readablePeriod70);
        mutablePeriod69.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.days();
        int int75 = mutablePeriod69.get(durationFieldType74);
        boolean boolean76 = periodType62.isSupported(durationFieldType74);
        int int77 = periodType62.size();
        org.joda.time.PeriodType periodType78 = periodType62.withMonthsRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter80 = periodFormatter44.withParseType(periodType78);
        org.joda.time.PeriodType periodType81 = periodFormatter80.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((java.lang.Object) period41, periodType81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 42, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodFormatter80);
        org.junit.Assert.assertNotNull(periodType81);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        mutablePeriod3.add(0L);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        int int14 = mutablePeriod3.indexOf(durationFieldType13);
        mutablePeriod3.addHours((int) (short) 1);
        mutablePeriod3.setPeriod(1644572117941L, 1260100L);
        int int20 = mutablePeriod3.getDays();
        mutablePeriod3.add(8, (int) '4', (-51), (int) (short) 10, 0, (int) (short) 10, (int) '4', 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod7.setMillis((int) ' ');
        mutablePeriod7.clear();
        org.junit.Assert.assertNotNull(mutablePeriod18);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        boolean boolean4 = mutablePeriod2.equals((java.lang.Object) "PT0S");
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration8 = org.joda.time.Duration.millis((long) '#');
        boolean boolean9 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getEnd();
        boolean boolean39 = interval24.contains((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getEnd();
        java.lang.String str54 = dateTime53.toString();
        boolean boolean55 = dateTime38.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration58 = duration56.plus((long) (byte) -1);
        boolean boolean59 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration56);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-11T09:36:08.688Z" + "'", str54, "2022-02-11T09:36:08.688Z");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) duration7, chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        boolean boolean12 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        org.joda.time.Duration duration27 = interval24.toDuration();
        boolean boolean28 = duration5.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        long long37 = duration36.getStandardDays();
        org.joda.time.Duration duration38 = duration27.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        mutablePeriod43.setPeriod((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Chronology chronology59 = interval55.getChronology();
        org.joda.time.Period period60 = duration36.toPeriod(chronology59);
        org.joda.time.Period period61 = duration36.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 14L + "'", long37 == 14L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.monthOfYear();
        org.joda.time.Chronology chronology81 = chronology78.withUTC();
        org.joda.time.DateTimeField dateTimeField82 = chronology78.hourOfDay();
        org.joda.time.DurationField durationField83 = durationFieldType59.getField(chronology78);
        org.joda.time.DateTimeField dateTimeField84 = chronology78.dayOfWeek();
        org.joda.time.DurationField durationField85 = chronology78.weeks();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-01-27T19:33:27.307Z/2022-02-11T09:35:07.307Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-27T19:33:27.307Z/2022-02...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        java.lang.String str23 = periodType22.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = periodType22.getFieldType(8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[YearsNoYears]" + "'", str23, "PeriodType[YearsNoYears]");
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        java.lang.Object obj23 = mutablePeriod21.clone();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) duration25, chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        mutablePeriod21.add((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.Duration duration32 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        boolean boolean64 = interval49.contains((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration65 = mutablePeriod36.toDurationTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period66 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration67 = duration32.toDuration();
        org.joda.time.Period period68 = duration67.toPeriod();
        org.joda.time.Days days69 = duration67.toStandardDays();
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(days69);
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        boolean boolean4 = mutablePeriod2.equals((java.lang.Object) "PT0S");
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod14.copy();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = mutablePeriod14.toDurationTo(readableInstant26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology30 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration29, chronology30);
        boolean boolean32 = duration6.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getEnd();
        boolean boolean62 = interval47.contains((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.DateTime dateTime76 = interval74.getEnd();
        java.lang.String str77 = dateTime76.toString();
        boolean boolean78 = dateTime61.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration79 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime61.getZone();
        boolean boolean82 = dateTime61.equals((java.lang.Object) "PT60S");
        org.joda.time.Period period83 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Instant instant84 = dateTime61.toInstant();
        org.joda.time.Duration duration85 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) instant84);
        org.joda.time.Instant instant86 = instant84.toInstant();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-11T09:36:09.023Z" + "'", str77, "2022-02-11T09:36:09.023Z");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(instant86);
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        java.lang.Object obj23 = mutablePeriod21.clone();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) duration25, chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        mutablePeriod21.add((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.Duration duration32 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        boolean boolean64 = interval49.contains((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration65 = mutablePeriod36.toDurationTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period66 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        int int67 = period66.size();
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = periodFormatter2.parsePeriod("PeriodType[DayTime]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.toMutablePeriod();
        int int13 = mutablePeriod12.getSeconds();
        mutablePeriod12.add(2704L);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod12.setMonths((-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        java.lang.String str11 = duration8.toString();
        boolean boolean12 = duration3.equals((java.lang.Object) str11);
        long long13 = duration3.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT126000S" + "'", str11, "PT126000S");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 126000000L + "'", long13 == 126000000L);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        boolean boolean8 = periodFormatter7.isParser();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter7.withLocale(locale9);
        org.joda.time.format.PeriodParser periodParser11 = periodFormatter10.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period13 = periodFormatter10.parsePeriod("PT0.001S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNull(periodParser11);
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        mutablePeriod4.addDays(10);
        mutablePeriod4.setWeeks((int) (byte) -1);
        int[] intArray14 = mutablePeriod4.getValues();
        mutablePeriod4.addHours(0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, -1, 10, 0, 0, 0, 0]");
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod3.addMinutes((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration35 = new org.joda.time.Duration((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        java.lang.String str65 = durationFieldType59.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "days" + "'", str65, "days");
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration18.toPeriod(chronology26);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        mutablePeriod36.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod36.copy();
        org.joda.time.PeriodType periodType48 = mutablePeriod36.getPeriodType();
        org.joda.time.PeriodType periodType49 = periodType48.withWeeksRemoved();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod53.add((long) ' ');
        mutablePeriod53.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutablePeriod62.setPeriod(readablePeriod63);
        mutablePeriod62.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.days();
        int int68 = mutablePeriod62.get(durationFieldType67);
        boolean boolean69 = mutablePeriod53.isSupported(durationFieldType67);
        int int70 = periodType49.indexOf(durationFieldType67);
        boolean boolean71 = mutablePeriod3.isSupported(durationFieldType67);
        mutablePeriod3.clear();
        mutablePeriod3.addDays(340);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        mutablePeriod3.setPeriod((long) 1);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfYear();
        org.joda.time.Chronology chronology25 = chronology21.withUTC();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getEnd();
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = interval37.isBefore(readableInterval40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval40);
        int int43 = mutablePeriod42.getHours();
        mutablePeriod42.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray55 = chronology25.get((org.joda.time.ReadablePeriod) mutablePeriod42, (long) 1, (long) 3);
        org.joda.time.DateTimeField dateTimeField56 = chronology25.dayOfWeek();
        mutablePeriod3.setPeriod(14L, 1644572122264L, chronology25);
        org.joda.time.MutablePeriod mutablePeriod58 = mutablePeriod3.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType60 = mutablePeriod58.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(mutablePeriod58);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (byte) 0, (int) (byte) 0, 0, (int) '#', (int) (short) -1, 3, (int) (short) 1, (int) ' ');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod24.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod24.copy();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = mutablePeriod24.toDurationTo(readableInstant36);
        long long38 = duration37.getStandardSeconds();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod5.add(readablePeriod40);
        mutablePeriod5.setPeriod((-3), 3, 456825, 5, 340, 8, (int) (byte) 100, 4);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 28083659L + "'", long38 == 28083659L);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Duration duration4 = duration2.plus(readableDuration3);
        java.lang.String str5 = duration2.toString();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean8 = periodType6.equals((java.lang.Object) false);
        org.joda.time.Period period9 = duration2.toPeriod(periodType6);
        org.joda.time.PeriodType periodType10 = periodType6.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.PeriodType periodType12 = periodType10.withSecondsRemoved();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 2, periodType10, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = chronology26.getDateTimeMillis((int) (short) 10, (-19), 80, 340, 33, 0, (-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 340 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT126000S" + "'", str5, "PT126000S");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getMinutes();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod8.setMillis((int) (short) 0);
        mutablePeriod8.addMonths((int) (short) 1);
        mutablePeriod8.setMinutes((int) (byte) 1);
        mutablePeriod8.addYears(1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        boolean boolean23 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration20);
        mutablePeriod8.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int28 = duration18.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        org.joda.time.Period period43 = duration27.toPeriodTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration44 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime42);
        java.lang.String str45 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = dateTime42.getChronology();
        org.joda.time.ReadablePartial readablePartial47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = chronology46.get(readablePartial47, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-11T09:36:10.281Z" + "'", str45, "2022-02-11T09:36:10.281Z");
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant11, (org.joda.time.ReadableDuration) duration12, periodType13);
        org.joda.time.Duration duration16 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        org.joda.time.Duration duration17 = duration5.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration21 = duration19.withMillis(126000000L);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod23.addHours(0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Period period42 = interval41.toPeriod();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        mutablePeriod23.setPeriod((org.joda.time.ReadableDuration) duration29, chronology43);
        org.joda.time.Duration duration47 = duration29.withDurationAdded((long) 3, (int) '4');
        boolean boolean48 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        mutablePeriod52.setMillis((int) (short) 0);
        mutablePeriod52.addMonths((int) (short) 1);
        mutablePeriod52.setMinutes((int) (byte) 1);
        mutablePeriod52.setYears((int) (short) 100);
        mutablePeriod52.addDays(1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology69);
        mutablePeriod66.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        java.lang.Object obj72 = mutablePeriod70.clone();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((java.lang.Object) duration74, chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        mutablePeriod70.add((org.joda.time.ReadableInterval) interval78);
        org.joda.time.DateTime dateTime80 = interval78.getStart();
        org.joda.time.Duration duration81 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Duration duration83 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) -1);
        org.joda.time.Duration duration84 = duration5.plus((org.joda.time.ReadableDuration) duration19);
        java.lang.String str85 = duration5.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "PT60S" + "'", str85, "PT60S");
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        boolean boolean8 = periodFormatter7.isParser();
        java.io.Writer writer9 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod13.setMillis((int) (short) 0);
        mutablePeriod13.addMonths((int) (short) 1);
        mutablePeriod13.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = mutablePeriod13.getFieldTypes();
        mutablePeriod13.addMonths(0);
        mutablePeriod13.setMillis((int) (byte) 1);
        mutablePeriod13.setPeriod((long) 8, 126000000L);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter7.printTo(writer9, (org.joda.time.ReadablePeriod) mutablePeriod13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        boolean boolean19 = interval5.overlaps((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.setMillis((int) (short) 0);
        mutablePeriod23.addMonths((int) (short) 1);
        int int28 = mutablePeriod23.size();
        int int29 = mutablePeriod23.getWeeks();
        mutablePeriod23.setYears(8);
        mutablePeriod23.addSeconds(1);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Period period46 = interval45.toPeriod();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        mutablePeriod23.add((org.joda.time.ReadableInterval) interval45);
        boolean boolean49 = interval5.isBefore((org.joda.time.ReadableInterval) interval45);
        long long50 = interval45.toDurationMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1260100000L + "'", long50 == 1260100000L);
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = chronology29.getDateTimeMillis((long) 52, 5, (-51), 80, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -51 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        int int35 = mutablePeriod33.get(durationFieldType34);
        org.joda.time.PeriodType periodType36 = mutablePeriod33.getPeriodType();
        int int37 = mutablePeriod33.getYears();
        org.joda.time.Period period38 = mutablePeriod33.toPeriod();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod39.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod39.add((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod39.add((long) 4);
        int int47 = mutablePeriod39.getMillis();
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod39.setMinutes(4);
        java.lang.Object obj51 = mutablePeriod39.clone();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "PT4M0.014S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "PT4M0.014S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "PT4M0.014S");
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        org.joda.time.Chronology chronology1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-11T09:36:10.346Z", chronology1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:36:10.346Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.monthOfYear();
        long long22 = chronology13.add((long) ' ', 1644572125205L, 51);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 83873178385487L + "'", long22 == 83873178385487L);
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        int int35 = mutablePeriod33.get(durationFieldType34);
        int int36 = mutablePeriod33.size();
        mutablePeriod33.addSeconds(7);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        java.lang.String str43 = duration40.toString();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean46 = periodType44.equals((java.lang.Object) false);
        org.joda.time.Period period47 = duration40.toPeriod(periodType44);
        org.joda.time.PeriodType periodType48 = periodType44.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(periodType48);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod51.addHours(0);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        boolean boolean55 = mutablePeriod51.isSupported(durationFieldType54);
        boolean boolean56 = mutablePeriod49.isSupported(durationFieldType54);
        int int57 = mutablePeriod33.get(durationFieldType54);
        mutablePeriod33.addMonths((int) (short) 1);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT126000S" + "'", str43, "PT126000S");
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:38.568Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:38.568Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:57.776Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:57.776Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = mutablePeriod7.getFieldTypes();
        mutablePeriod7.addHours((int) (short) 0);
        mutablePeriod7.addDays((int) (byte) -1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod13.add((long) ' ');
        int int16 = mutablePeriod13.getDays();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.millis();
        mutablePeriod13.add(durationFieldType17, (int) (byte) 1);
        boolean boolean20 = mutablePeriod4.equals((java.lang.Object) durationFieldType17);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setValue((-3), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addHours((int) (short) 1);
        int int45 = mutablePeriod15.getMinutes();
        mutablePeriod15.setYears(32);
        mutablePeriod15.addYears(0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutablePeriod13.setPeriod(readablePeriod14);
        mutablePeriod13.addWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        java.lang.Object obj27 = mutablePeriod25.clone();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((java.lang.Object) duration29, chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        mutablePeriod25.add((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        boolean boolean36 = mutablePeriod13.equals((java.lang.Object) interval33);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter7.printTo(stringBuffer8, (org.joda.time.ReadablePeriod) mutablePeriod13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setDays((int) (byte) 0);
        mutablePeriod5.setSeconds(8);
        mutablePeriod5.setYears(32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        int int25 = mutablePeriod24.getYears();
        java.lang.String str26 = mutablePeriod24.toString();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutablePeriod31.setPeriod(readablePeriod32);
        mutablePeriod31.addWeeks((int) (byte) 10);
        mutablePeriod24.add((org.joda.time.ReadablePeriod) mutablePeriod31);
        boolean boolean38 = mutablePeriod24.equals((java.lang.Object) (-1.0f));
        mutablePeriod24.setMinutes((int) (short) 1);
        int int41 = mutablePeriod24.getHours();
        int[] intArray43 = chronology18.get((org.joda.time.ReadablePeriod) mutablePeriod24, 1643312029209L);
        org.joda.time.ReadablePartial readablePartial44 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = chronology18.get(readablePartial44, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.052S" + "'", str26, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 2717, 0, 19, 33, 49, 209]");
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572115768L);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = mutablePeriod1.getValue((-53));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Hours hours64 = duration63.toStandardHours();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Duration duration66 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant65, (org.joda.time.ReadableDuration) duration66, periodType67);
        org.joda.time.Duration duration70 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration66, 10);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration66);
        int[] intArray72 = mutablePeriod71.getValues();
        java.lang.String str73 = mutablePeriod71.toString();
        mutablePeriod71.setPeriod(35, 14, (int) (byte) 0, (int) '4', 2, 100, (int) '4', (int) '#');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(hours64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT0S" + "'", str73, "PT0S");
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        boolean boolean53 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((long) (-1), (-1));
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        boolean boolean73 = duration60.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration66.toPeriod(periodType74, chronology75);
        org.joda.time.PeriodType periodType77 = periodType74.withYearsRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withDaysRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration50, periodType79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        boolean boolean82 = dateTime41.isSupported(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:36:11.745Z" + "'", str42, "2022-02-11T09:36:11.745Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str23 = durationFieldType22.toString();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.secondOfMinute();
        org.joda.time.DurationField durationField42 = chronology37.months();
        boolean boolean43 = durationFieldType22.isSupported(chronology37);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1644572139095L, periodType21, chronology37);
        org.joda.time.DateTimeField dateTimeField45 = chronology37.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial46 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutablePeriod51.setPeriod(readablePeriod52);
        mutablePeriod51.addWeeks((int) (byte) 10);
        int int56 = mutablePeriod51.getMonths();
        mutablePeriod51.addDays(10);
        mutablePeriod51.setWeeks((int) (byte) -1);
        int[] intArray61 = mutablePeriod51.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology37.validate(readablePartial46, intArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyears" + "'", str23, "weekyears");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, -1, 10, 0, 0, 0, 0]");
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        java.lang.String str14 = duration12.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        java.lang.Object obj24 = mutablePeriod22.clone();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) duration26, chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        mutablePeriod22.add((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.Chronology chronology33 = interval30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((java.lang.Object) duration12, chronology33);
        long long36 = duration12.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT6000S" + "'", str14, "PT6000S");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 6000000L + "'", long36 == 6000000L);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.withMillis(1644572115768L);
        long long13 = duration12.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644572115L + "'", long13 == 1644572115L);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.weekyear();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration41 = new org.joda.time.Duration((java.lang.Object) chronology34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod2.addHours(0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration8, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType0.getField(chronology22);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod34.addHours(10);
        int[] intArray39 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (short) 100, 1260100000L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        java.lang.Object obj49 = mutablePeriod47.clone();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) duration51, chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        mutablePeriod47.add((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Interval interval57 = interval55.toInterval();
        mutablePeriod34.setPeriod((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean62 = periodType60.equals((java.lang.Object) false);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Period period75 = interval74.toPeriod();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(1L, periodType60, chronology76);
        org.joda.time.MutablePeriod mutablePeriod78 = mutablePeriod77.toMutablePeriod();
        boolean boolean79 = interval57.equals((java.lang.Object) mutablePeriod77);
        org.joda.time.MutablePeriod mutablePeriod80 = mutablePeriod77.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod80.addMinutes((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 2, 0, 14, 1, 39, 900]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mutablePeriod80);
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) duration7, chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        boolean boolean12 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        org.joda.time.Duration duration27 = interval24.toDuration();
        boolean boolean28 = duration5.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        long long37 = duration36.getStandardDays();
        org.joda.time.Duration duration38 = duration27.plus((org.joda.time.ReadableDuration) duration36);
        java.lang.String str39 = duration36.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 14L + "'", long37 == 14L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT1260100S" + "'", str39, "PT1260100S");
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getEnd();
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        boolean boolean80 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration73.toPeriod(periodType81, chronology82);
        org.joda.time.PeriodType periodType84 = periodType81.withYearsRemoved();
        org.joda.time.PeriodType periodType85 = periodType84.withDaysRemoved();
        org.joda.time.PeriodType periodType86 = periodType85.withSecondsRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime62, periodType86);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = mutablePeriod88.getValue(340);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 340");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-11T09:36:12.523Z" + "'", str63, "2022-02-11T09:36:12.523Z");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        boolean boolean21 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration14.toPeriod(periodType22, chronology23);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.days();
        int int35 = mutablePeriod29.get(durationFieldType34);
        boolean boolean36 = periodType22.isSupported(durationFieldType34);
        int int37 = periodType22.size();
        org.joda.time.PeriodType periodType38 = periodType22.withMonthsRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter4.withParseType(periodType38);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(126000L, 1644572114290L, periodType38);
        java.lang.Class<?> wildcardClass42 = periodType38.getClass();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration3.withMillis((long) (-1));
        long long6 = duration5.getStandardDays();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getEnd();
        boolean boolean34 = interval19.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        boolean boolean51 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Minutes minutes52 = duration38.toStandardMinutes();
        org.joda.time.Duration duration54 = duration38.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration58 = duration38.withDurationAdded((long) (short) -1, 8);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Period period71 = interval70.toPeriod();
        org.joda.time.Chronology chronology72 = interval70.getChronology();
        org.joda.time.Duration duration73 = interval70.toDuration();
        org.joda.time.Duration duration75 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) ' ');
        org.joda.time.Duration duration77 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration73, 35);
        long long78 = duration5.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Minutes minutes17 = duration3.toStandardMinutes();
        org.joda.time.Duration duration19 = duration3.plus((long) 8);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object) duration21, chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Period period38 = interval37.toPeriod();
        boolean boolean39 = interval25.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        mutablePeriod43.add((long) ' ');
        int int46 = mutablePeriod43.getDays();
        mutablePeriod43.setMillis((int) (byte) -1);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getEnd();
        boolean boolean76 = interval61.contains((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Duration duration82 = duration80.plus(readableDuration81);
        org.joda.time.Duration duration84 = duration78.withDurationAdded((org.joda.time.ReadableDuration) duration80, (int) (byte) 10);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Period period86 = duration84.toPeriod(chronology85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Interval interval88 = duration84.toIntervalTo(readableInstant87);
        org.joda.time.Interval interval89 = interval88.toInterval();
        org.joda.time.DateTime dateTime90 = interval88.getEnd();
        java.lang.String str91 = dateTime90.toString();
        boolean boolean92 = dateTime75.isBefore((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Duration duration93 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateTime90);
        boolean boolean94 = interval37.isAfter((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.PeriodType periodType95 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime90, periodType95);
        mutablePeriod96.setMillis((int) '#');
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(dateTime90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2022-02-11T09:36:12.814Z" + "'", str91, "2022-02-11T09:36:12.814Z");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(periodType95);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str23 = durationFieldType22.toString();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.secondOfMinute();
        org.joda.time.DurationField durationField42 = chronology37.months();
        boolean boolean43 = durationFieldType22.isSupported(chronology37);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1644572139095L, periodType21, chronology37);
        org.joda.time.DateTimeField dateTimeField45 = chronology37.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial46 = null;
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Period period61 = interval60.toPeriod();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.days();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology62);
        int int68 = mutablePeriod67.getMonths();
        int[] intArray69 = mutablePeriod67.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology37.validate(readablePartial46, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyears" + "'", str23, "weekyears");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        java.lang.String str11 = duration8.toString();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean14 = periodType12.equals((java.lang.Object) false);
        org.joda.time.Period period15 = duration8.toPeriod(periodType12);
        org.joda.time.PeriodType periodType16 = periodType12.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        boolean boolean18 = periodType12.equals((java.lang.Object) periodType17);
        org.joda.time.PeriodType periodType19 = periodType12.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        boolean boolean21 = periodType12.isSupported(durationFieldType20);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withParseType(periodType12);
        java.util.Locale locale23 = periodFormatter2.getLocale();
        java.lang.StringBuffer stringBuffer24 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod28.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer24, (org.joda.time.ReadablePeriod) mutablePeriod28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT126000S" + "'", str11, "PT126000S");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertNotNull(mutablePeriod31);
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = mutablePeriod10.getFieldType(456825);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.addHours(0);
        mutablePeriod3.setWeeks((int) '4');
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType16 = mutablePeriod3.getFieldType(51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration13);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod10.setMonths((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod10.copy();
        org.joda.time.PeriodType periodType22 = mutablePeriod10.getPeriodType();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod27.add((long) ' ');
        mutablePeriod27.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutablePeriod36.setPeriod(readablePeriod37);
        mutablePeriod36.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.days();
        int int42 = mutablePeriod36.get(durationFieldType41);
        boolean boolean43 = mutablePeriod27.isSupported(durationFieldType41);
        int int44 = periodType23.indexOf(durationFieldType41);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((java.lang.Object) duration2, periodType23, chronology58);
        java.lang.String str60 = periodType23.getName();
        org.joda.time.PeriodType periodType61 = periodType23.withHoursRemoved();
        java.lang.String str62 = periodType23.getName();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        java.lang.String str67 = duration64.toString();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean70 = periodType68.equals((java.lang.Object) false);
        org.joda.time.Period period71 = duration64.toPeriod(periodType68);
        org.joda.time.PeriodType periodType72 = periodType68.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(periodType72);
        org.joda.time.MutablePeriod mutablePeriod74 = mutablePeriod73.toMutablePeriod();
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Period period88 = interval87.toPeriod();
        org.joda.time.Chronology chronology89 = interval87.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.hourOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology89.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField92 = chronology89.dayOfYear();
        org.joda.time.DateTimeField dateTimeField93 = chronology89.secondOfMinute();
        org.joda.time.DurationField durationField94 = chronology89.weekyears();
        org.joda.time.DurationField durationField95 = chronology89.millis();
        org.joda.time.DateTimeField dateTimeField96 = chronology89.dayOfMonth();
        mutablePeriod74.add((long) 3, chronology89);
        org.joda.time.MutablePeriod mutablePeriod98 = new org.joda.time.MutablePeriod(1644572155419L, periodType23, chronology89);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "StandardNoWeeks" + "'", str60, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "StandardNoWeeks" + "'", str62, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PT126000S" + "'", str67, "PT126000S");
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1644572140503L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = mutablePeriod5.toDurationFrom(readableInstant6);
        org.joda.time.Days days8 = duration7.toStandardDays();
        boolean boolean9 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration7);
        java.lang.Object obj10 = null;
        boolean boolean11 = duration7.equals(obj10);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod20.clear();
        mutablePeriod20.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType30 = null;
        boolean boolean31 = mutablePeriod20.isSupported(durationFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology34);
        int int36 = mutablePeriod35.getWeeks();
        mutablePeriod20.add((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod35.setWeeks((int) (short) 100);
        java.lang.String str40 = mutablePeriod35.toString();
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod35, 28083659L, 60000L);
        mutablePeriod35.setHours((int) ' ');
        mutablePeriod35.setSeconds((int) (short) 0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "P100WT0.087S" + "'", str40, "P100WT0.087S");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, -7, -47, -3, -659]");
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.addHours(0);
        mutablePeriod3.setWeeks((int) '4');
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod13.addHours(0);
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = mutablePeriod13.get(durationFieldType16);
        mutablePeriod13.addHours((int) 'a');
        mutablePeriod13.addMillis(1);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType24 = mutablePeriod13.getFieldType(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutablePeriod44.setPeriod(readablePeriod45);
        mutablePeriod44.addWeeks((int) (byte) 10);
        int int49 = mutablePeriod44.getMonths();
        int int50 = mutablePeriod44.size();
        mutablePeriod44.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod44.toMutablePeriod();
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0, (int) (byte) 100, (int) (short) 100, 0, (int) (byte) 1, 0, (int) 'a', (int) (short) -1);
        mutablePeriod63.setHours(340);
        mutablePeriod29.add((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod53);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.add(durationFieldType28, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationFieldType28);
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod18.toMutablePeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((long) 2);
        boolean boolean24 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration23);
        mutablePeriod19.add((org.joda.time.ReadableDuration) duration23);
        mutablePeriod19.addMinutes((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = mutablePeriod19.getValue(658);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 658");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-01-27T19:34:16.204Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-27T19:34:16.204Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DurationField durationField19 = chronology15.days();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology15.getDateTimeMillis((-19), (int) (byte) 0, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(100000L, chronology14);
        java.lang.String str20 = mutablePeriod19.toString();
        mutablePeriod19.setYears(0);
        mutablePeriod19.setSeconds(1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        mutablePeriod32.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        mutablePeriod46.clear();
        mutablePeriod46.setValue((int) (byte) 0, (-1));
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod46, chronology57);
        mutablePeriod58.setSeconds((int) '4');
        mutablePeriod58.addHours(100);
        mutablePeriod19.add((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod58.setWeeks(0);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.days();
        java.lang.String str67 = periodType66.getName();
        org.joda.time.PeriodType periodType68 = periodType66.withSecondsRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((java.lang.Object) 0, periodType69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT1M40S" + "'", str20, "PT1M40S");
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Days" + "'", str67, "Days");
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.setMinutes((int) ' ');
        mutablePeriod4.setYears(0);
        java.lang.String str11 = mutablePeriod4.toString();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Period period25 = interval23.toPeriod();
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = interval23.contains(readableInterval26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        java.lang.Object obj37 = mutablePeriod35.clone();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((java.lang.Object) duration39, chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod49.setMillis((int) (short) 0);
        mutablePeriod49.addMonths((int) (short) 1);
        int int54 = mutablePeriod49.size();
        int int55 = mutablePeriod49.getWeeks();
        mutablePeriod49.setYears(8);
        mutablePeriod49.addSeconds(1);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Period period72 = interval71.toPeriod();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        mutablePeriod49.add((org.joda.time.ReadableInterval) interval71);
        boolean boolean75 = interval43.contains((org.joda.time.ReadableInterval) interval71);
        boolean boolean76 = interval23.isBefore((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Period period77 = interval23.toPeriod();
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval23);
        mutablePeriod4.setMillis(14);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT32M" + "'", str11, "PT32M");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod13.addHours(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration19, chronology33);
        java.lang.String str35 = chronology33.toString();
        mutablePeriod3.add((long) 2, chronology33);
        mutablePeriod3.addSeconds(3);
        int int39 = mutablePeriod3.getYears();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod13.addHours(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration19, chronology33);
        java.lang.String str35 = chronology33.toString();
        mutablePeriod3.add((long) 2, chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.minuteOfDay();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod7.add((int) '#', 0, (int) (short) 10, (int) (short) 100, (int) '#', (int) (short) 100, 0, (-1));
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod7.toMutablePeriod();
        mutablePeriod41.setMinutes(2);
        org.junit.Assert.assertNotNull(mutablePeriod41);
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        mutablePeriod4.addDays((int) (short) -1);
        int int15 = mutablePeriod4.getDays();
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getEnd();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration30 = duration21.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean33 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration44 = duration35.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        boolean boolean74 = interval59.contains((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = duration76.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Period period84 = duration82.toPeriod(chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        org.joda.time.Interval interval87 = interval86.toInterval();
        org.joda.time.DateTime dateTime88 = interval86.getEnd();
        java.lang.String str89 = dateTime88.toString();
        boolean boolean90 = dateTime73.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Duration duration91 = mutablePeriod46.toDurationFrom((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTimeZone dateTimeZone92 = dateTime73.getZone();
        org.joda.time.Period period93 = duration43.toPeriodTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Instant instant94 = dateTime73.toInstant();
        org.joda.time.DateTimeZone dateTimeZone95 = instant94.getZone();
        org.joda.time.Period period96 = duration30.toPeriodTo((org.joda.time.ReadableInstant) instant94);
        boolean boolean97 = interval16.contains((org.joda.time.ReadableInstant) instant94);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-11T09:36:14.139Z" + "'", str89, "2022-02-11T09:36:14.139Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration32 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = mutablePeriod3.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue(100, (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setPeriod(36000000L, 1644572154994L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:36.302Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:36.302Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        boolean boolean4 = mutablePeriod2.equals((java.lang.Object) "PT0S");
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod14.copy();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = mutablePeriod14.toDurationTo(readableInstant26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology30 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration29, chronology30);
        boolean boolean32 = duration6.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getEnd();
        boolean boolean62 = interval47.contains((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.DateTime dateTime76 = interval74.getEnd();
        java.lang.String str77 = dateTime76.toString();
        boolean boolean78 = dateTime61.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration79 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime61.getZone();
        boolean boolean82 = dateTime61.equals((java.lang.Object) "PT60S");
        org.joda.time.Period period83 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Instant instant84 = dateTime61.toInstant();
        org.joda.time.Duration duration85 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) instant84);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.addHours((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-11T09:36:14.744Z" + "'", str77, "2022-02-11T09:36:14.744Z");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.monthOfYear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType14, chronology36);
        java.lang.String str40 = chronology36.toString();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1644572123588L, (long) 4, chronology36);
        org.joda.time.DateTimeField dateTimeField42 = chronology36.year();
        org.joda.time.ReadablePartial readablePartial43 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long45 = chronology36.set(readablePartial43, 1644572164498L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str40, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addSeconds((int) '#');
        mutablePeriod1.addMinutes(32);
        mutablePeriod1.setValue(3, 3);
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        boolean boolean42 = interval27.contains((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        java.lang.String str57 = dateTime56.toString();
        boolean boolean58 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime41.getZone();
        org.joda.time.Period period61 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period62 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Instant instant63 = dateTime41.toInstant();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Interval interval76 = interval75.toInterval();
        org.joda.time.DateTime dateTime77 = interval75.getEnd();
        java.lang.String str78 = dateTime77.toString();
        org.joda.time.ReadableInstant readableInstant79 = null;
        boolean boolean80 = dateTime77.isEqual(readableInstant79);
        java.lang.Object obj81 = null;
        boolean boolean82 = dateTime77.equals(obj81);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        java.lang.String str87 = duration84.toString();
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean90 = periodType88.equals((java.lang.Object) false);
        org.joda.time.Period period91 = duration84.toPeriod(periodType88);
        org.joda.time.PeriodType periodType92 = periodType88.withMillisRemoved();
        org.joda.time.PeriodType periodType93 = org.joda.time.PeriodType.days();
        boolean boolean94 = periodType88.equals((java.lang.Object) periodType93);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) dateTime77, periodType88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration96 = new org.joda.time.Duration((java.lang.Object) instant63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:36:14.898Z" + "'", str57, "2022-02-11T09:36:14.898Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-11T09:36:14.898Z" + "'", str78, "2022-02-11T09:36:14.898Z");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PT126000S" + "'", str87, "PT126000S");
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.withMillis(126000000L);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        org.joda.time.Duration duration29 = duration11.withDurationAdded((long) 3, (int) '4');
        boolean boolean30 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.setMillis((int) (short) 0);
        mutablePeriod34.addMonths((int) (short) 1);
        mutablePeriod34.setMinutes((int) (byte) 1);
        mutablePeriod34.setYears((int) (short) 100);
        mutablePeriod34.addDays(1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        java.lang.Object obj54 = mutablePeriod52.clone();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration56, chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        mutablePeriod52.add((org.joda.time.ReadableInterval) interval60);
        org.joda.time.DateTime dateTime62 = interval60.getStart();
        org.joda.time.Duration duration63 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration65 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) -1);
        org.joda.time.Days days66 = duration63.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(days66);
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1644572128330L);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod7, "2022-01-27T19:34:07.205Z/2022-02-11T09:35:47.205Z", 35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod9.addHours(0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration15, chronology29);
        org.joda.time.Duration duration33 = duration15.withDurationAdded((long) 3, (int) '4');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration35 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant34, (org.joda.time.ReadableDuration) duration35, periodType36);
        boolean boolean38 = duration15.isEqual((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration40 = duration15.withMillis((long) (byte) 10);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getEnd();
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = mutablePeriod63.getFieldTypes();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.forFields(durationFieldTypeArray65);
        org.joda.time.PeriodType periodType67 = periodType66.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime54, periodType66);
        org.joda.time.PeriodType periodType69 = periodType66.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(456825, 51, (int) (short) 100, 10, 52, (-52), 3, 5, periodType66);
        mutablePeriod70.clear();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:36:15.092Z" + "'", str55, "2022-02-11T09:36:15.092Z");
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType69);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-51), 8, (int) (short) 100, 100);
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant40, readableInstant41);
        mutablePeriod42.addWeeks((int) 'a');
        mutablePeriod23.add((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.seconds();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        boolean boolean63 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration56.toPeriod(periodType64, chronology65);
        org.joda.time.PeriodType periodType67 = periodType64.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.months();
        int int69 = periodType67.indexOf(durationFieldType68);
        int int70 = periodType46.indexOf(durationFieldType68);
        mutablePeriod23.add(durationFieldType68, (int) (byte) -1);
        int int73 = mutablePeriod7.get(durationFieldType68);
        mutablePeriod7.addSeconds((int) 'a');
        mutablePeriod7.setPeriod(1643312029209L, 1644572156012L);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getEnd();
        boolean boolean41 = interval26.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        java.lang.String str56 = dateTime55.toString();
        boolean boolean57 = dateTime40.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int60 = dateTime13.get(dateTimeFieldType59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:36:15.297Z" + "'", str56, "2022-02-11T09:36:15.297Z");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        java.util.Locale locale7 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser8 = periodFormatter2.getParser();
        boolean boolean9 = periodFormatter2.isPrinter();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod13.setMillis((int) (short) 0);
        mutablePeriod13.addMonths((int) (short) 1);
        mutablePeriod13.setMinutes((int) (byte) 1);
        mutablePeriod13.addYears(1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        boolean boolean28 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration25);
        mutablePeriod13.add((org.joda.time.ReadableDuration) duration23);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod13, "2022-02-11T09:35:46.129Z", 7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNull(periodParser8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.hours();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withParseType(periodType4);
        org.joda.time.PeriodType periodType7 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter2.withParseType(periodType8);
        java.io.Writer writer10 = null;
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Hours hours15 = duration14.toStandardHours();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        boolean boolean20 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        int int31 = duration17.compareTo((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        boolean boolean73 = interval58.contains((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        java.lang.String str88 = dateTime87.toString();
        boolean boolean89 = dateTime72.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime45);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer10, (org.joda.time.ReadablePeriod) mutablePeriod91);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Hours" + "'", str5, "Hours");
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-11T09:36:15.545Z" + "'", str88, "2022-02-11T09:36:15.545Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572153833L);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.eras();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.add(durationFieldType2, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'eras'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Period period21 = mutablePeriod10.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        mutablePeriod22.setHours(51);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.setMillis((int) (short) 0);
        mutablePeriod28.addMonths((int) (short) 1);
        mutablePeriod28.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        mutablePeriod28.add(durationFieldType44, (int) '#');
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.MutablePeriod mutablePeriod58 = mutablePeriod28.copy();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.weeks();
        int int60 = mutablePeriod58.get(durationFieldType59);
        org.joda.time.PeriodType periodType61 = mutablePeriod58.getPeriodType();
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = mutablePeriod22.getFieldTypes();
        mutablePeriod22.addSeconds((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        int[] intArray2 = mutablePeriod1.getValues();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setMillis(51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0]");
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField20 = chronology15.months();
        boolean boolean21 = durationFieldType0.isSupported(chronology15);
        org.joda.time.Chronology chronology22 = chronology15.withUTC();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572154810L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572154810 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod3.setPeriod(1643312042546L);
        java.lang.Class<?> wildcardClass8 = mutablePeriod3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod13.addHours(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration19, chronology33);
        java.lang.String str35 = chronology33.toString();
        mutablePeriod3.add((long) 2, chronology33);
        mutablePeriod3.addSeconds(3);
        int int39 = mutablePeriod3.size();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withSecondsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, periodType3);
        mutablePeriod6.setPeriod(42L, (long) (-3));
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod6.setMinutes((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Days" + "'", str2, "Days");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod13.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DurationFieldType[] durationFieldTypeArray19 = mutablePeriod17.getFieldTypes();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.forFields(durationFieldTypeArray19);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod22.addHours(0);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration28, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType20, chronology42);
        org.joda.time.PeriodType periodType46 = periodType20.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(4, (int) (byte) 100, (-19), 5, 32, 4, 7, (int) (byte) 0, periodType20);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str49 = durationFieldType48.getName();
        java.lang.String str50 = durationFieldType48.toString();
        int int51 = periodType20.indexOf(durationFieldType48);
        org.junit.Assert.assertNotNull(durationFieldTypeArray19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "seconds" + "'", str49, "seconds");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "seconds" + "'", str50, "seconds");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        int int11 = mutablePeriod10.getYears();
        java.lang.String str12 = mutablePeriod10.toString();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutablePeriod17.setPeriod(readablePeriod18);
        mutablePeriod17.addWeeks((int) (byte) 10);
        mutablePeriod10.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        boolean boolean24 = mutablePeriod10.equals((java.lang.Object) (-1.0f));
        mutablePeriod10.addMillis((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.052S" + "'", str12, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod18.addMillis((int) (byte) 100);
        mutablePeriod18.setMinutes((int) (short) 10);
        mutablePeriod18.setSeconds((int) (short) 100);
        org.junit.Assert.assertNotNull(mutablePeriod18);
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        mutablePeriod21.clear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod39.clear();
        mutablePeriod39.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType49 = null;
        boolean boolean50 = mutablePeriod39.isSupported(durationFieldType49);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Period period64 = interval63.toPeriod();
        org.joda.time.Chronology chronology65 = interval63.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.hourOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekyearOfCentury();
        mutablePeriod39.add((long) (short) 100, chronology65);
        org.joda.time.DurationField durationField69 = chronology65.halfdays();
        org.joda.time.DateTimeField dateTimeField70 = chronology65.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField71 = chronology65.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField72 = chronology65.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField73 = chronology65.weekOfWeekyear();
        mutablePeriod21.setPeriod((long) '4', chronology65);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.dayOfMonth();
        org.joda.time.Chronology chronology34 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, 28083659L, chronology29);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod36);
        mutablePeriod36.addSeconds(18);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withDaysRemoved();
        org.joda.time.PeriodType periodType30 = periodType29.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1644572123588L, periodType30);
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter6.withParseType(periodType30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod36.setMillis((int) (short) 0);
        mutablePeriod36.addMonths((int) (short) 1);
        mutablePeriod36.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray43 = mutablePeriod36.getFieldTypes();
        mutablePeriod36.addMonths(0);
        org.joda.time.Period period46 = mutablePeriod36.toPeriod();
        mutablePeriod36.addMonths((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = periodFormatter6.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod36, "", 340);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertNotNull(durationFieldTypeArray43);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) duration10, chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = mutablePeriod12.toDurationFrom(readableInstant13);
        org.joda.time.Days days15 = duration14.toStandardDays();
        org.joda.time.Days days16 = duration14.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter7.printTo(stringBuffer8, (org.joda.time.ReadablePeriod) days16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.add((long) ' ');
        mutablePeriod14.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod14.isSupported(durationFieldType28);
        boolean boolean31 = mutablePeriod3.isSupported(durationFieldType28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = mutablePeriod3.toDurationTo(readableInstant32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        boolean boolean61 = interval46.contains((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        org.joda.time.Duration duration88 = interval85.toDuration();
        boolean boolean89 = interval73.overlaps((org.joda.time.ReadableInterval) interval85);
        boolean boolean90 = interval46.isBefore((org.joda.time.ReadableInterval) interval73);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration92 = interval46.toDuration();
        org.joda.time.DateTime dateTime93 = interval46.getStart();
        long long94 = interval46.getStartMillis();
        java.lang.String str95 = interval46.toString();
        org.joda.time.Duration duration96 = interval46.toDuration();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(dateTime93);
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1643312076539L + "'", long94 == 1643312076539L);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-01-27T19:34:36.539Z/2022-02-11T09:36:16.539Z" + "'", str95, "2022-01-27T19:34:36.539Z/2022-02-11T09:36:16.539Z");
        org.junit.Assert.assertNotNull(duration96);
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        int int34 = periodType17.indexOf(durationFieldType33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod36.addHours(0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        mutablePeriod36.setPeriod((org.joda.time.ReadableDuration) duration42, chronology56);
        org.joda.time.DurationField durationField58 = durationFieldType33.getField(chronology56);
        org.joda.time.DurationField durationField59 = chronology56.seconds();
        org.joda.time.DurationField durationField60 = chronology56.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long65 = chronology56.getDateTimeMillis((int) (short) 1, (-19), (int) 'a', 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod2.addHours(0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration8, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType0.getField(chronology22);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod34.addHours(10);
        int[] intArray39 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (short) 100, 1260100000L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        java.lang.Object obj49 = mutablePeriod47.clone();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) duration51, chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        mutablePeriod47.add((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Interval interval57 = interval55.toInterval();
        mutablePeriod34.setPeriod((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean62 = periodType60.equals((java.lang.Object) false);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Period period75 = interval74.toPeriod();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(1L, periodType60, chronology76);
        org.joda.time.MutablePeriod mutablePeriod78 = mutablePeriod77.toMutablePeriod();
        boolean boolean79 = interval57.equals((java.lang.Object) mutablePeriod77);
        mutablePeriod77.addWeeks((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod77.setMillis(33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 2, 0, 14, 1, 39, 900]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.PeriodType periodType6 = mutablePeriod3.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withWeeksRemoved();
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        boolean boolean27 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration22, chronology28);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod20.setValue((int) (byte) 10, 456825);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getEnd();
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = interval30.isBefore(readableInterval33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval33);
        int int36 = mutablePeriod35.getHours();
        mutablePeriod35.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray48 = chronology18.get((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 1, (long) 3);
        org.joda.time.DurationField durationField49 = chronology18.hours();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) (short) 100, chronology18);
        org.joda.time.DateTimeField dateTimeField51 = chronology18.dayOfYear();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = periodType25.isSupported(durationFieldType37);
        org.joda.time.PeriodType periodType40 = periodType25.withHoursRemoved();
        int int41 = periodType40.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(80, 0, (-1), (int) (byte) 10, 32, 10, 456825, 340, periodType40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1644572151968L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration1.minus(1644572139243L);
        org.joda.time.ReadableDuration readableDuration6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = duration1.compareTo(readableDuration6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, periodType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(2, 51, (int) 'a', 6, (int) '4', (int) (byte) 0, 0, (int) (byte) -1, periodType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.hours();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withParseType(periodType4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod8 = periodFormatter6.parseMutablePeriod("2022-02-11T09:35:12.952Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Hours" + "'", str5, "Hours");
        org.junit.Assert.assertNotNull(periodFormatter6);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        mutablePeriod3.clear();
        int int16 = mutablePeriod3.getHours();
        mutablePeriod3.addMinutes(3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod8.copy();
        org.joda.time.PeriodType periodType20 = mutablePeriod8.getPeriodType();
        boolean boolean21 = periodType0.equals((java.lang.Object) mutablePeriod8);
        org.joda.time.PeriodType periodType22 = periodType0.withHoursRemoved();
        java.lang.String str23 = periodType0.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[Time]" + "'", str23, "PeriodType[Time]");
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:27.538Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:27.538Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        boolean boolean12 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        org.joda.time.Interval interval27 = duration5.toIntervalFrom((org.joda.time.ReadableInstant) dateTime26);
        java.lang.String str28 = dateTime26.toString();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime42);
        mutablePeriod43.setPeriod(1644572118532L);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod43.setValue((-52), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:36:17.795Z" + "'", str28, "2022-02-11T09:36:17.795Z");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isPrinter();
        java.util.Locale locale6 = periodFormatter2.getLocale();
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) ' ');
        org.joda.time.Duration duration13 = duration10.withDurationAdded((long) 340, (-51));
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        java.lang.String str26 = duration21.toString();
        org.joda.time.Period period27 = duration21.toPeriod();
        org.joda.time.Duration duration28 = duration13.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant8, (org.joda.time.ReadableDuration) duration21);
        int int30 = mutablePeriod29.getYears();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer7, (org.joda.time.ReadablePeriod) mutablePeriod29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT1260100S" + "'", str26, "PT1260100S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        mutablePeriod4.addDays((int) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.Object obj26 = mutablePeriod24.clone();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.Chronology chronology35 = interval32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        mutablePeriod4.setPeriod((long) 100, (long) 3, chronology35);
        org.joda.time.ReadablePartial readablePartial38 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = chronology35.get(readablePartial38, 1643312036835L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        java.lang.String str38 = chronology34.toString();
        org.joda.time.DurationField durationField39 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.millisOfDay();
        org.joda.time.DurationField durationField42 = chronology34.seconds();
        org.joda.time.DurationField durationField43 = chronology34.millis();
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str38, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(100000L);
        org.joda.time.Duration duration3 = new org.joda.time.Duration(10L);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = duration3.plus((long) (-53));
        long long8 = duration7.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        java.lang.String str38 = chronology34.toString();
        org.joda.time.DurationField durationField39 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.millisOfDay();
        org.joda.time.DurationField durationField42 = chronology34.seconds();
        org.joda.time.ReadablePartial readablePartial43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray45 = chronology34.get(readablePartial43, 1644572115L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str38, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(readableInstant2, readableInstant3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        boolean boolean32 = interval17.contains((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getEnd();
        java.lang.String str47 = dateTime46.toString();
        boolean boolean48 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Hours hours53 = duration52.toStandardHours();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        boolean boolean58 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((long) (-1), (-1));
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Duration duration75 = duration73.plus(readableDuration74);
        org.joda.time.Duration duration77 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) (byte) 10);
        boolean boolean78 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration71.toPeriod(periodType79, chronology80);
        org.joda.time.PeriodType periodType82 = periodType79.withYearsRemoved();
        org.joda.time.PeriodType periodType83 = periodType82.withDaysRemoved();
        org.joda.time.PeriodType periodType84 = periodType83.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration55, periodType84);
        org.joda.time.Period period86 = duration4.toPeriod(periodType84);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 52, (-156L), periodType84);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T09:36:18.079Z" + "'", str47, "2022-02-11T09:36:18.079Z");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        org.joda.time.DurationField durationField77 = chronology74.minutes();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.dayOfYear();
        org.joda.time.DateTimeField dateTimeField79 = chronology74.millisOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology74.weekyear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:36:18.229Z" + "'", str42, "2022-02-11T09:36:18.229Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        java.lang.String str63 = periodType48.getName();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType48, chronology64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        long long72 = interval71.toDurationMillis();
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval71);
        boolean boolean74 = interval25.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Interval interval75 = interval25.toInterval();
        java.lang.String str76 = interval75.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Years" + "'", str63, "Years");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(interval75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-01-27T19:34:38.349Z/2022-02-11T09:36:18.349Z" + "'", str76, "2022-01-27T19:34:38.349Z/2022-02-11T09:36:18.349Z");
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = period19.getPeriodType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.addSeconds((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        int int35 = mutablePeriod33.get(durationFieldType34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.secondOfMinute();
        org.joda.time.DurationField durationField54 = chronology49.weekyears();
        org.joda.time.DurationField durationField55 = chronology49.millis();
        boolean boolean56 = durationFieldType34.isSupported(chronology49);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology65);
        mutablePeriod62.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.DurationFieldType[] durationFieldTypeArray68 = mutablePeriod66.getFieldTypes();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.forFields(durationFieldTypeArray68);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod71.addHours(0);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration85.toPeriod(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Interval interval89 = duration85.toIntervalTo(readableInstant88);
        org.joda.time.Period period90 = interval89.toPeriod();
        org.joda.time.Chronology chronology91 = interval89.getChronology();
        mutablePeriod71.setPeriod((org.joda.time.ReadableDuration) duration77, chronology91);
        org.joda.time.DateTimeField dateTimeField93 = chronology91.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType69, chronology91);
        org.joda.time.DateTimeField dateTimeField95 = chronology91.halfdayOfDay();
        org.joda.time.DurationField durationField96 = durationFieldType34.getField(chronology91);
        org.joda.time.DateTimeField dateTimeField97 = chronology91.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField98 = chronology91.minuteOfHour();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationFieldTypeArray68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(dateTimeField98);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        mutablePeriod3.addHours(10);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutablePeriod26.setPeriod(readablePeriod27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        boolean boolean45 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration38.toPeriod(periodType46, chronology47);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutablePeriod53.setPeriod(readablePeriod54);
        mutablePeriod53.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.days();
        int int59 = mutablePeriod53.get(durationFieldType58);
        boolean boolean60 = periodType46.isSupported(durationFieldType58);
        mutablePeriod26.add(durationFieldType58, (int) '4');
        mutablePeriod3.set(durationFieldType58, (-51));
        // The following exception was thrown during execution in test generation
        try {
            int int66 = mutablePeriod3.getValue((-19));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (byte) 0);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.weeks();
        int int37 = periodType20.indexOf(durationFieldType36);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod39.addHours(0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration45, chronology59);
        org.joda.time.DurationField durationField61 = durationFieldType36.getField(chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.clockhourOfHalfday();
        mutablePeriod1.add(1643312018503L, chronology59);
        // The following exception was thrown during execution in test generation
        try {
            long long68 = chronology59.getDateTimeMillis((int) (short) 1, (int) (short) -1, 2, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = duration1.toPeriod(periodType2, chronology5);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime35.getZone();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardMinutes(1644572108797L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        java.lang.String str61 = duration58.toString();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean64 = periodType62.equals((java.lang.Object) false);
        org.joda.time.Period period65 = duration58.toPeriod(periodType62);
        org.joda.time.PeriodType periodType66 = periodType62.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(periodType66);
        org.joda.time.PeriodType periodType68 = periodType66.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration56, periodType68);
        long long70 = dateTime35.getMillis();
        org.joda.time.Duration duration71 = period6.toDurationFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int73 = dateTime35.get(dateTimeFieldType72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Days" + "'", str3, "Days");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:36:19.086Z" + "'", str51, "2022-02-11T09:36:19.086Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT126000S" + "'", str61, "PT126000S");
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType68);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1644572179086L + "'", long70 == 1644572179086L);
        org.junit.Assert.assertNotNull(duration71);
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1L, periodType1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.setMillis((int) (short) 0);
        mutablePeriod6.addMonths((int) (short) 1);
        int int11 = mutablePeriod6.size();
        int int12 = mutablePeriod6.getWeeks();
        mutablePeriod6.setYears(8);
        mutablePeriod6.addSeconds(1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        boolean boolean50 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration43.toPeriod(periodType51, chronology52);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutablePeriod58.setPeriod(readablePeriod59);
        mutablePeriod58.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.days();
        int int64 = mutablePeriod58.get(durationFieldType63);
        boolean boolean65 = periodType51.isSupported(durationFieldType63);
        java.lang.String str66 = periodType51.getName();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType51, chronology67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) duration70, chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        long long75 = interval74.toDurationMillis();
        mutablePeriod68.setPeriod((org.joda.time.ReadableInterval) interval74);
        boolean boolean77 = interval28.contains((org.joda.time.ReadableInterval) interval74);
        long long78 = interval28.toDurationMillis();
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration87.toPeriod(chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Interval interval91 = duration87.toIntervalTo(readableInstant90);
        org.joda.time.Interval interval92 = interval91.toInterval();
        org.joda.time.DateTime dateTime93 = interval91.getEnd();
        org.joda.time.Duration duration94 = interval91.toDuration();
        java.lang.String str95 = interval91.toString();
        org.joda.time.MutableInterval mutableInterval96 = interval91.toMutableInterval();
        boolean boolean97 = interval28.isAfter((org.joda.time.ReadableInterval) interval91);
        org.joda.time.DateTime dateTime98 = interval28.getStart();
        org.joda.time.Chronology chronology99 = dateTime98.getChronology();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Years" + "'", str66, "Years");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1260100000L + "'", long78 == 1260100000L);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(duration94);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-01-27T19:34:39.106Z/2022-02-11T09:36:19.106Z" + "'", str95, "2022-01-27T19:34:39.106Z/2022-02-11T09:36:19.106Z");
        org.junit.Assert.assertNotNull(mutableInterval96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(chronology99);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1644572125205L, periodType1);
        mutablePeriod3.add((long) 456825);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setSeconds(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hours" + "'", str2, "Hours");
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutablePeriod52.clear();
        mutablePeriod52.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType62 = null;
        boolean boolean63 = mutablePeriod52.isSupported(durationFieldType62);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekyearOfCentury();
        mutablePeriod52.add((long) (short) 100, chronology78);
        org.joda.time.DurationField durationField82 = chronology78.halfdays();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, chronology78);
        org.joda.time.DateTimeField dateTimeField84 = chronology78.halfdayOfDay();
        org.joda.time.DurationField durationField85 = chronology78.hours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        int int42 = periodType41.size();
        org.joda.time.PeriodType periodType43 = periodType41.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter40.withParseType(periodType43);
        boolean boolean45 = periodFormatter40.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod47 = periodFormatter40.parseMutablePeriod("2022-02-11T09:35:48.181Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant11, (org.joda.time.ReadableDuration) duration12, periodType13);
        org.joda.time.Duration duration16 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        org.joda.time.Duration duration17 = duration5.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        mutablePeriod27.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod27.copy();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = mutablePeriod27.toDurationTo(readableInstant39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology43 = null;
        mutablePeriod27.setPeriod((org.joda.time.ReadableDuration) duration42, chronology43);
        boolean boolean45 = duration19.isEqual((org.joda.time.ReadableDuration) duration42);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getEnd();
        boolean boolean75 = interval60.contains((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Interval interval88 = interval87.toInterval();
        org.joda.time.DateTime dateTime89 = interval87.getEnd();
        java.lang.String str90 = dateTime89.toString();
        boolean boolean91 = dateTime74.isBefore((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Duration duration92 = mutablePeriod47.toDurationFrom((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone93 = dateTime74.getZone();
        boolean boolean95 = dateTime74.equals((java.lang.Object) "PT60S");
        org.joda.time.Period period96 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration98 = duration42.plus((long) '#');
        boolean boolean99 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "2022-02-11T09:36:19.773Z" + "'", str90, "2022-02-11T09:36:19.773Z");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(duration98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getEnd();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology20 = interval16.getChronology();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getEnd();
        boolean boolean48 = interval33.contains((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getEnd();
        org.joda.time.Duration duration75 = interval72.toDuration();
        boolean boolean76 = interval60.overlaps((org.joda.time.ReadableInterval) interval72);
        boolean boolean77 = interval33.isBefore((org.joda.time.ReadableInterval) interval60);
        boolean boolean78 = interval16.equals((java.lang.Object) interval60);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Duration duration84 = duration82.plus(readableDuration83);
        org.joda.time.Duration duration86 = duration80.withDurationAdded((org.joda.time.ReadableDuration) duration82, (int) (byte) 10);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Period period88 = duration86.toPeriod(chronology87);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Interval interval90 = duration86.toIntervalTo(readableInstant89);
        org.joda.time.Interval interval91 = interval90.toInterval();
        org.joda.time.DateTime dateTime92 = interval90.getEnd();
        org.joda.time.Duration duration93 = interval90.toDuration();
        java.lang.String str94 = interval90.toString();
        boolean boolean95 = interval60.isAfter((org.joda.time.ReadableInterval) interval90);
        java.lang.String str96 = interval60.toString();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(duration93);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2022-01-27T19:34:39.909Z/2022-02-11T09:36:19.909Z" + "'", str94, "2022-01-27T19:34:39.909Z/2022-02-11T09:36:19.909Z");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2022-01-27T19:34:39.909Z/2022-02-11T09:36:19.909Z" + "'", str96, "2022-01-27T19:34:39.909Z/2022-02-11T09:36:19.909Z");
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1L, periodType1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.setMillis((int) (short) 0);
        mutablePeriod6.addMonths((int) (short) 1);
        int int11 = mutablePeriod6.size();
        int int12 = mutablePeriod6.getWeeks();
        mutablePeriod6.setYears(8);
        mutablePeriod6.addSeconds(1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        boolean boolean50 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration43.toPeriod(periodType51, chronology52);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutablePeriod58.setPeriod(readablePeriod59);
        mutablePeriod58.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.days();
        int int64 = mutablePeriod58.get(durationFieldType63);
        boolean boolean65 = periodType51.isSupported(durationFieldType63);
        java.lang.String str66 = periodType51.getName();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType51, chronology67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) duration70, chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        long long75 = interval74.toDurationMillis();
        mutablePeriod68.setPeriod((org.joda.time.ReadableInterval) interval74);
        boolean boolean77 = interval28.contains((org.joda.time.ReadableInterval) interval74);
        long long78 = interval28.toDurationMillis();
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval28);
        int[] intArray80 = mutablePeriod2.getValues();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Years" + "'", str66, "Years");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1260100000L + "'", long78 == 1260100000L);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 14, 14, 1, 40, 0]");
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutablePeriod26.setPeriod(readablePeriod27);
        mutablePeriod26.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.days();
        int int32 = mutablePeriod26.get(durationFieldType31);
        boolean boolean33 = periodType19.isSupported(durationFieldType31);
        java.lang.String str34 = periodType19.getName();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType19, chronology35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((java.lang.Object) duration38, chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        long long43 = interval42.toDurationMillis();
        mutablePeriod36.setPeriod((org.joda.time.ReadableInterval) interval42);
        mutablePeriod36.addHours((int) (byte) 0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Years" + "'", str34, "Years");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 60000L + "'", long43 == 60000L);
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getEnd();
        boolean boolean40 = interval25.contains((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getEnd();
        java.lang.String str55 = dateTime54.toString();
        boolean boolean56 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        long long58 = dateTime39.getMillis();
        org.joda.time.Interval interval59 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Period period75 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration85.toPeriod(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Interval interval89 = duration85.toIntervalTo(readableInstant88);
        org.joda.time.Interval interval90 = interval89.toInterval();
        org.joda.time.DateTime dateTime91 = interval89.getEnd();
        java.lang.String str92 = dateTime91.toString();
        org.joda.time.Period period93 = duration77.toPeriodTo((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.Period period94 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.Period period95 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:36:20.367Z" + "'", str55, "2022-02-11T09:36:20.367Z");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration57);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644572180367L + "'", long58 == 1644572180367L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-11T09:36:20.367Z" + "'", str74, "2022-02-11T09:36:20.367Z");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022-02-11T09:36:20.367Z" + "'", str92, "2022-02-11T09:36:20.367Z");
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(period95);
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withWeeksRemoved();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(2704L, 10L, periodType4, chronology18);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(periodType4);
        java.lang.String str24 = mutablePeriod23.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.setHours(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Days" + "'", str3, "Days");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P0D" + "'", str24, "P0D");
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        java.util.Locale locale42 = null;
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter41.withLocale(locale42);
        org.joda.time.format.PeriodParser periodParser44 = periodFormatter43.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod45 = org.joda.time.MutablePeriod.parse("2022-01-27T19:34:22.849Z", periodFormatter43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNull(periodParser44);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean13 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration1.toPeriod();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.Duration duration25 = duration1.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period26 = duration1.toPeriod();
        long long27 = duration1.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        mutablePeriod38.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        int int55 = mutablePeriod49.get(durationFieldType54);
        mutablePeriod38.add(durationFieldType54, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod68 = mutablePeriod38.copy();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = mutablePeriod68.get(durationFieldType69);
        long long73 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) ' ', 3);
        org.joda.time.DateTimeField dateTimeField74 = chronology29.dayOfYear();
        org.joda.time.DurationField durationField75 = chronology29.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long81 = chronology29.getDateTimeMillis(1644572130173L, (-3), (int) (byte) 10, (int) (short) 100, 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-124L) + "'", long73 == (-124L));
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        java.lang.String str72 = chronology68.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology68.secondOfDay();
        org.joda.time.Chronology chronology74 = chronology68.withUTC();
        org.joda.time.DateTimeZone dateTimeZone75 = chronology68.getZone();
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Interval interval88 = interval87.toInterval();
        org.joda.time.DateTime dateTime89 = interval87.getEnd();
        org.joda.time.ReadableInterval readableInterval90 = null;
        boolean boolean91 = interval87.isBefore(readableInterval90);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval90);
        int int93 = mutablePeriod92.getYears();
        int[] intArray96 = chronology68.get((org.joda.time.ReadablePeriod) mutablePeriod92, 1644572138663L, 1644572177028L);
        mutablePeriod92.setPeriod(1644572170421L, (long) 1);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str72, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0, 0, 0, 0, 0, 38, 365]");
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod36.setMillis((int) (short) 0);
        mutablePeriod36.addMonths((int) (short) 1);
        mutablePeriod36.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutablePeriod47.setPeriod(readablePeriod48);
        mutablePeriod47.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.days();
        int int53 = mutablePeriod47.get(durationFieldType52);
        mutablePeriod36.add(durationFieldType52, (int) '#');
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        boolean boolean66 = mutablePeriod3.equals((java.lang.Object) mutablePeriod59);
        int int67 = mutablePeriod59.getWeeks();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        java.lang.String str18 = chronology13.toString();
        org.joda.time.DurationField durationField19 = chronology13.eras();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str18, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.setMillis((int) (short) 0);
        mutablePeriod4.addMonths((int) (short) 1);
        mutablePeriod4.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutablePeriod15.setPeriod(readablePeriod16);
        mutablePeriod15.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        int int21 = mutablePeriod15.get(durationFieldType20);
        mutablePeriod4.add(durationFieldType20, (int) '#');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod4.copy();
        mutablePeriod34.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod34.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod49.addHours(0);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Period period68 = interval67.toPeriod();
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        mutablePeriod49.setPeriod((org.joda.time.ReadableDuration) duration55, chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.hourOfHalfday();
        mutablePeriod34.setPeriod(1644572126356L, (long) (short) 1, chronology69);
        java.lang.String str73 = chronology69.toString();
        org.joda.time.DateTimeField dateTimeField74 = chronology69.secondOfDay();
        org.joda.time.Chronology chronology75 = chronology69.withUTC();
        org.joda.time.DateTimeZone dateTimeZone76 = chronology69.getZone();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(1644572154267L, chronology69);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str73, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        java.lang.String str46 = dateTime45.toString();
        boolean boolean47 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime30.getZone();
        org.joda.time.Period period50 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int52 = dateTime30.get(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:36:21.592Z" + "'", str46, "2022-02-11T09:36:21.592Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology21.weekyears();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod2.addHours(0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration8, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType0.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.yearOfEra();
        org.joda.time.DurationField durationField29 = chronology22.eras();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Interval interval17 = interval15.toInterval();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        java.lang.String str19 = periodType18.getName();
        org.joda.time.PeriodType periodType20 = periodType18.withSecondsRemoved();
        org.joda.time.PeriodType periodType21 = periodType18.withMonthsRemoved();
        org.joda.time.Period period22 = interval17.toPeriod(periodType21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.addSeconds((int) (byte) 100);
        mutablePeriod26.addWeeks((int) '#');
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        int int37 = mutablePeriod36.getYears();
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod36.copy();
        mutablePeriod38.setYears((int) (short) 10);
        int int41 = mutablePeriod38.size();
        mutablePeriod38.setMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod38.set(durationFieldType44, 340);
        mutablePeriod26.add(durationFieldType44, 32);
        int int49 = period22.indexOf(durationFieldType44);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Days" + "'", str19, "Days");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.withMillis(126000000L);
        org.joda.time.Duration duration5 = duration1.minus(1644572125280L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis(1644572140503L);
        boolean boolean8 = duration1.equals((java.lang.Object) duration7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.Object obj18 = mutablePeriod16.clone();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        mutablePeriod16.add((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Interval interval26 = interval24.toInterval();
        org.joda.time.Chronology chronology27 = interval24.getChronology();
        long long28 = interval24.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration32 = duration30.plus(126000L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod36.add((long) ' ');
        int int39 = mutablePeriod36.getDays();
        mutablePeriod36.setMillis((int) (byte) -1);
        mutablePeriod36.setYears(4);
        boolean boolean44 = duration30.equals((java.lang.Object) 4);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays(100000L);
        org.joda.time.Duration duration48 = duration46.minus(0L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getEnd();
        boolean boolean76 = interval61.contains((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Instant instant77 = dateTime75.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        boolean boolean79 = instant77.isSupported(dateTimeFieldType78);
        org.joda.time.Interval interval80 = duration48.toIntervalFrom((org.joda.time.ReadableInstant) instant77);
        org.joda.time.Interval interval81 = duration30.toIntervalTo((org.joda.time.ReadableInstant) instant77);
        boolean boolean82 = interval24.isBefore((org.joda.time.ReadableInstant) instant77);
        org.joda.time.Interval interval83 = duration7.toIntervalTo((org.joda.time.ReadableInstant) instant77);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 60000L + "'", long28 == 60000L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(interval83);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withWeeksRemoved();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(2704L, 10L, periodType4, chronology18);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        int int28 = mutablePeriod27.getYears();
        java.lang.String str29 = mutablePeriod27.toString();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutablePeriod34.setPeriod(readablePeriod35);
        mutablePeriod34.addWeeks((int) (byte) 10);
        mutablePeriod27.add((org.joda.time.ReadablePeriod) mutablePeriod34);
        boolean boolean41 = mutablePeriod27.equals((java.lang.Object) (-1.0f));
        mutablePeriod27.addMillis((int) '#');
        mutablePeriod27.setSeconds((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Days" + "'", str3, "Days");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.052S" + "'", str29, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        int int28 = duration7.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod30.addHours(0);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration36, chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.Period period54 = duration17.toPeriod(chronology50);
        org.joda.time.DurationField durationField55 = chronology50.hours();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.DurationFieldType[] durationFieldTypeArray67 = mutablePeriod65.getFieldTypes();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.forFields(durationFieldTypeArray67);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod70.addHours(0);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Duration duration82 = duration80.plus(readableDuration81);
        org.joda.time.Duration duration84 = duration78.withDurationAdded((org.joda.time.ReadableDuration) duration80, (int) (byte) 10);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Period period86 = duration84.toPeriod(chronology85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Interval interval88 = duration84.toIntervalTo(readableInstant87);
        org.joda.time.Period period89 = interval88.toPeriod();
        org.joda.time.Chronology chronology90 = interval88.getChronology();
        mutablePeriod70.setPeriod((org.joda.time.ReadableDuration) duration76, chronology90);
        org.joda.time.DateTimeField dateTimeField92 = chronology90.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType68, chronology90);
        org.joda.time.DateTimeField dateTimeField94 = chronology90.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField95 = chronology90.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField96 = chronology90.dayOfWeek();
        org.joda.time.DurationField durationField97 = chronology90.hours();
        org.joda.time.DurationField durationField98 = chronology90.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod99 = new org.joda.time.MutablePeriod((java.lang.Object) durationField55, chronology90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str52, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationFieldTypeArray67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(durationField97);
        org.junit.Assert.assertNotNull(durationField98);
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.hourOfHalfday();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration31 = duration22.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        boolean boolean61 = interval46.contains((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getEnd();
        java.lang.String str76 = dateTime75.toString();
        boolean boolean77 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Duration duration78 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateTime60);
        long long79 = dateTime60.getMillis();
        org.joda.time.Interval interval80 = duration22.toIntervalFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        org.joda.time.Duration duration88 = duration82.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = duration88.toPeriod(chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = duration88.toIntervalTo(readableInstant91);
        org.joda.time.Interval interval93 = interval92.toInterval();
        org.joda.time.DateTime dateTime94 = interval92.getEnd();
        java.lang.String str95 = dateTime94.toString();
        org.joda.time.Period period96 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime94);
        long long99 = chronology15.add((org.joda.time.ReadablePeriod) period96, 35L, (int) (byte) -1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-11T09:36:22.062Z" + "'", str76, "2022-02-11T09:36:22.062Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration78);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1644572182062L + "'", long79 == 1644572182062L);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-02-11T09:36:22.062Z" + "'", str95, "2022-02-11T09:36:22.062Z");
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + (-99965L) + "'", long99 == (-99965L));
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Days days8 = duration7.toStandardDays();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (short) -1, periodType10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Period period26 = duration7.toPeriod(periodType10, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = chronology25.get(readablePartial30, 1828517717801L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration3.withMillis((long) (-1));
        org.joda.time.Duration duration8 = duration5.withDurationAdded(0L, (int) (short) 10);
        org.joda.time.Duration duration10 = duration8.plus(60000L);
        org.joda.time.Period period11 = duration8.toPeriod();
        org.joda.time.Period period12 = period11.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter3.getParser();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter3.getParser();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.days();
        java.lang.String str11 = periodType10.getName();
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration9.toPeriod(periodType10, chronology13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter3.withParseType(periodType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod16 = org.joda.time.MutablePeriod.parse("2022-01-27T19:34:39.106Z/2022-02-11T09:36:19.106Z", periodFormatter15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Days" + "'", str11, "Days");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodFormatter15);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        mutablePeriod4.setHours(3);
        mutablePeriod4.setHours(456825);
        mutablePeriod4.setMinutes(14);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        int[] intArray20 = mutablePeriod7.getValues();
        mutablePeriod7.setMinutes((-52));
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 32, 97, 97, 1, 0, -53]");
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology13.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long42 = chronology13.getDateTimeMillis((int) (byte) -1, (-53), (-52), 52, 0, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        boolean boolean40 = periodFormatter39.isPrinter();
        org.joda.time.PeriodType periodType41 = periodFormatter39.getParseType();
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter39.getParser();
        java.util.Locale locale43 = periodFormatter39.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod44 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:17.577Z", periodFormatter39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNull(periodParser42);
        org.junit.Assert.assertNull(locale43);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Interval interval17 = interval15.toInterval();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        boolean boolean45 = interval30.contains((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getEnd();
        java.lang.String str60 = dateTime59.toString();
        boolean boolean61 = dateTime44.isBefore((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime44.getZone();
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = dateTime44.isBefore(readableInstant63);
        boolean boolean65 = interval17.isAfter(readableInstant63);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-11T09:36:22.651Z" + "'", str60, "2022-02-11T09:36:22.651Z");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod20.clear();
        mutablePeriod20.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType30 = null;
        boolean boolean31 = mutablePeriod20.isSupported(durationFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology34);
        int int36 = mutablePeriod35.getWeeks();
        mutablePeriod20.add((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod35.setWeeks((int) (short) 100);
        java.lang.String str40 = mutablePeriod35.toString();
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod35, 28083659L, 60000L);
        org.joda.time.DateTimeField dateTimeField44 = chronology13.weekyear();
        org.joda.time.DurationField durationField45 = chronology13.eras();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "P100WT0.087S" + "'", str40, "P100WT0.087S");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, -7, -47, -3, -659]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.util.Locale locale7 = periodFormatter2.getLocale();
        java.io.Writer writer8 = null;
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutablePeriod31.setPeriod(readablePeriod32);
        mutablePeriod31.addWeeks((int) (byte) 10);
        int[] intArray38 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod31, (long) '#', (-1L));
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        java.lang.String str43 = duration40.toString();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean46 = periodType44.equals((java.lang.Object) false);
        org.joda.time.Period period47 = duration40.toPeriod(periodType44);
        org.joda.time.PeriodType periodType48 = periodType44.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(periodType48);
        int[] intArray52 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod49, (long) (byte) 1, (long) '#');
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyear();
        boolean boolean69 = mutablePeriod49.equals((java.lang.Object) dateTimeField68);
        mutablePeriod49.setPeriod((-62130497090000L));
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer8, (org.joda.time.ReadablePeriod) mutablePeriod49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT126000S" + "'", str43, "PT126000S");
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.year();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getEnd();
        boolean boolean62 = interval47.contains((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.DateTime dateTime76 = interval74.getEnd();
        java.lang.String str77 = dateTime76.toString();
        boolean boolean78 = dateTime61.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime61.getZone();
        org.joda.time.Chronology chronology80 = chronology29.withZone(dateTimeZone79);
        org.joda.time.ReadablePartial readablePartial81 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long83 = chronology80.set(readablePartial81, (long) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-11T09:36:22.914Z" + "'", str77, "2022-02-11T09:36:22.914Z");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        mutablePeriod33.setSeconds((int) '4');
        mutablePeriod33.setMinutes(0);
        mutablePeriod33.addMonths((-124));
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod33.setValue(102, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 102");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        int[] intArray2 = mutablePeriod1.getValues();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration6 = org.joda.time.Duration.millis((long) '#');
        boolean boolean7 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration11.withMillis((long) (-1));
        org.joda.time.Duration duration16 = duration13.withDurationAdded(0L, (int) (short) 10);
        org.joda.time.Duration duration17 = duration4.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        java.lang.String str22 = duration19.toString();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean25 = periodType23.equals((java.lang.Object) false);
        org.joda.time.Period period26 = duration19.toPeriod(periodType23);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        boolean boolean43 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Minutes minutes44 = duration30.toStandardMinutes();
        org.joda.time.Duration duration46 = duration30.plus((long) 8);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Period period74 = interval73.toPeriod();
        org.joda.time.Chronology chronology75 = interval73.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.hourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology75);
        org.joda.time.DateTimeField dateTimeField79 = chronology75.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((java.lang.Object) period59, chronology75);
        org.joda.time.DateTimeField dateTimeField81 = chronology75.halfdayOfDay();
        boolean boolean82 = duration30.equals((java.lang.Object) chronology75);
        org.joda.time.Duration duration83 = duration19.plus((org.joda.time.ReadableDuration) duration30);
        boolean boolean84 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration83);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration17);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0]");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT126000S" + "'", str22, "PT126000S");
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withMonthsRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod7.clear();
        mutablePeriod7.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType17 = null;
        boolean boolean18 = mutablePeriod7.isSupported(durationFieldType17);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekyearOfCentury();
        mutablePeriod7.add((long) (short) 100, chronology33);
        org.joda.time.DurationField durationField37 = chronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.hourOfHalfday();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        mutablePeriod42.setMillis((int) (short) 0);
        mutablePeriod42.addMonths((int) (short) 1);
        mutablePeriod42.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutablePeriod53.setPeriod(readablePeriod54);
        mutablePeriod53.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.days();
        int int59 = mutablePeriod53.get(durationFieldType58);
        mutablePeriod42.add(durationFieldType58, (int) '#');
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.MutablePeriod mutablePeriod72 = mutablePeriod42.copy();
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.weeks();
        int int74 = mutablePeriod72.get(durationFieldType73);
        long long77 = chronology33.add((org.joda.time.ReadablePeriod) mutablePeriod72, (long) ' ', 3);
        org.joda.time.DateTimeField dateTimeField78 = chronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField79 = chronology33.year();
        org.joda.time.DateTimeField dateTimeField80 = chronology33.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 1, (long) 14, periodType3, chronology33);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod81.setPeriod(102, 4, 0, 0, 8, 4, (int) (short) 0, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-124L) + "'", long77 == (-124L));
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        java.lang.String str34 = duration31.toString();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean37 = periodType35.equals((java.lang.Object) false);
        org.joda.time.Period period38 = duration31.toPeriod(periodType35);
        org.joda.time.PeriodType periodType39 = periodType35.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(periodType39);
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod40, (long) (byte) 1, (long) '#');
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyear();
        boolean boolean60 = mutablePeriod40.equals((java.lang.Object) dateTimeField59);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod40.setMinutes((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT126000S" + "'", str34, "PT126000S");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        mutablePeriod7.setDays(51);
        org.joda.time.PeriodType periodType20 = mutablePeriod7.getPeriodType();
        mutablePeriod7.setPeriod(1644572178021L, (long) (-1));
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.era();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.minuteOfHour();
        org.joda.time.DurationField durationField27 = chronology20.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = chronology20.getDateTimeMillis(97, (-53), 33, 0, 97, 5, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod7 = org.joda.time.MutablePeriod.parse("2022-02-11T09:36:18.282Z", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(periodParser6);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        mutablePeriod38.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        int int55 = mutablePeriod49.get(durationFieldType54);
        mutablePeriod38.add(durationFieldType54, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod68 = mutablePeriod38.copy();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = mutablePeriod68.get(durationFieldType69);
        long long73 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) ' ', 3);
        org.joda.time.DateTimeField dateTimeField74 = chronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField75 = chronology29.dayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-124L) + "'", long73 == (-124L));
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.setWeeks((int) (short) 100);
        java.lang.String str23 = mutablePeriod18.toString();
        java.lang.String str24 = mutablePeriod18.toString();
        mutablePeriod18.setPeriod(100L, 1L);
        mutablePeriod18.addHours(10);
        mutablePeriod18.setMinutes((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P100WT0.087S" + "'", str23, "P100WT0.087S");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P100WT0.087S" + "'", str24, "P100WT0.087S");
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = chronology29.getDateTimeMillis((-53), 18, (-1), 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter38.isPrinter();
        org.joda.time.PeriodType periodType40 = periodFormatter38.getParseType();
        boolean boolean41 = periodFormatter38.isParser();
        java.io.Writer writer42 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, periodType44);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.time();
        int int47 = periodType46.size();
        org.joda.time.PeriodType periodType48 = periodType46.withYearsRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod45, periodType49);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter38.printTo(writer42, (org.joda.time.ReadablePeriod) mutablePeriod50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.addHours((int) (short) 10);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean15 = periodType13.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, periodType13, chronology16);
        mutablePeriod17.addYears((int) 'a');
        mutablePeriod17.addWeeks((int) '#');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        long long36 = interval35.toDurationMillis();
        mutablePeriod17.add((org.joda.time.ReadableInterval) interval35);
        mutablePeriod17.addDays((-53));
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1260100000L + "'", long36 == 1260100000L);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter38.getLocale();
        boolean boolean42 = periodFormatter38.isPrinter();
        java.util.Locale locale43 = periodFormatter38.getLocale();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(locale43);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        mutablePeriod4.addDays(10);
        mutablePeriod4.setMinutes(0);
        mutablePeriod4.setYears(1);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours(10L);
        long long18 = duration17.getMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours(10L);
        long long21 = duration20.getMillis();
        org.joda.time.Duration duration22 = duration17.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((java.lang.Object) duration22, chronology23);
        boolean boolean25 = mutablePeriod4.equals((java.lang.Object) chronology23);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 36000000L + "'", long18 == 36000000L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 36000000L + "'", long21 == 36000000L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 8, (long) '4');
        mutablePeriod2.add((int) '#', (-1), (int) (byte) 0, 4, 32, 100, 32, (int) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        int int16 = mutablePeriod15.getYears();
        java.lang.String str17 = mutablePeriod15.toString();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29);
        boolean boolean31 = mutablePeriod22.equals((java.lang.Object) readableInstant28);
        org.joda.time.Period period32 = mutablePeriod22.toPeriod();
        org.joda.time.Period period33 = mutablePeriod22.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod2.addMonths(2);
        int int38 = mutablePeriod2.getDays();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        mutablePeriod42.clear();
        mutablePeriod42.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType52 = null;
        boolean boolean53 = mutablePeriod42.isSupported(durationFieldType52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology56);
        int int58 = mutablePeriod57.getWeeks();
        mutablePeriod42.add((org.joda.time.ReadablePeriod) mutablePeriod57);
        mutablePeriod57.setWeeks((int) (short) 100);
        mutablePeriod2.add((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod64.addHours(0);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Period period83 = interval82.toPeriod();
        org.joda.time.Chronology chronology84 = interval82.getChronology();
        mutablePeriod64.setPeriod((org.joda.time.ReadableDuration) duration70, chronology84);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.format.PeriodPrinter periodPrinter87 = null;
        org.joda.time.format.PeriodParser periodParser88 = null;
        org.joda.time.format.PeriodFormatter periodFormatter89 = new org.joda.time.format.PeriodFormatter(periodPrinter87, periodParser88);
        boolean boolean90 = periodFormatter89.isPrinter();
        org.joda.time.PeriodType periodType91 = periodFormatter89.getParseType();
        org.joda.time.format.PeriodParser periodParser92 = periodFormatter89.getParser();
        org.joda.time.format.PeriodParser periodParser93 = periodFormatter89.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = mutablePeriod2.toString(periodFormatter89);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.052S" + "'", str17, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(periodType91);
        org.junit.Assert.assertNull(periodParser92);
        org.junit.Assert.assertNull(periodParser93);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.add((long) 4);
        mutablePeriod3.setPeriod(3, (int) (byte) 10, 1, (int) (short) 10, (int) (short) 10, 0, 100, 2);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue((int) (short) 10, (-19));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getEnd();
        boolean boolean33 = interval18.contains((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        boolean boolean50 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Minutes minutes51 = duration37.toStandardMinutes();
        org.joda.time.Duration duration53 = duration37.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.DateTime dateTime68 = interval66.getEnd();
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Duration duration75 = duration73.plus(readableDuration74);
        org.joda.time.Duration duration77 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) (byte) 10);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        boolean boolean86 = duration73.isShorterThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration79.toPeriod(periodType87, chronology88);
        org.joda.time.PeriodType periodType90 = periodType87.withYearsRemoved();
        org.joda.time.PeriodType periodType91 = periodType90.withDaysRemoved();
        org.joda.time.PeriodType periodType92 = periodType91.withSecondsRemoved();
        org.joda.time.PeriodType periodType93 = periodType92.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime68, periodType92);
        org.joda.time.Duration duration95 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = null;
        boolean boolean97 = dateTime68.isSupported(dateTimeFieldType96);
        org.joda.time.Chronology chronology98 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField99 = chronology98.monthOfYear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-11T09:36:24.332Z" + "'", str69, "2022-02-11T09:36:24.332Z");
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(chronology98);
        org.junit.Assert.assertNotNull(dateTimeField99);
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.DateTime dateTime15 = interval11.getStart();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.add((long) ' ');
        int int22 = mutablePeriod19.getDays();
        mutablePeriod19.setMillis((int) (byte) -1);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.DateTime dateTime51 = interval49.getEnd();
        boolean boolean52 = interval37.contains((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.DateTime dateTime66 = interval64.getEnd();
        java.lang.String str67 = dateTime66.toString();
        boolean boolean68 = dateTime51.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration69 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology70 = dateTime66.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        boolean boolean72 = dateTime66.isSupported(dateTimeFieldType71);
        long long73 = dateTime66.getMillis();
        int int74 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        boolean boolean76 = dateTime66.isSupported(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-11T09:36:24.524Z" + "'", str67, "2022-02-11T09:36:24.524Z");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644572184524L + "'", long73 == 1644572184524L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        int int11 = mutablePeriod10.getYears();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod10.copy();
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod17.setMillis((int) (short) 0);
        mutablePeriod17.addMonths((int) (short) 1);
        int int22 = mutablePeriod17.size();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        int int29 = mutablePeriod26.getDays();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.millis();
        mutablePeriod26.add(durationFieldType30, (int) (byte) 1);
        int int33 = mutablePeriod26.getWeeks();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod37.add((long) ' ');
        mutablePeriod37.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutablePeriod46.setPeriod(readablePeriod47);
        mutablePeriod46.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        int int52 = mutablePeriod46.get(durationFieldType51);
        boolean boolean53 = mutablePeriod37.isSupported(durationFieldType51);
        boolean boolean54 = mutablePeriod26.isSupported(durationFieldType51);
        int int55 = mutablePeriod17.get(durationFieldType51);
        mutablePeriod10.add(durationFieldType51, (int) '4');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getEnd();
        boolean boolean40 = interval25.contains((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getEnd();
        java.lang.String str55 = dateTime54.toString();
        boolean boolean56 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        long long58 = dateTime39.getMillis();
        org.joda.time.Interval interval59 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Period period75 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period76 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:36:24.618Z" + "'", str55, "2022-02-11T09:36:24.618Z");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration57);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644572184618L + "'", long58 == 1644572184618L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-11T09:36:24.618Z" + "'", str74, "2022-02-11T09:36:24.618Z");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod2.addHours(0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration8, chronology22);
        org.joda.time.Duration duration26 = duration8.withDurationAdded((long) 3, (int) '4');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant27, (org.joda.time.ReadableDuration) duration28, periodType29);
        boolean boolean31 = duration8.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration33 = duration8.withMillis((long) (byte) 10);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getEnd();
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = mutablePeriod56.getFieldTypes();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.forFields(durationFieldTypeArray58);
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime47, periodType59);
        org.joda.time.PeriodType periodType62 = periodType59.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 52, periodType62);
        java.lang.String str64 = periodType62.getName();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-11T09:36:24.784Z" + "'", str48, "2022-02-11T09:36:24.784Z");
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "StandardNoHours" + "'", str64, "StandardNoHours");
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addHours((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        mutablePeriod37.setMillis((int) (byte) -1);
        java.lang.String str40 = mutablePeriod37.toString();
        int[] intArray41 = mutablePeriod37.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration42 = new org.joda.time.Duration((java.lang.Object) intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: [I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.001S" + "'", str40, "PT0.001S");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, -1]");
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.toMutablePeriod();
        mutablePeriod11.add(1644572121565L);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.setSeconds(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        int int10 = mutablePeriod4.size();
        mutablePeriod4.addMinutes((int) ' ');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        int int17 = mutablePeriod16.getYears();
        java.lang.String str18 = mutablePeriod16.toString();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        mutablePeriod16.add((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30);
        boolean boolean32 = mutablePeriod23.equals((java.lang.Object) readableInstant29);
        org.joda.time.Period period33 = mutablePeriod23.toPeriod();
        org.joda.time.PeriodType periodType34 = mutablePeriod23.getPeriodType();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Period period47 = interval46.toPeriod();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutablePeriod57.setPeriod(readablePeriod58);
        mutablePeriod57.addWeeks((int) (byte) 10);
        int[] intArray64 = chronology48.get((org.joda.time.ReadablePeriod) mutablePeriod57, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField65 = chronology48.clockhourOfHalfday();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod69.setMillis((int) (short) 0);
        mutablePeriod69.addMonths((int) (short) 1);
        mutablePeriod69.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray76 = mutablePeriod69.getFieldTypes();
        mutablePeriod69.addMonths(0);
        org.joda.time.Period period79 = mutablePeriod69.toPeriod();
        int[] intArray81 = chronology48.get((org.joda.time.ReadablePeriod) mutablePeriod69, 126000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((java.lang.Object) ' ', periodType34, chronology48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.052S" + "'", str18, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationFieldTypeArray76);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 0, 0, 2, 6, 0]");
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType24.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter2.withParseType(periodType24);
        java.util.Locale locale30 = periodFormatter29.getLocale();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0, (int) (short) -1, 5, 32, 0, 340, 0, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = periodFormatter29.print((org.joda.time.ReadablePeriod) mutablePeriod39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNull(locale30);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        int int14 = mutablePeriod3.getSeconds();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        int int19 = mutablePeriod18.getYears();
        java.lang.String str20 = mutablePeriod18.toString();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        mutablePeriod18.add((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32);
        boolean boolean34 = mutablePeriod25.equals((java.lang.Object) readableInstant31);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.millis();
        mutablePeriod25.set(durationFieldType35, (int) (byte) 10);
        mutablePeriod3.set(durationFieldType35, (int) (byte) 1);
        mutablePeriod3.setDays((-52));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0.052S" + "'", str20, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationFieldType35);
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) '#');
        boolean boolean4 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration8.withMillis((long) (-1));
        org.joda.time.Duration duration13 = duration10.withDurationAdded(0L, (int) (short) 10);
        org.joda.time.Duration duration14 = duration1.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        java.lang.String str19 = duration16.toString();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean22 = periodType20.equals((java.lang.Object) false);
        org.joda.time.Period period23 = duration16.toPeriod(periodType20);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        boolean boolean40 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Minutes minutes41 = duration27.toStandardMinutes();
        org.joda.time.Duration duration43 = duration27.plus((long) 8);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Period period71 = interval70.toPeriod();
        org.joda.time.Chronology chronology72 = interval70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.hourOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((java.lang.Object) period56, chronology72);
        org.joda.time.DateTimeField dateTimeField78 = chronology72.halfdayOfDay();
        boolean boolean79 = duration27.equals((java.lang.Object) chronology72);
        org.joda.time.Duration duration80 = duration16.plus((org.joda.time.ReadableDuration) duration27);
        boolean boolean81 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardMinutes((long) 8);
        boolean boolean84 = duration80.isShorterThan((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT126000S" + "'", str19, "PT126000S");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.addSeconds((int) (byte) 100);
        mutablePeriod3.clear();
        mutablePeriod3.setMonths((int) (short) 0);
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes(1644572108797L);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration25);
        mutablePeriod23.setYears((int) (byte) 1);
        int int29 = mutablePeriod23.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutablePeriod36.setPeriod(readablePeriod37);
        mutablePeriod36.addWeeks((int) (byte) 10);
        int int41 = mutablePeriod36.getMonths();
        mutablePeriod36.addDays(10);
        mutablePeriod36.setMinutes(0);
        int[] intArray46 = mutablePeriod36.getValues();
        int int47 = mutablePeriod36.getSeconds();
        org.joda.time.PeriodType periodType48 = mutablePeriod36.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(126000L, 1644572149392L, periodType48);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.add((org.joda.time.ReadablePeriod) mutablePeriod49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 10, 10, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(periodType48);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        int int22 = mutablePeriod3.getMillis();
        mutablePeriod3.addDays((int) (short) 0);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        boolean boolean19 = interval5.overlaps((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        int int26 = mutablePeriod23.getDays();
        mutablePeriod23.setMillis((int) (byte) -1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        boolean boolean56 = interval41.contains((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        java.lang.String str71 = dateTime70.toString();
        boolean boolean72 = dateTime55.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean74 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime75 = interval17.getStart();
        org.joda.time.ReadableInstant readableInstant76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int77 = dateTime75.compareTo(readableInstant76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-11T09:36:25.465Z" + "'", str71, "2022-02-11T09:36:25.465Z");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        mutablePeriod4.addDays((int) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.Object obj26 = mutablePeriod24.clone();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.Chronology chronology35 = interval32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        mutablePeriod4.setPeriod((long) 100, (long) 3, chronology35);
        org.joda.time.PeriodType periodType38 = mutablePeriod4.getPeriodType();
        mutablePeriod4.clear();
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(periodType38);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', periodType2);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.addYears(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology13.weekyears();
        org.joda.time.DurationField durationField19 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = mutablePeriod12.getFieldTypes();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.forFields(durationFieldTypeArray14);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod17.addHours(0);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration23, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType15, chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.halfdayOfDay();
        org.joda.time.DurationField durationField42 = chronology37.months();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-124L), (long) (-51), periodType2, chronology37);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod47.add((long) ' ');
        mutablePeriod47.setMonths(0);
        int int52 = mutablePeriod47.getMonths();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology56);
        mutablePeriod57.add((long) ' ');
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Period period73 = interval72.toPeriod();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        mutablePeriod57.setPeriod((long) (short) 0, chronology74);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Period period88 = interval87.toPeriod();
        org.joda.time.Chronology chronology89 = interval87.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.hourOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology89.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField92 = chronology89.dayOfYear();
        org.joda.time.DateTimeField dateTimeField93 = chronology89.secondOfMinute();
        boolean boolean94 = mutablePeriod57.equals((java.lang.Object) chronology89);
        org.joda.time.DateTimeField dateTimeField95 = chronology89.centuryOfEra();
        mutablePeriod47.add(1644572120450L, chronology89);
        int[] intArray99 = chronology37.get((org.joda.time.ReadablePeriod) mutablePeriod47, 1644572164899L, 1644572171196L);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[0, 0, 0, 0, 0, 0, 6, 297]");
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        mutablePeriod3.setPeriod((int) (short) 10, (int) (byte) 100, (int) (short) 100, (int) (byte) 100, (int) (short) 0, (int) ' ', 10, 1);
        mutablePeriod3.setHours((int) (short) -1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration36 = duration27.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        boolean boolean53 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration46.toPeriod(periodType54, chronology55);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        mutablePeriod61.setPeriod(readablePeriod62);
        mutablePeriod61.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.days();
        int int67 = mutablePeriod61.get(durationFieldType66);
        boolean boolean68 = periodType54.isSupported(durationFieldType66);
        org.joda.time.PeriodType periodType69 = periodType54.withDaysRemoved();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration79.toPeriod(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Interval interval83 = duration79.toIntervalTo(readableInstant82);
        org.joda.time.Period period84 = interval83.toPeriod();
        org.joda.time.Chronology chronology85 = interval83.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.days();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField88 = chronology85.millisOfDay();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology85);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((java.lang.Object) duration36, periodType54, chronology85);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod91);
        org.joda.time.Chronology chronology94 = null;
        mutablePeriod3.setPeriod(1644572115768L, chronology94);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        java.lang.String str44 = dateTime43.toString();
        boolean boolean45 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime28);
        mutablePeriod1.setPeriod(1644572125280L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:36:26.031Z" + "'", str44, "2022-02-11T09:36:26.031Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter40.withLocale(locale41);
        java.io.Writer writer43 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        mutablePeriod51.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod62 = mutablePeriod51.copy();
        org.joda.time.PeriodType periodType63 = mutablePeriod51.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod51.toMutablePeriod();
        mutablePeriod51.clear();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter40.printTo(writer43, (org.joda.time.ReadablePeriod) mutablePeriod51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(mutablePeriod64);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((-124L));
        long long2 = duration1.getMillis();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getEnd();
        boolean boolean34 = interval19.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration35 = mutablePeriod6.toDurationTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Instant instant36 = dateTime33.toInstant();
        org.joda.time.Period period37 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-124L) + "'", long2 == (-124L));
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        mutablePeriod7.setYears((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType29 = mutablePeriod7.getFieldType(0);
        mutablePeriod7.addDays((int) '4');
        int int32 = mutablePeriod7.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:36:10.346Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:36:10.346Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        org.joda.time.Duration duration58 = interval55.toDuration();
        boolean boolean59 = interval43.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Chronology chronology60 = interval55.getChronology();
        boolean boolean61 = durationFieldType29.isSupported(chronology60);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = chronology60.getDateTimeMillis((-3), 5, (int) (byte) 1, (int) ' ', 2, 5, (-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.minutes();
        java.lang.String str1 = periodType0.getName();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Minutes" + "'", str1, "Minutes");
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType14, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = chronology36.minuteOfDay();
        org.joda.time.DurationField durationField44 = chronology36.halfdays();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 10, chronology36);
        int int46 = mutablePeriod45.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod45.setValue(35, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:36:00.782Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:36:00.782Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1643312066184L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod13.addHours(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration19, chronology33);
        java.lang.String str35 = chronology33.toString();
        mutablePeriod3.add((long) 2, chronology33);
        int int37 = mutablePeriod3.getHours();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        boolean boolean5 = periodFormatter2.isPrinter();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = periodFormatter2.print(readablePeriod6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.Duration duration25 = duration7.withDurationAdded((long) 3, (int) '4');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, (org.joda.time.ReadableDuration) duration27, periodType28);
        boolean boolean30 = duration7.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration32 = duration7.withMillis((long) (byte) 10);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getEnd();
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.DurationFieldType[] durationFieldTypeArray57 = mutablePeriod55.getFieldTypes();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.forFields(durationFieldTypeArray57);
        org.joda.time.PeriodType periodType59 = periodType58.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime46, periodType58);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        boolean boolean88 = interval73.contains((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = interval73.getStart();
        org.joda.time.Period period90 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Days days91 = duration7.toStandardDays();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T09:36:26.732Z" + "'", str47, "2022-02-11T09:36:26.732Z");
        org.junit.Assert.assertNotNull(durationFieldTypeArray57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(days91);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes(1644572108797L);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        boolean boolean39 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration36);
        boolean boolean41 = duration28.equals((java.lang.Object) 0.0d);
        org.joda.time.ReadableDuration readableDuration42 = null;
        boolean boolean43 = duration28.isLongerThan(readableDuration42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod47.setMillis((int) (short) 0);
        mutablePeriod47.addMonths((int) (short) 1);
        mutablePeriod47.setMinutes((int) (byte) 1);
        mutablePeriod47.addYears(1);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        boolean boolean62 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration59);
        mutablePeriod47.add((org.joda.time.ReadableDuration) duration57);
        int int64 = duration28.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration65 = duration25.plus((org.joda.time.ReadableDuration) duration57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours66 = duration25.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 27409535146");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(duration65);
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int9 = mutablePeriod7.size();
        int int10 = mutablePeriod7.getDays();
        mutablePeriod7.addMinutes(32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = mutablePeriod3.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setMillis(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = mutablePeriod2.getFieldTypes();
        mutablePeriod2.addYears((int) (byte) 0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = mutablePeriod2.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = mutablePeriod2.getFieldType(18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(durationFieldTypeArray8);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        java.lang.String str63 = periodType48.getName();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType48, chronology64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        long long72 = interval71.toDurationMillis();
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval71);
        boolean boolean74 = interval25.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime75 = interval71.getStart();
        long long76 = interval71.getEndMillis();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Years" + "'", str63, "Years");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1644572187350L + "'", long76 == 1644572187350L);
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod3.setPeriod(readableInterval9);
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withDaysRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType25 = periodType23.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1643312029209L, 126000000L, periodType25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        long long33 = interval32.toDurationMillis();
        mutablePeriod26.setPeriod((org.joda.time.ReadableInterval) interval32);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod26.addHours(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 60000L + "'", long33 == 60000L);
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        java.lang.String str34 = duration31.toString();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean37 = periodType35.equals((java.lang.Object) false);
        org.joda.time.Period period38 = duration31.toPeriod(periodType35);
        org.joda.time.PeriodType periodType39 = periodType35.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(periodType39);
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod40, (long) (byte) 1, (long) '#');
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod40.setSeconds((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT126000S" + "'", str34, "PT126000S");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0]");
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        int int8 = mutablePeriod3.getMonths();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod13.add((long) ' ');
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        mutablePeriod13.setPeriod((long) (short) 0, chronology30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.secondOfMinute();
        boolean boolean50 = mutablePeriod13.equals((java.lang.Object) chronology45);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.centuryOfEra();
        mutablePeriod3.add(1644572120450L, chronology45);
        mutablePeriod3.setDays(4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        int int10 = mutablePeriod4.size();
        mutablePeriod4.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod4.toMutablePeriod();
        int int15 = mutablePeriod13.getValue(2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.weekyear();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyear();
        org.joda.time.ReadablePartial readablePartial41 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology34.set(readablePartial41, 1644572120402L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.withMillis(1644572115768L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        java.lang.String str17 = duration14.toString();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean20 = periodType18.equals((java.lang.Object) false);
        org.joda.time.Period period21 = duration14.toPeriod(periodType18);
        org.joda.time.PeriodType periodType22 = periodType18.withYearsRemoved();
        org.joda.time.Period period23 = duration12.toPeriod(periodType18);
        int int25 = period23.getValue(0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT126000S" + "'", str17, "PT126000S");
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology13.dayOfYear();
        org.joda.time.DurationField durationField32 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology13.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = chronology13.getDateTimeMillis(350L, (int) '4', 0, (int) 'a', 33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        java.lang.String str63 = periodType48.getName();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType48, chronology64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        long long72 = interval71.toDurationMillis();
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval71);
        boolean boolean74 = interval25.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime75 = interval25.getStart();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int77 = dateTime75.get(dateTimeFieldType76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Years" + "'", str63, "Years");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        boolean boolean32 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration25.toPeriod(periodType33, chronology34);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutablePeriod40.setPeriod(readablePeriod41);
        mutablePeriod40.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.days();
        int int46 = mutablePeriod40.get(durationFieldType45);
        boolean boolean47 = periodType33.isSupported(durationFieldType45);
        int int48 = periodType33.size();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.weeks();
        int int50 = periodType33.indexOf(durationFieldType49);
        mutablePeriod10.add(durationFieldType49, 4);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod54.addHours(0);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Period period73 = interval72.toPeriod();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        mutablePeriod54.setPeriod((org.joda.time.ReadableDuration) duration60, chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.secondOfMinute();
        boolean boolean79 = durationFieldType49.isSupported(chronology74);
        org.joda.time.DateTimeField dateTimeField80 = chronology74.year();
        org.joda.time.DateTimeField dateTimeField81 = chronology74.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod2.addHours(0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration8, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType0.getField(chronology22);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod34.addHours(10);
        int[] intArray39 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (short) 100, 1260100000L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        java.lang.Object obj49 = mutablePeriod47.clone();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) duration51, chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        mutablePeriod47.add((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Interval interval57 = interval55.toInterval();
        mutablePeriod34.setPeriod((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean62 = periodType60.equals((java.lang.Object) false);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Period period75 = interval74.toPeriod();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(1L, periodType60, chronology76);
        org.joda.time.MutablePeriod mutablePeriod78 = mutablePeriod77.toMutablePeriod();
        boolean boolean79 = interval57.equals((java.lang.Object) mutablePeriod77);
        org.joda.time.Interval interval80 = interval57.toInterval();
        org.joda.time.Duration duration81 = interval57.toDuration();
        long long82 = interval57.getStartMillis();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 2, 0, 14, 1, 39, 900]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(duration81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1644572128052L + "'", long82 == 1644572128052L);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutablePeriod52.clear();
        mutablePeriod52.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType62 = null;
        boolean boolean63 = mutablePeriod52.isSupported(durationFieldType62);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekyearOfCentury();
        mutablePeriod52.add((long) (short) 100, chronology78);
        org.joda.time.DurationField durationField82 = chronology78.halfdays();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, chronology78);
        org.joda.time.Period period84 = duration31.toPeriod();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology87);
        int int89 = mutablePeriod88.getYears();
        org.joda.time.DurationFieldType durationFieldType90 = null;
        boolean boolean91 = mutablePeriod88.isSupported(durationFieldType90);
        mutablePeriod88.clear();
        boolean boolean93 = period84.equals((java.lang.Object) mutablePeriod88);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant11, (org.joda.time.ReadableDuration) duration12, periodType13);
        org.joda.time.Duration duration16 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        org.joda.time.Duration duration17 = duration5.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes(1644572119917L);
        boolean boolean20 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        boolean boolean64 = interval49.contains((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Interval interval77 = interval76.toInterval();
        org.joda.time.DateTime dateTime78 = interval76.getEnd();
        java.lang.String str79 = dateTime78.toString();
        boolean boolean80 = dateTime63.isBefore((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Duration duration81 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone82 = dateTime63.getZone();
        org.joda.time.Period period83 = duration34.toPeriodTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period84 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean85 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-11T09:36:28.155Z" + "'", str79, "2022-02-11T09:36:28.155Z");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology13.getDateTimeMillis(97, (int) (byte) 100, (int) (byte) 0, (-124), (int) (short) -1, (-51), (-51));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -124 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.weekyear();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyear();
        org.joda.time.ReadablePartial readablePartial41 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology34.set(readablePartial41, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        mutablePeriod7.setDays(100);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str29 = durationFieldType28.toString();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Period period42 = interval41.toPeriod();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.secondOfMinute();
        org.joda.time.DurationField durationField48 = chronology43.months();
        boolean boolean49 = durationFieldType28.isSupported(chronology43);
        boolean boolean50 = mutablePeriod7.isSupported(durationFieldType28);
        mutablePeriod7.addMonths((int) (short) 1);
        java.lang.String str53 = mutablePeriod7.toString();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyears" + "'", str29, "weekyears");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "P1M100DT1M40S" + "'", str53, "P1M100DT1M40S");
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572171990L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572171990 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter38.getLocale();
        boolean boolean42 = periodFormatter38.isPrinter();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter38.withLocale(locale43);
        java.lang.StringBuffer stringBuffer45 = null;
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        boolean boolean63 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration56.toPeriod(periodType64, chronology65);
        org.joda.time.PeriodType periodType67 = periodType64.withYearsRemoved();
        org.joda.time.PeriodType periodType68 = periodType64.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType68);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter38.printTo(stringBuffer45, (org.joda.time.ReadablePeriod) mutablePeriod69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.add((long) ' ');
        int int15 = mutablePeriod12.getDays();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        mutablePeriod12.add(durationFieldType16, (int) (byte) 1);
        int int19 = mutablePeriod12.getWeeks();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        boolean boolean40 = mutablePeriod12.isSupported(durationFieldType37);
        int int41 = mutablePeriod3.get(durationFieldType37);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod3, periodType42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        boolean boolean71 = interval56.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology72 = interval56.getChronology();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval56);
        mutablePeriod3.setWeeks(0);
        mutablePeriod3.setValue((int) (byte) 1, 340);
        mutablePeriod3.addMonths((-53));
        // The following exception was thrown during execution in test generation
        try {
            int int82 = mutablePeriod3.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod7.toMutablePeriod();
        mutablePeriod7.setSeconds(0);
        mutablePeriod7.addWeeks(0);
        mutablePeriod7.addSeconds((int) (byte) 0);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.millis(1644572120402L);
        boolean boolean6 = mutablePeriod3.equals((java.lang.Object) duration5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod14.copy();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        boolean boolean42 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration35.toPeriod(periodType43, chronology44);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutablePeriod50.setPeriod(readablePeriod51);
        mutablePeriod50.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.days();
        int int56 = mutablePeriod50.get(durationFieldType55);
        boolean boolean57 = periodType43.isSupported(durationFieldType55);
        mutablePeriod14.set(durationFieldType55, (int) '4');
        java.lang.String str60 = durationFieldType55.getName();
        java.lang.String str61 = durationFieldType55.toString();
        boolean boolean62 = mutablePeriod3.isSupported(durationFieldType55);
        mutablePeriod3.add((long) 100);
        mutablePeriod3.addMillis(340);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "days" + "'", str60, "days");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "days" + "'", str61, "days");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        java.lang.String str44 = dateTime43.toString();
        boolean boolean45 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime28);
        mutablePeriod1.setPeriod(1644572126356L, 0L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        mutablePeriod1.add(1643312029538L, chronology64);
        org.joda.time.format.PeriodPrinter periodPrinter66 = null;
        org.joda.time.format.PeriodParser periodParser67 = null;
        org.joda.time.format.PeriodFormatter periodFormatter68 = new org.joda.time.format.PeriodFormatter(periodPrinter66, periodParser67);
        java.util.Locale locale69 = periodFormatter68.getLocale();
        boolean boolean70 = periodFormatter68.isParser();
        boolean boolean71 = periodFormatter68.isParser();
        boolean boolean72 = periodFormatter68.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = mutablePeriod1.toString(periodFormatter68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:36:29.296Z" + "'", str44, "2022-02-11T09:36:29.296Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withWeeksRemoved();
        org.joda.time.PeriodType periodType4 = periodType1.withMinutesRemoved();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod18.copy();
        org.joda.time.PeriodType periodType30 = mutablePeriod18.getPeriodType();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod35.add((long) ' ');
        mutablePeriod35.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutablePeriod44.setPeriod(readablePeriod45);
        mutablePeriod44.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.days();
        int int50 = mutablePeriod44.get(durationFieldType49);
        boolean boolean51 = mutablePeriod35.isSupported(durationFieldType49);
        int int52 = periodType31.indexOf(durationFieldType49);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) duration10, periodType31, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.hourOfDay();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology75);
        mutablePeriod72.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DurationFieldType[] durationFieldTypeArray78 = mutablePeriod76.getFieldTypes();
        int[] intArray81 = chronology66.get((org.joda.time.ReadablePeriod) mutablePeriod76, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField82 = chronology66.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField83 = chronology66.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology66);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(100L, (-124L), chronology66);
        org.joda.time.DateTimeField dateTimeField86 = chronology66.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField87 = chronology66.yearOfCentury();
        org.joda.time.DurationField durationField88 = chronology66.days();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(1644572155419L, periodType4, chronology66);
        org.joda.time.ReadablePartial readablePartial90 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long92 = chronology66.set(readablePartial90, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Days" + "'", str2, "Days");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationFieldTypeArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationField88);
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration23 = new org.joda.time.Duration((java.lang.Object) periodType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = interval11.isAfter(readableInterval12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getEnd();
        boolean boolean41 = interval26.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.DateTime dateTime67 = interval65.getEnd();
        org.joda.time.Duration duration68 = interval65.toDuration();
        boolean boolean69 = interval53.overlaps((org.joda.time.ReadableInterval) interval65);
        boolean boolean70 = interval26.isBefore((org.joda.time.ReadableInterval) interval53);
        boolean boolean71 = interval11.equals((java.lang.Object) boolean70);
        java.lang.String str72 = interval11.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-01-27T19:34:49.636Z/2022-02-11T09:36:29.636Z" + "'", str72, "2022-01-27T19:34:49.636Z/2022-02-11T09:36:29.636Z");
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        mutablePeriod1.addYears(2);
        org.joda.time.PeriodType periodType6 = mutablePeriod1.getPeriodType();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean10 = periodType8.equals((java.lang.Object) false);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, periodType8, chronology24);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod25.toMutablePeriod();
        mutablePeriod1.add((org.joda.time.ReadablePeriod) mutablePeriod25);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod25.setHours(33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(mutablePeriod26);
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.secondOfMinute();
        org.joda.time.DurationField durationField31 = chronology26.weekyears();
        org.joda.time.DurationField durationField32 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfMonth();
        mutablePeriod11.add((long) 3, chronology26);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = interval48.isAfter(readableInterval49);
        org.joda.time.Chronology chronology51 = interval48.getChronology();
        mutablePeriod11.setPeriod(1644572118532L, 1644572142121L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod56.setMillis((int) (short) 0);
        mutablePeriod56.addMonths((int) (short) 1);
        mutablePeriod56.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = mutablePeriod56.getFieldTypes();
        mutablePeriod56.addMonths(0);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod69.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod69.add((org.joda.time.ReadablePeriod) mutablePeriod73);
        mutablePeriod56.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.MutablePeriod mutablePeriod76 = mutablePeriod73.toMutablePeriod();
        boolean boolean77 = mutablePeriod11.equals((java.lang.Object) mutablePeriod76);
        mutablePeriod11.setPeriod(1644572145972L);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod(0, 32, 100, (int) (byte) 100, (int) (byte) -1, 8, (int) (byte) 0, 10);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.add((org.joda.time.ReadablePeriod) mutablePeriod88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = chronology34.getDateTimeMillis(97, 18, 51, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        int int6 = mutablePeriod5.getYears();
        java.lang.String str7 = mutablePeriod5.toString();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        mutablePeriod5.add((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant18, readableInstant19);
        boolean boolean21 = mutablePeriod12.equals((java.lang.Object) readableInstant18);
        org.joda.time.Period period22 = mutablePeriod12.toPeriod();
        boolean boolean23 = mutablePeriod1.equals((java.lang.Object) period22);
        int int24 = period22.size();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.052S" + "'", str7, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        boolean boolean53 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((long) (-1), (-1));
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        boolean boolean73 = duration60.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration66.toPeriod(periodType74, chronology75);
        org.joda.time.PeriodType periodType77 = periodType74.withYearsRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withDaysRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration50, periodType79);
        int int81 = periodType79.size();
        org.joda.time.PeriodType periodType82 = periodType79.withWeeksRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:36:29.831Z" + "'", str42, "2022-02-11T09:36:29.831Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(periodType82);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        int int35 = mutablePeriod33.get(durationFieldType34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.secondOfMinute();
        org.joda.time.DurationField durationField54 = chronology49.weekyears();
        org.joda.time.DurationField durationField55 = chronology49.millis();
        boolean boolean56 = durationFieldType34.isSupported(chronology49);
        org.joda.time.DateTimeField dateTimeField57 = chronology49.year();
        // The following exception was thrown during execution in test generation
        try {
            long long62 = chronology49.getDateTimeMillis((int) '4', (int) (byte) -1, 32, 97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.millisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod9.addHours(0);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        boolean boolean13 = mutablePeriod9.isSupported(durationFieldType12);
        org.joda.time.PeriodType periodType14 = mutablePeriod9.getPeriodType();
        mutablePeriod9.setMinutes(0);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter6.printTo(stringBuffer7, (org.joda.time.ReadablePeriod) mutablePeriod9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (-1), (int) (short) 1, 10);
        mutablePeriod4.addHours(8);
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        int int38 = mutablePeriod37.size();
        mutablePeriod37.addWeeks(102);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        mutablePeriod38.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        int int55 = mutablePeriod49.get(durationFieldType54);
        mutablePeriod38.add(durationFieldType54, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod68 = mutablePeriod38.copy();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = mutablePeriod68.get(durationFieldType69);
        long long73 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) ' ', 3);
        org.joda.time.DurationField durationField74 = chronology29.seconds();
        org.joda.time.DurationField durationField75 = chronology29.hours();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-124L) + "'", long73 == (-124L));
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.DurationField durationField16 = chronology13.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.yearOfEra();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) (byte) 100, (int) (short) 100, 0, (int) (byte) 1, 0, (int) 'a', (int) (short) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        int int26 = mutablePeriod25.getYears();
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod25.copy();
        mutablePeriod27.setYears((int) (short) 10);
        mutablePeriod27.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        mutablePeriod27.setPeriod((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        mutablePeriod27.add((org.joda.time.ReadableInterval) interval64);
        boolean boolean67 = interval21.contains((org.joda.time.ReadableInterval) interval64);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval64);
        mutablePeriod8.setMonths((-1));
        mutablePeriod8.addDays(35);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) (byte) 100, (int) (short) 100, 0, (int) (byte) 1, 0, (int) 'a', (int) (short) -1);
        mutablePeriod8.setHours(340);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = mutablePeriod8.getValue(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.minutes();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(9867432953891L, 1644572174522L, periodType2);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.addDays(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = mutablePeriod7.getFieldTypes();
        mutablePeriod7.addHours((int) (short) 0);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod22.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod22.copy();
        org.joda.time.PeriodType periodType34 = mutablePeriod22.getPeriodType();
        org.joda.time.PeriodType periodType35 = periodType34.withWeeksRemoved();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod39.add((long) ' ');
        mutablePeriod39.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutablePeriod48.setPeriod(readablePeriod49);
        mutablePeriod48.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.days();
        int int54 = mutablePeriod48.get(durationFieldType53);
        boolean boolean55 = mutablePeriod39.isSupported(durationFieldType53);
        int int56 = periodType35.indexOf(durationFieldType53);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Period period69 = interval68.toPeriod();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((java.lang.Object) duration14, periodType35, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.hourOfDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology79);
        mutablePeriod76.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.DurationFieldType[] durationFieldTypeArray82 = mutablePeriod80.getFieldTypes();
        int[] intArray85 = chronology70.get((org.joda.time.ReadablePeriod) mutablePeriod80, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField86 = chronology70.minuteOfDay();
        org.joda.time.DurationField durationField87 = chronology70.months();
        mutablePeriod7.add(1644572168146L, chronology70);
        org.joda.time.DurationField durationField89 = chronology70.hours();
        org.joda.time.DateTimeField dateTimeField90 = chronology70.monthOfYear();
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationFieldTypeArray82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Hours hours64 = duration63.toStandardHours();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Duration duration66 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant65, (org.joda.time.ReadableDuration) duration66, periodType67);
        org.joda.time.Duration duration70 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration66, 10);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration66);
        int[] intArray72 = mutablePeriod71.getValues();
        mutablePeriod71.addWeeks((-53));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(hours64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology29.days();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology29.yearOfEra();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.days();
        boolean boolean5 = mutablePeriod1.isSupported(durationFieldType4);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        mutablePeriod19.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod19.copy();
        org.joda.time.PeriodType periodType31 = mutablePeriod19.getPeriodType();
        org.joda.time.PeriodType periodType32 = periodType31.withWeeksRemoved();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod36.add((long) ' ');
        mutablePeriod36.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        mutablePeriod45.setPeriod(readablePeriod46);
        mutablePeriod45.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.days();
        int int51 = mutablePeriod45.get(durationFieldType50);
        boolean boolean52 = mutablePeriod36.isSupported(durationFieldType50);
        int int53 = periodType32.indexOf(durationFieldType50);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        org.joda.time.Period period66 = interval65.toPeriod();
        org.joda.time.Chronology chronology67 = interval65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, periodType32, chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.hourOfDay();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology76);
        mutablePeriod73.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod77);
        org.joda.time.DurationFieldType[] durationFieldTypeArray79 = mutablePeriod77.getFieldTypes();
        int[] intArray82 = chronology67.get((org.joda.time.ReadablePeriod) mutablePeriod77, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField83 = chronology67.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField84 = chronology67.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology67);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(100L, (-124L), chronology67);
        org.joda.time.DateTimeField dateTimeField87 = chronology67.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField88 = chronology67.dayOfWeek();
        org.joda.time.DurationField durationField89 = durationFieldType4.getField(chronology67);
        java.lang.String str90 = durationFieldType4.getName();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationFieldTypeArray79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "days" + "'", str90, "days");
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter38.isPrinter();
        java.util.Locale locale40 = periodFormatter38.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod42 = periodFormatter38.parseMutablePeriod("P0Y");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(locale40);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) 1);
        int int16 = duration10.compareTo((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Minutes minutes17 = duration10.toStandardMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType19 = minutes17.getFieldType((-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(minutes17);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutablePeriod52.clear();
        mutablePeriod52.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType62 = null;
        boolean boolean63 = mutablePeriod52.isSupported(durationFieldType62);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekyearOfCentury();
        mutablePeriod52.add((long) (short) 100, chronology78);
        org.joda.time.DurationField durationField82 = chronology78.halfdays();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, chronology78);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod83.setValue((-53), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Seconds seconds14 = duration10.toStandardSeconds();
        long long15 = duration10.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withSecondsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, periodType3);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        int int11 = mutablePeriod10.getYears();
        java.lang.String str12 = mutablePeriod10.toString();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutablePeriod17.setPeriod(readablePeriod18);
        mutablePeriod17.addWeeks((int) (byte) 10);
        mutablePeriod10.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24);
        boolean boolean26 = mutablePeriod17.equals((java.lang.Object) readableInstant23);
        org.joda.time.Period period27 = mutablePeriod17.toPeriod();
        org.joda.time.Period period28 = mutablePeriod17.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod6.add((org.joda.time.ReadablePeriod) period28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Days" + "'", str2, "Days");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.052S" + "'", str12, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.setWeeks((int) (short) 100);
        java.lang.String str23 = mutablePeriod18.toString();
        java.lang.String str24 = mutablePeriod18.toString();
        mutablePeriod18.setWeeks(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType28 = mutablePeriod18.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P100WT0.087S" + "'", str23, "P100WT0.087S");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P100WT0.087S" + "'", str24, "P100WT0.087S");
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter38.getLocale();
        boolean boolean42 = periodFormatter38.isPrinter();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        mutablePeriod46.clear();
        mutablePeriod46.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType56 = null;
        boolean boolean57 = mutablePeriod46.isSupported(durationFieldType56);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Period period71 = interval70.toPeriod();
        org.joda.time.Chronology chronology72 = interval70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.hourOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.weekyearOfCentury();
        mutablePeriod46.add((long) (short) 100, chronology72);
        org.joda.time.Period period76 = mutablePeriod46.toPeriod();
        mutablePeriod46.setPeriod(4, (int) (short) 0, 0, 32, 0, (int) (short) 1, 2, (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = periodFormatter38.print((org.joda.time.ReadablePeriod) mutablePeriod46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod11.setMillis((int) (short) 0);
        mutablePeriod11.addMonths((int) (short) 1);
        int int16 = mutablePeriod11.size();
        int int17 = mutablePeriod11.getWeeks();
        mutablePeriod11.setYears(8);
        mutablePeriod11.addSeconds(1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = interval33.isAfter(readableInterval34);
        org.joda.time.Chronology chronology36 = interval33.getChronology();
        mutablePeriod11.setPeriod((org.joda.time.ReadableInterval) interval33);
        org.joda.time.format.PeriodPrinter periodPrinter38 = null;
        org.joda.time.format.PeriodParser periodParser39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = new org.joda.time.format.PeriodFormatter(periodPrinter38, periodParser39);
        java.util.Locale locale41 = periodFormatter40.getLocale();
        java.util.Locale locale42 = periodFormatter40.getLocale();
        org.joda.time.format.PeriodParser periodParser43 = periodFormatter40.getParser();
        org.joda.time.PeriodType periodType44 = periodFormatter40.getParseType();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        boolean boolean61 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration54.toPeriod(periodType62, chronology63);
        org.joda.time.PeriodType periodType65 = periodType62.withYearsRemoved();
        org.joda.time.PeriodType periodType66 = periodType62.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter67 = periodFormatter40.withParseType(periodType62);
        org.joda.time.PeriodType periodType68 = periodType62.withMonthsRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withMinutesRemoved();
        org.joda.time.Period period70 = interval33.toPeriod(periodType68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(10, (-52), 8, 456825, (int) (short) 0, (int) (byte) 100, (int) (short) -1, 100, periodType68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNull(periodParser43);
        org.junit.Assert.assertNull(periodType44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodFormatter67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        java.lang.String str11 = duration8.toString();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean14 = periodType12.equals((java.lang.Object) false);
        org.joda.time.Period period15 = duration8.toPeriod(periodType12);
        org.joda.time.PeriodType periodType16 = periodType12.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        boolean boolean18 = periodType12.equals((java.lang.Object) periodType17);
        org.joda.time.PeriodType periodType19 = periodType12.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        boolean boolean21 = periodType12.isSupported(durationFieldType20);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withParseType(periodType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType24 = periodType12.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT126000S" + "'", str11, "PT126000S");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodFormatter22);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField20 = chronology15.months();
        boolean boolean21 = durationFieldType0.isSupported(chronology15);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutablePeriod26.setPeriod(readablePeriod27);
        mutablePeriod26.addWeeks((int) (byte) 10);
        int int31 = mutablePeriod26.getMonths();
        mutablePeriod26.addDays(10);
        mutablePeriod26.setWeeks((int) (byte) -1);
        mutablePeriod26.addWeeks(8);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology66);
        org.joda.time.DateTimeField dateTimeField70 = chronology66.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((java.lang.Object) period50, chronology66);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod26, chronology66);
        long long80 = chronology66.getDateTimeMillis((int) (short) 1, 3, (int) (byte) 1, 0, (int) '#', (int) (short) 10, 0);
        org.joda.time.DateTimeField dateTimeField81 = chronology66.dayOfWeek();
        org.joda.time.DurationField durationField82 = durationFieldType0.getField(chronology66);
        org.joda.time.DurationField durationField83 = chronology66.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long91 = chronology66.getDateTimeMillis((int) (short) 0, (-53), (int) (short) 10, (-19), (int) (byte) 0, 5, 80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-62130497090000L) + "'", long80 == (-62130497090000L));
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod24.add((long) ' ');
        mutablePeriod24.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        int int39 = mutablePeriod33.get(durationFieldType38);
        boolean boolean40 = mutablePeriod24.isSupported(durationFieldType38);
        int int41 = periodType20.indexOf(durationFieldType38);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Period period54 = interval53.toPeriod();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.days();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.millisOfDay();
        org.joda.time.DurationField durationField59 = durationFieldType38.getField(chronology55);
        java.lang.String str60 = durationFieldType38.getName();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "days" + "'", str60, "days");
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod24.addHours(0);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        boolean boolean28 = mutablePeriod24.isSupported(durationFieldType27);
        mutablePeriod1.set(durationFieldType27, (-1));
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod1.toMutablePeriod();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod35.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        int[] intArray39 = mutablePeriod35.getValues();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        boolean boolean56 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration49.toPeriod(periodType57, chronology58);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutablePeriod64.setPeriod(readablePeriod65);
        mutablePeriod64.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.days();
        int int70 = mutablePeriod64.get(durationFieldType69);
        boolean boolean71 = periodType57.isSupported(durationFieldType69);
        mutablePeriod35.set(durationFieldType69, 8);
        mutablePeriod1.set(durationFieldType69, (int) ' ');
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        java.lang.String str34 = duration31.toString();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean37 = periodType35.equals((java.lang.Object) false);
        org.joda.time.Period period38 = duration31.toPeriod(periodType35);
        org.joda.time.PeriodType periodType39 = periodType35.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(periodType39);
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod40, (long) (byte) 1, (long) '#');
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyear();
        boolean boolean60 = mutablePeriod40.equals((java.lang.Object) dateTimeField59);
        mutablePeriod40.setPeriod((-62130497090000L));
        mutablePeriod40.addWeeks((-1));
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology71);
        mutablePeriod68.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        mutablePeriod68.clear();
        mutablePeriod68.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType78 = null;
        boolean boolean79 = mutablePeriod68.isSupported(durationFieldType78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology82);
        int int84 = mutablePeriod83.getWeeks();
        mutablePeriod68.add((org.joda.time.ReadablePeriod) mutablePeriod83);
        mutablePeriod83.setWeeks((int) (short) 100);
        mutablePeriod83.addWeeks((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT126000S" + "'", str34, "PT126000S");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.days();
        boolean boolean5 = mutablePeriod1.isSupported(durationFieldType4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        mutablePeriod29.add((long) ' ');
        mutablePeriod29.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutablePeriod38.setPeriod(readablePeriod39);
        mutablePeriod38.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.days();
        int int44 = mutablePeriod38.get(durationFieldType43);
        boolean boolean45 = mutablePeriod29.isSupported(durationFieldType43);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant46, readableInstant47);
        mutablePeriod48.addWeeks((int) 'a');
        mutablePeriod29.add((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.seconds();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        boolean boolean69 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration62.toPeriod(periodType70, chronology71);
        org.joda.time.PeriodType periodType73 = periodType70.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.months();
        int int75 = periodType73.indexOf(durationFieldType74);
        int int76 = periodType52.indexOf(durationFieldType74);
        mutablePeriod29.add(durationFieldType74, (int) (byte) -1);
        int int79 = mutablePeriod13.get(durationFieldType74);
        int int80 = mutablePeriod1.get(durationFieldType74);
        int int81 = mutablePeriod1.getSeconds();
        mutablePeriod1.addDays((int) (short) 10);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType14, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = chronology36.minuteOfDay();
        org.joda.time.DurationField durationField44 = chronology36.halfdays();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 10, chronology36);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        boolean boolean62 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Minutes minutes63 = duration49.toStandardMinutes();
        int[] intArray65 = chronology36.get((org.joda.time.ReadablePeriod) minutes63, (long) (-53));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration66 = new org.joda.time.Duration((java.lang.Object) intArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: [I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.months();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(periodType22);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1644572120402L, 0L, periodType22);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(periodType22);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Minutes minutes17 = duration3.toStandardMinutes();
        org.joda.time.Duration duration19 = duration3.plus((long) 8);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getEnd();
        boolean boolean47 = interval32.contains((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Instant instant48 = dateTime46.toInstant();
        org.joda.time.Period period49 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeZone dateTimeZone50 = instant48.getZone();
        java.lang.String str51 = instant48.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:36:32.124Z" + "'", str51, "2022-02-11T09:36:32.124Z");
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        int int4 = mutablePeriod3.getWeeks();
        java.lang.Object obj5 = mutablePeriod3.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod9.clear();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        mutablePeriod27.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod27.copy();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = mutablePeriod27.toDurationTo(readableInstant39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology43 = null;
        mutablePeriod27.setPeriod((org.joda.time.ReadableDuration) duration42, chronology43);
        boolean boolean45 = duration19.isEqual((org.joda.time.ReadableDuration) duration42);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getEnd();
        boolean boolean75 = interval60.contains((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Interval interval88 = interval87.toInterval();
        org.joda.time.DateTime dateTime89 = interval87.getEnd();
        java.lang.String str90 = dateTime89.toString();
        boolean boolean91 = dateTime74.isBefore((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Duration duration92 = mutablePeriod47.toDurationFrom((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone93 = dateTime74.getZone();
        org.joda.time.Period period94 = duration19.toPeriodTo((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod(readableDuration17, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone96 = dateTime74.getZone();
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod(readableDuration16, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration98 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateTime74);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT0.087S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT0.087S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT0.087S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "2022-02-11T09:36:32.221Z" + "'", str90, "2022-02-11T09:36:32.221Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertNotNull(duration98);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = mutablePeriod7.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration24, chronology25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        int int41 = mutablePeriod40.getYears();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod40.copy();
        mutablePeriod42.setYears((int) (short) 10);
        mutablePeriod42.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        org.joda.time.Interval interval66 = interval65.toInterval();
        mutablePeriod42.setPeriod((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = duration75.toPeriod(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = duration75.toIntervalTo(readableInstant78);
        org.joda.time.Interval interval80 = interval79.toInterval();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        org.joda.time.Duration duration88 = duration82.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = duration88.toPeriod(chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = duration88.toIntervalTo(readableInstant91);
        org.joda.time.Interval interval93 = interval92.toInterval();
        org.joda.time.DateTime dateTime94 = interval92.getEnd();
        boolean boolean95 = interval80.contains((org.joda.time.ReadableInstant) dateTime94);
        boolean boolean96 = interval66.isBefore((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.Period period97 = duration34.toPeriodTo((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.Interval interval98 = duration24.toIntervalFrom((org.joda.time.ReadableInstant) dateTime94);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval98);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertNotNull(interval98);
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        mutablePeriod7.setWeeks((int) (short) 10);
        mutablePeriod7.add(4, (int) '4', (int) 'a', 0, 32, 100, 8, (int) (short) 0);
        mutablePeriod7.add((-1), (-53), 100, (int) 'a', 10, 7, 5, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = mutablePeriod7.getValue(18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 18");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter40.withLocale(locale41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        mutablePeriod50.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod61 = mutablePeriod50.copy();
        mutablePeriod50.setMillis((int) ' ');
        mutablePeriod50.addDays(0);
        mutablePeriod50.add(7, (-51), (-19), 340, 340, (int) '#', 51, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = periodFormatter42.print((org.joda.time.ReadablePeriod) mutablePeriod50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(mutablePeriod61);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = mutablePeriod63.getFieldTypes();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.forFields(durationFieldTypeArray65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod68.addHours(0);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = duration76.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Period period84 = duration82.toPeriod(chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        org.joda.time.Period period87 = interval86.toPeriod();
        org.joda.time.Chronology chronology88 = interval86.getChronology();
        mutablePeriod68.setPeriod((org.joda.time.ReadableDuration) duration74, chronology88);
        org.joda.time.DateTimeField dateTimeField90 = chronology88.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType66, chronology88);
        org.joda.time.DateTimeField dateTimeField92 = chronology88.halfdayOfDay();
        org.joda.time.DurationField durationField93 = chronology88.months();
        org.joda.time.DateTimeField dateTimeField94 = chronology88.clockhourOfHalfday();
        org.joda.time.Period period95 = duration53.toPeriod(chronology88);
        org.joda.time.Duration duration97 = duration53.minus(1644572142744L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:36:32.586Z" + "'", str51, "2022-02-11T09:36:32.586Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(duration97);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        int int10 = mutablePeriod4.size();
        mutablePeriod4.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod4.toMutablePeriod();
        int int14 = mutablePeriod13.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType16 = mutablePeriod13.getFieldType(8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1644572154810L);
        org.joda.time.Duration duration3 = duration1.withMillis(1644572115768L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.centuryOfEra();
        org.joda.time.DurationField durationField36 = chronology29.halfdays();
        org.joda.time.ReadablePartial readablePartial37 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray39 = chronology29.get(readablePartial37, (-62130497090000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getEnd();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology20 = interval16.getChronology();
        long long21 = interval16.toDurationMillis();
        org.joda.time.Period period22 = interval16.toPeriod();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1260100000L + "'", long21 == 1260100000L);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        boolean boolean26 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration28 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) 'a');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod32.add((long) ' ');
        int int35 = mutablePeriod32.getDays();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.millis();
        mutablePeriod32.add(durationFieldType36, (int) (byte) 1);
        int int39 = mutablePeriod32.getWeeks();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        mutablePeriod43.add((long) ' ');
        mutablePeriod43.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutablePeriod52.setPeriod(readablePeriod53);
        mutablePeriod52.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.days();
        int int58 = mutablePeriod52.get(durationFieldType57);
        boolean boolean59 = mutablePeriod43.isSupported(durationFieldType57);
        boolean boolean60 = mutablePeriod32.isSupported(durationFieldType57);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Duration duration62 = mutablePeriod32.toDurationTo(readableInstant61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration66.withMillis((long) (-1));
        org.joda.time.Duration duration71 = duration68.withDurationAdded(0L, (int) (short) 10);
        int int72 = duration62.compareTo((org.joda.time.ReadableDuration) duration71);
        boolean boolean73 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration62);
        long long74 = duration62.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            long long81 = chronology74.getDateTimeMillis(1, (-53), (int) (short) 0, (-51));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -51 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:36:32.937Z" + "'", str42, "2022-02-11T09:36:32.937Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        long long54 = duration53.getStandardMinutes();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        boolean boolean71 = duration58.isShorterThan((org.joda.time.ReadableDuration) duration64);
        int int72 = duration53.compareTo((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Days days73 = duration64.toStandardDays();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology76);
        mutablePeriod77.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod80 = mutablePeriod77.toMutablePeriod();
        boolean boolean81 = duration64.equals((java.lang.Object) mutablePeriod77);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod77.setValue((-52), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:36:32.957Z" + "'", str51, "2022-02-11T09:36:32.957Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(days73);
        org.junit.Assert.assertNotNull(mutablePeriod80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        boolean boolean46 = mutablePeriod30.isSupported(durationFieldType44);
        int int47 = periodType26.indexOf(durationFieldType44);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, periodType26, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.hourOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = mutablePeriod71.getFieldTypes();
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePeriod) mutablePeriod71, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField77 = chronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = chronology61.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology61);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(100L, (-124L), chronology61);
        mutablePeriod80.addMillis(100);
        mutablePeriod80.add((int) 'a', (int) (short) 100, 100, 0, 2, (int) (short) 100, (int) (short) 100, 0);
        mutablePeriod80.setPeriod((long) 102, 1643312076880L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.format.PeriodFormatter periodFormatter33 = null;
        java.lang.String str34 = mutablePeriod26.toString(periodFormatter33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        org.joda.time.Duration duration61 = interval58.toDuration();
        boolean boolean62 = interval46.overlaps((org.joda.time.ReadableInterval) interval58);
        mutablePeriod26.setPeriod((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Period period76 = interval75.toPeriod();
        org.joda.time.Period period77 = interval75.toPeriod();
        boolean boolean78 = interval58.isBefore((org.joda.time.ReadableInterval) interval75);
        long long79 = interval75.getStartMillis();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.052S" + "'", str34, "PT0.052S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1643312093220L + "'", long79 == 1643312093220L);
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod11.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod11.toMutablePeriod();
        int[] intArray15 = mutablePeriod11.getValues();
        mutablePeriod11.addHours(0);
        mutablePeriod11.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = mutablePeriod11.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod11, "2022-02-11T09:36:29.831Z", (-19));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration9.toPeriod(chronology17);
        org.joda.time.Duration duration20 = duration9.withMillis(1644572149231L);
        org.joda.time.Minutes minutes21 = duration20.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(minutes21);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        boolean boolean4 = periodFormatter3.isPrinter();
        org.joda.time.PeriodType periodType5 = periodFormatter3.getParseType();
        java.util.Locale locale6 = periodFormatter3.getLocale();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter3.withLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod9 = org.joda.time.MutablePeriod.parse("2022-01-27T19:34:39.909Z/2022-02-11T09:36:19.909Z", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodType5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(periodFormatter8);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter41.getParser();
        java.util.Locale locale43 = periodFormatter41.getLocale();
        boolean boolean44 = periodFormatter41.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod45 = org.joda.time.MutablePeriod.parse("", periodFormatter41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNull(periodParser42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        int int4 = mutablePeriod3.getWeeks();
        java.lang.Object obj5 = mutablePeriod3.clone();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology20.halfdays();
        mutablePeriod3.add((long) (-52), chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.yearOfEra();
        org.joda.time.DurationField durationField28 = chronology20.halfdays();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT0.035S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT0.035S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT0.035S");
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.secondOfDay();
        org.joda.time.DurationField durationField19 = chronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.millisOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.addHours(0);
        mutablePeriod3.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.add((long) 32);
        mutablePeriod3.clear();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = chronology21.getDateTimeMillis((-156L), (int) (short) -1, 35, 5, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:44.200Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:44.200Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutablePeriod38.setPeriod(readablePeriod39);
        mutablePeriod38.addWeeks((int) (byte) 10);
        int int43 = mutablePeriod38.getMonths();
        int int44 = mutablePeriod38.size();
        mutablePeriod38.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod38.toMutablePeriod();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes((long) 1);
        mutablePeriod47.add((org.joda.time.ReadableDuration) duration49);
        mutablePeriod33.add((org.joda.time.ReadableDuration) duration49);
        mutablePeriod33.setDays(7);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(duration49);
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Days days8 = duration7.toStandardDays();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (short) -1, periodType10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Period period26 = duration7.toPeriod(periodType10, chronology25);
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        long long32 = chronology25.add(125999992L, 1644572174829L, 18);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 29602425146914L + "'", long32 == 29602425146914L);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.yearOfEra();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:56.554Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:56.554Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        int int13 = mutablePeriod12.getYears();
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod12.copy();
        mutablePeriod14.setYears((int) (short) 10);
        mutablePeriod14.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        mutablePeriod14.setPeriod((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.DateTime dateTime66 = interval64.getEnd();
        boolean boolean67 = interval52.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Duration duration75 = duration73.plus(readableDuration74);
        org.joda.time.Duration duration77 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) (byte) 10);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        boolean boolean86 = duration73.isShorterThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration79.toPeriod(periodType87, chronology88);
        org.joda.time.PeriodType periodType90 = periodType87.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.months();
        int int92 = periodType90.indexOf(durationFieldType91);
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((java.lang.Object) interval38, periodType90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration94 = new org.joda.time.Duration((java.lang.Object) mutablePeriod93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology15.halfdays();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1644572120402L, (long) (byte) 10, chronology15);
        mutablePeriod21.addHours(102);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        mutablePeriod33.addSeconds((int) (short) 0);
        int int74 = mutablePeriod33.getDays();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        long long12 = duration7.getStandardHours();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        int int17 = mutablePeriod16.getMinutes();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod21.setMillis((int) (short) 0);
        mutablePeriod21.addMonths((int) (short) 1);
        mutablePeriod21.setMinutes((int) (byte) 1);
        mutablePeriod21.addYears(1);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        boolean boolean36 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration33);
        mutablePeriod21.add((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int41 = duration31.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        org.joda.time.Period period56 = duration40.toPeriodTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration57 = mutablePeriod16.toDurationTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = duration7.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Period period73 = interval72.toPeriod();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.days();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.millisOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology74);
        org.joda.time.DurationField durationField80 = chronology74.centuries();
        org.joda.time.DateTimeField dateTimeField81 = chronology74.millisOfSecond();
        org.joda.time.DurationField durationField82 = chronology74.days();
        org.joda.time.DurationField durationField83 = chronology74.days();
        boolean boolean84 = duration7.equals((java.lang.Object) durationField83);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 350L + "'", long12 == 350L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter2.withParseType(periodType24);
        org.joda.time.format.PeriodParser periodParser26 = periodFormatter2.getParser();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutablePeriod31.setPeriod(readablePeriod32);
        mutablePeriod31.addWeeks((int) (byte) 10);
        int int36 = mutablePeriod31.getMonths();
        mutablePeriod31.addDays(10);
        mutablePeriod31.setWeeks((int) (byte) -1);
        mutablePeriod31.addWeeks(8);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Period period70 = interval69.toPeriod();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.hourOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology71);
        org.joda.time.DateTimeField dateTimeField75 = chronology71.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((java.lang.Object) period55, chronology71);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod31, chronology71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNull(periodParser26);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-53), 100, (-20), (-19));
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) period12, chronology28);
        org.joda.time.DurationField durationField34 = chronology28.days();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 8, (long) '4');
        int[] intArray40 = chronology28.get((org.joda.time.ReadablePeriod) mutablePeriod37, 1644572118532L, (long) 2);
        org.joda.time.DateTimeField dateTimeField41 = chronology28.hourOfHalfday();
        org.joda.time.DurationField durationField42 = chronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = chronology28.halfdayOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-52, -1, -1, -3, -9, -35, -18, -530]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.addMillis(3);
        mutablePeriod3.add((int) (short) 0, 6, (int) (short) 1, (int) '#', (int) ' ', 102, 8, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1L, periodType1);
        mutablePeriod2.addDays(456825);
        mutablePeriod2.addMonths(35);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        mutablePeriod4.addDays((int) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.Object obj26 = mutablePeriod24.clone();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.Chronology chronology35 = interval32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        mutablePeriod4.setPeriod((long) 100, (long) 3, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.hourOfDay();
        org.joda.time.ReadablePartial readablePartial39 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long41 = chronology35.set(readablePartial39, 1644572122264L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.Chronology chronology22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-11T09:35:24.205Z", periodType18, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:24.205Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration79.toPeriod(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Interval interval83 = duration79.toIntervalTo(readableInstant82);
        org.joda.time.Interval interval84 = interval83.toInterval();
        org.joda.time.DateTime dateTime85 = interval83.getEnd();
        org.joda.time.Duration duration86 = interval83.toDuration();
        boolean boolean87 = interval71.overlaps((org.joda.time.ReadableInterval) interval83);
        org.joda.time.Chronology chronology88 = interval83.getChronology();
        boolean boolean89 = interval29.overlaps((org.joda.time.ReadableInterval) interval83);
        org.joda.time.MutableInterval mutableInterval90 = interval83.toMutableInterval();
        long long91 = interval83.toDurationMillis();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1260100000L + "'", long91 == 1260100000L);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType24.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter2.withParseType(periodType24);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, periodType31);
        mutablePeriod32.addDays(456825);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = periodFormatter29.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod32, "2022-02-11T09:36:17.317Z", (-19));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        int int42 = periodType41.size();
        org.joda.time.PeriodType periodType43 = periodType41.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter40.withParseType(periodType43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod48.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod48.toMutablePeriod();
        int[] intArray52 = mutablePeriod48.getValues();
        mutablePeriod48.addHours(0);
        mutablePeriod48.setWeeks((int) '4');
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod58.addHours(0);
        org.joda.time.DurationFieldType durationFieldType61 = null;
        int int62 = mutablePeriod58.get(durationFieldType61);
        mutablePeriod58.addHours((int) 'a');
        mutablePeriod58.addMillis(1);
        mutablePeriod48.add((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Duration duration71 = duration69.plus(readableDuration70);
        java.lang.String str72 = duration69.toString();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean75 = periodType73.equals((java.lang.Object) false);
        org.joda.time.Period period76 = duration69.toPeriod(periodType73);
        org.joda.time.PeriodType periodType77 = periodType73.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(periodType77);
        org.joda.time.PeriodType periodType79 = periodType77.withSecondsRemoved();
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.time();
        boolean boolean81 = periodType77.equals((java.lang.Object) periodType80);
        boolean boolean82 = mutablePeriod48.equals((java.lang.Object) periodType77);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = periodFormatter40.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod48, "2022-02-11T09:35:14.542Z", 7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT126000S" + "'", str72, "PT126000S");
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = periodType18.isSupported(durationFieldType30);
        int int33 = periodType18.size();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        int int35 = periodType18.indexOf(durationFieldType34);
        org.joda.time.PeriodType periodType36 = periodType18.withDaysRemoved();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Period period51 = interval50.toPeriod();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.hourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekyearOfCentury();
        org.joda.time.DurationField durationField55 = chronology52.days();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology52.halfdays();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1644572120402L, (long) (byte) 10, chronology52);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(98674326653820000L, periodType18, chronology52);
        // The following exception was thrown during execution in test generation
        try {
            long long64 = chronology52.getDateTimeMillis((int) '4', (-51), (int) (byte) -1, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -51 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = mutablePeriod63.getFieldTypes();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.forFields(durationFieldTypeArray65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod68.addHours(0);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = duration76.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Period period84 = duration82.toPeriod(chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        org.joda.time.Period period87 = interval86.toPeriod();
        org.joda.time.Chronology chronology88 = interval86.getChronology();
        mutablePeriod68.setPeriod((org.joda.time.ReadableDuration) duration74, chronology88);
        org.joda.time.DateTimeField dateTimeField90 = chronology88.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType66, chronology88);
        org.joda.time.DateTimeField dateTimeField92 = chronology88.halfdayOfDay();
        org.joda.time.DurationField durationField93 = chronology88.months();
        org.joda.time.DateTimeField dateTimeField94 = chronology88.clockhourOfHalfday();
        org.joda.time.Period period95 = duration53.toPeriod(chronology88);
        org.joda.time.DateTimeField dateTimeField96 = chronology88.era();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:36:35.657Z" + "'", str51, "2022-02-11T09:36:35.657Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration17 = duration1.minus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod20.addHours(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Period period39 = interval38.toPeriod();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration26, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.halfdayOfDay();
        org.joda.time.DurationField durationField43 = durationFieldType18.getField(chronology40);
        org.joda.time.Period period44 = duration5.toPeriod(chronology40);
        long long45 = duration5.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        long long6 = interval5.toDurationMillis();
        org.joda.time.Period period7 = interval5.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) duration9, chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        boolean boolean27 = interval13.overlaps((org.joda.time.ReadableInterval) interval25);
        java.lang.String str28 = interval25.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod32.setMillis((int) (short) 0);
        mutablePeriod32.addMonths((int) (short) 1);
        mutablePeriod32.setMinutes((int) (byte) 1);
        mutablePeriod32.setYears((int) (short) 100);
        mutablePeriod32.addDays(1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        java.lang.Object obj52 = mutablePeriod50.clone();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((java.lang.Object) duration54, chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        mutablePeriod50.add((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.Duration duration61 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Duration duration71 = duration69.plus(readableDuration70);
        org.joda.time.Duration duration73 = duration67.withDurationAdded((org.joda.time.ReadableDuration) duration69, (int) (byte) 10);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Period period75 = duration73.toPeriod(chronology74);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.Interval interval77 = duration73.toIntervalTo(readableInstant76);
        org.joda.time.Interval interval78 = interval77.toInterval();
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Duration duration84 = duration82.plus(readableDuration83);
        org.joda.time.Duration duration86 = duration80.withDurationAdded((org.joda.time.ReadableDuration) duration82, (int) (byte) 10);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Period period88 = duration86.toPeriod(chronology87);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Interval interval90 = duration86.toIntervalTo(readableInstant89);
        org.joda.time.Interval interval91 = interval90.toInterval();
        org.joda.time.DateTime dateTime92 = interval90.getEnd();
        boolean boolean93 = interval78.contains((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Duration duration94 = mutablePeriod65.toDurationTo((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Period period95 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean96 = interval25.contains((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean97 = interval5.contains((org.joda.time.ReadableInterval) interval25);
        java.lang.String str98 = interval25.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 60000L + "'", long6 == 60000L);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-01-27T19:34:55.775Z/2022-02-11T09:36:35.775Z" + "'", str28, "2022-01-27T19:34:55.775Z/2022-02-11T09:36:35.775Z");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "2022-01-27T19:34:55.775Z/2022-02-11T09:36:35.775Z" + "'", str98, "2022-01-27T19:34:55.775Z/2022-02-11T09:36:35.775Z");
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        int int1 = periodType0.size();
        org.joda.time.PeriodType periodType2 = periodType0.withWeeksRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Days days8 = duration7.toStandardDays();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getEnd();
        boolean boolean40 = interval25.contains((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getEnd();
        java.lang.String str55 = dateTime54.toString();
        boolean boolean56 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime39.getZone();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardMinutes(1644572108797L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        java.lang.String str65 = duration62.toString();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean68 = periodType66.equals((java.lang.Object) false);
        org.joda.time.Period period69 = duration62.toPeriod(periodType66);
        org.joda.time.PeriodType periodType70 = periodType66.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(periodType70);
        org.joda.time.PeriodType periodType72 = periodType70.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration60, periodType72);
        boolean boolean74 = duration10.isEqual((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration76 = duration60.plus(350L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration78 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration76, (-124));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 98674326527820350 * -124");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:36:36.113Z" + "'", str55, "2022-02-11T09:36:36.113Z");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PT126000S" + "'", str65, "PT126000S");
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration76);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        mutablePeriod5.addMinutes((int) (short) 0);
        mutablePeriod5.addDays((int) (short) 100);
        mutablePeriod5.setPeriod((int) (byte) 10, 0, (int) (byte) 100, (int) (short) 100, (int) '#', 10, (int) 'a', (int) (short) 1);
        mutablePeriod5.addMillis(2);
        int int80 = mutablePeriod5.getSeconds();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21);
        mutablePeriod22.addWeeks((int) 'a');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod3.toMutablePeriod();
        org.joda.time.format.PeriodPrinter periodPrinter27 = null;
        org.joda.time.format.PeriodParser periodParser28 = null;
        org.joda.time.format.PeriodFormatter periodFormatter29 = new org.joda.time.format.PeriodFormatter(periodPrinter27, periodParser28);
        boolean boolean30 = periodFormatter29.isPrinter();
        org.joda.time.PeriodType periodType31 = periodFormatter29.getParseType();
        java.util.Locale locale32 = periodFormatter29.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = mutablePeriod26.toString(periodFormatter29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(periodType31);
        org.junit.Assert.assertNull(locale32);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod12.addSeconds((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Period period21 = mutablePeriod10.toPeriod();
        mutablePeriod10.setHours((int) ' ');
        mutablePeriod10.addSeconds(33);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        java.lang.Object obj13 = mutablePeriod11.clone();
        boolean boolean14 = duration1.equals((java.lang.Object) mutablePeriod11);
        mutablePeriod11.setDays((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType18 = mutablePeriod11.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "P32DT0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "P32DT0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "P32DT0.052S");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1260100L, periodType1);
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = periodFormatter2.getLocale();
        boolean boolean40 = periodFormatter2.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod42 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:54.123Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:14.542Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:14.542Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.secondOfMinute();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.weekyear();
        org.joda.time.DurationField durationField62 = chronology59.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((java.lang.Object) periodType0, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Period period40 = interval39.toPeriod();
        boolean boolean41 = interval12.isBefore((org.joda.time.ReadableInterval) interval39);
        long long42 = interval12.getEndMillis();
        org.joda.time.Period period43 = interval12.toPeriod();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        boolean boolean71 = interval56.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology72 = interval56.getChronology();
        boolean boolean73 = interval12.contains((org.joda.time.ReadableInterval) interval56);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644572197148L + "'", long42 == 1644572197148L);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology29.years();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray39 = chronology29.get(readablePeriod36, 1643312089370L, 1644572114290L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getEnd();
        boolean boolean30 = interval15.contains((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        java.lang.String str45 = dateTime44.toString();
        boolean boolean46 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Hours hours51 = duration50.toStandardHours();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        boolean boolean56 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((long) (-1), (-1));
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        boolean boolean76 = duration63.isShorterThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = duration69.toPeriod(periodType77, chronology78);
        org.joda.time.PeriodType periodType80 = periodType77.withYearsRemoved();
        org.joda.time.PeriodType periodType81 = periodType80.withDaysRemoved();
        org.joda.time.PeriodType periodType82 = periodType81.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration53, periodType82);
        org.joda.time.Period period84 = duration2.toPeriod(periodType82);
        int int85 = periodType82.size();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-11T09:36:37.337Z" + "'", str45, "2022-02-11T09:36:37.337Z");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        java.lang.String str63 = periodType48.getName();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType48, chronology64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        long long72 = interval71.toDurationMillis();
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval71);
        boolean boolean74 = interval25.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime75 = interval71.getEnd();
        long long76 = interval71.getStartMillis();
        org.joda.time.Duration duration77 = interval71.toDuration();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Years" + "'", str63, "Years");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1644572137489L + "'", long76 == 1644572137489L);
        org.junit.Assert.assertNotNull(duration77);
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.add((long) ' ');
        int int15 = mutablePeriod12.getDays();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        mutablePeriod12.add(durationFieldType16, (int) (byte) 1);
        int int19 = mutablePeriod12.getWeeks();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        boolean boolean40 = mutablePeriod12.isSupported(durationFieldType37);
        int int41 = mutablePeriod3.get(durationFieldType37);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod3, periodType42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        boolean boolean71 = interval56.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology72 = interval56.getChronology();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval56);
        int int74 = mutablePeriod3.size();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray40 = mutablePeriod7.getValues();
        org.joda.time.Period period41 = mutablePeriod7.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Period period43 = mutablePeriod7.toPeriod();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 42, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        mutablePeriod21.clear();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.dayOfYear();
        org.joda.time.Chronology chronology53 = chronology49.withUTC();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.DateTime dateTime67 = interval65.getEnd();
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = interval65.isBefore(readableInterval68);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval68);
        int int71 = mutablePeriod70.getHours();
        mutablePeriod70.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray83 = chronology53.get((org.joda.time.ReadablePeriod) mutablePeriod70, (long) 1, (long) 3);
        org.joda.time.DurationField durationField84 = chronology53.hours();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) (short) 100, chronology53);
        mutablePeriod85.setMonths(6);
        boolean boolean88 = mutablePeriod21.equals((java.lang.Object) 6);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        java.lang.String str72 = chronology68.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology68.yearOfEra();
        org.joda.time.DateTimeField dateTimeField74 = chronology68.monthOfYear();
        org.joda.time.ReadablePartial readablePartial75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray77 = chronology68.get(readablePartial75, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str72, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField42 = chronology34.halfdays();
        long long46 = chronology34.add((long) (short) 10, (long) 32, 1);
        org.joda.time.DurationField durationField47 = chronology34.millis();
        java.lang.Class<?> wildcardClass48 = durationField47.getClass();
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 42L + "'", long46 == 42L);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis(126000L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.days();
        org.joda.time.DurationField durationField23 = chronology21.centuries();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        int int33 = mutablePeriod28.getMonths();
        mutablePeriod28.addDays(10);
        mutablePeriod28.setWeeks((int) (byte) -1);
        int[] intArray40 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod28, (long) 100, 10L);
        org.joda.time.DateTimeField dateTimeField41 = chronology21.millisOfSecond();
        org.joda.time.Period period42 = duration7.toPeriod(chronology21);
        org.joda.time.DateTimeField dateTimeField43 = chronology21.centuryOfEra();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration5, chronology21);
        mutablePeriod3.setPeriod(0, (int) (byte) 1, 35, 7, 340, 4, (int) (byte) 1, (-52));
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, -90]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        int[] intArray20 = mutablePeriod7.getValues();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.days();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod25.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod25.toMutablePeriod();
        mutablePeriod28.setSeconds((int) (short) 10);
        mutablePeriod28.addDays(100);
        mutablePeriod28.addHours((int) '4');
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        int int44 = mutablePeriod39.getMonths();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod48.add((long) ' ');
        int int51 = mutablePeriod48.getDays();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.millis();
        mutablePeriod48.add(durationFieldType52, (int) (byte) 1);
        boolean boolean55 = mutablePeriod39.equals((java.lang.Object) durationFieldType52);
        mutablePeriod28.set(durationFieldType52, 340);
        int int58 = periodType21.indexOf(durationFieldType52);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology65);
        mutablePeriod62.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod66);
        mutablePeriod66.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod77 = mutablePeriod66.copy();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Duration duration79 = mutablePeriod66.toDurationTo(readableInstant78);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology82 = null;
        mutablePeriod66.setPeriod((org.joda.time.ReadableDuration) duration81, chronology82);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        mutablePeriod88.setPeriod(readablePeriod89);
        mutablePeriod88.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType93 = org.joda.time.DurationFieldType.days();
        int int94 = mutablePeriod88.get(durationFieldType93);
        boolean boolean95 = mutablePeriod66.isSupported(durationFieldType93);
        int int96 = periodType21.indexOf(durationFieldType93);
        mutablePeriod7.set(durationFieldType93, 658);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 32, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(mutablePeriod77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        java.lang.String str12 = duration7.toString();
        org.joda.time.Period period13 = duration7.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        int int22 = duration7.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        long long36 = interval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = interval35.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Instant instant53 = dateTime50.toInstant();
        org.joda.time.Chronology chronology54 = dateTime50.getChronology();
        boolean boolean55 = duration21.equals((java.lang.Object) dateTime50);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT1260100S" + "'", str12, "PT1260100S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1260100000L + "'", long36 == 1260100000L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:36:38.230Z" + "'", str51, "2022-02-11T09:36:38.230Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1644572119917L, periodType1);
        int int4 = mutablePeriod3.size();
        mutablePeriod3.addDays(51);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getEnd();
        boolean boolean50 = interval35.contains((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = interval35.getStart();
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = dateTime51.isSupported(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = dateTime51.isSupported(dateTimeFieldType55);
        org.joda.time.Interval interval57 = duration7.toIntervalFrom((org.joda.time.ReadableInstant) dateTime51);
        long long58 = duration7.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-01-27T19:34:58.378Z" + "'", str52, "2022-01-27T19:34:58.378Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 126000L + "'", long58 == 126000L);
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter2.withParseType(periodType24);
        org.joda.time.format.PeriodParser periodParser26 = periodFormatter2.getParser();
        java.lang.StringBuffer stringBuffer27 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.days();
        mutablePeriod32.set(durationFieldType39, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer27, (org.joda.time.ReadablePeriod) mutablePeriod32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNull(periodParser26);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationFieldType39);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        mutablePeriod3.setPeriod((long) (-1), 1L);
        int int14 = mutablePeriod3.size();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        mutablePeriod3.setMonths((int) (short) 10);
        mutablePeriod3.setMillis((-1));
        org.joda.time.DurationFieldType[] durationFieldTypeArray40 = mutablePeriod3.getFieldTypes();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.forFields(durationFieldTypeArray40);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.forFields(durationFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(durationFieldTypeArray40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        int int11 = mutablePeriod10.getYears();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod10.copy();
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        int int14 = mutablePeriod10.size();
        int int15 = mutablePeriod10.getSeconds();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology29.days();
        long long39 = chronology29.add((long) (byte) 0, (long) '4', (int) '4');
        org.joda.time.DurationField durationField40 = chronology29.days();
        org.joda.time.DurationField durationField41 = chronology29.weeks();
        org.joda.time.DateTimeField dateTimeField42 = chronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology29.secondOfMinute();
        long long47 = chronology29.add(10L, 1644572179359L, 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2704L + "'", long39 == 2704L);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.setWeeks((int) (short) 100);
        java.lang.String str23 = mutablePeriod18.toString();
        java.lang.String str24 = mutablePeriod18.toString();
        mutablePeriod18.add((long) 'a');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.addSeconds((int) (byte) 100);
        mutablePeriod30.addWeeks((int) '#');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        int int41 = mutablePeriod40.getYears();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod40.copy();
        mutablePeriod42.setYears((int) (short) 10);
        int int45 = mutablePeriod42.size();
        mutablePeriod42.setMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod42.set(durationFieldType48, 340);
        mutablePeriod30.add(durationFieldType48, 32);
        boolean boolean53 = mutablePeriod18.isSupported(durationFieldType48);
        mutablePeriod18.addSeconds(2);
        int int56 = mutablePeriod18.getHours();
        mutablePeriod18.addSeconds(51);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P100WT0.087S" + "'", str23, "P100WT0.087S");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P100WT0.087S" + "'", str24, "P100WT0.087S");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutablePeriod52.clear();
        mutablePeriod52.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType62 = null;
        boolean boolean63 = mutablePeriod52.isSupported(durationFieldType62);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekyearOfCentury();
        mutablePeriod52.add((long) (short) 100, chronology78);
        org.joda.time.DurationField durationField82 = chronology78.halfdays();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, chronology78);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = chronology78.getDateTimeMillis(102, 456825, 5, 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 456825 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(100000L, chronology14);
        org.joda.time.DurationField durationField20 = chronology14.millis();
        org.joda.time.DurationField durationField21 = chronology14.months();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withMonthsRemoved();
        java.lang.Class<?> wildcardClass3 = periodType2.getClass();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.dayOfMonth();
        org.joda.time.Chronology chronology34 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, 28083659L, chronology29);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) 8);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration39);
        mutablePeriod3.setHours((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(duration39);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(100000L);
        org.joda.time.Duration duration3 = duration1.minus(0L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Instant instant32 = dateTime30.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant32.isSupported(dateTimeFieldType33);
        org.joda.time.Interval interval35 = duration3.toIntervalFrom((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = instant32.isSupported(dateTimeFieldType36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        org.joda.time.Duration duration64 = interval61.toDuration();
        boolean boolean65 = interval49.overlaps((org.joda.time.ReadableInterval) interval61);
        long long66 = interval61.getStartMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        boolean boolean79 = duration68.isLongerThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration87.toPeriod(chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Interval interval91 = duration87.toIntervalTo(readableInstant90);
        org.joda.time.Interval interval92 = interval91.toInterval();
        org.joda.time.DateTime dateTime93 = interval91.getEnd();
        org.joda.time.Interval interval94 = duration72.toIntervalFrom((org.joda.time.ReadableInstant) dateTime93);
        java.lang.String str95 = dateTime93.toString();
        boolean boolean96 = interval61.contains((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = null;
        boolean boolean98 = dateTime93.isSupported(dateTimeFieldType97);
        org.joda.time.MutablePeriod mutablePeriod99 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1643312099050L + "'", long66 == 1643312099050L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(interval94);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-02-11T09:36:39.050Z" + "'", str95, "2022-02-11T09:36:39.050Z");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-11T09:35:34.646Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:34.646Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = mutablePeriod7.getFieldTypes();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfMonth();
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.secondOfMinute();
        mutablePeriod7.add(6000000L, chronology26);
        java.lang.String str35 = chronology26.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration36 = new org.joda.time.Duration((java.lang.Object) chronology26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1644572151810L);
        java.lang.String str2 = duration1.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT1644572151810S" + "'", str2, "PT1644572151810S");
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField22 = chronology15.weekyears();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        java.lang.String str27 = mutablePeriod26.toString();
        int[] intArray29 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod26, 160000L);
        mutablePeriod26.clear();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.052S" + "'", str27, "PT0.052S");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 2, 40, 0]");
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21);
        mutablePeriod22.addWeeks((int) 'a');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '#', periodType27);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.PeriodType periodType30 = mutablePeriod22.getPeriodType();
        mutablePeriod22.setMonths((int) (short) 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        long long23 = duration7.getStandardSeconds();
        org.joda.time.Period period24 = duration7.toPeriod();
        long long25 = duration7.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 126000L + "'", long23 == 126000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 126000L + "'", long25 == 126000L);
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period6 = periodFormatter2.parsePeriod("2022-02-11T09:36:28.659Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod7.toMutablePeriod();
        mutablePeriod20.addMinutes((int) (short) 1);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        boolean boolean39 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration32.toPeriod(periodType40, chronology41);
        org.joda.time.PeriodType periodType43 = periodType40.withYearsRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.eras();
        int int46 = periodType43.indexOf(durationFieldType45);
        int int47 = mutablePeriod20.get(durationFieldType45);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod20.setValue(80, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 80");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        mutablePeriod7.setDays(100);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        mutablePeriod31.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod31.toMutablePeriod();
        int[] intArray35 = mutablePeriod31.getValues();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        boolean boolean52 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration45.toPeriod(periodType53, chronology54);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        mutablePeriod60.setPeriod(readablePeriod61);
        mutablePeriod60.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.days();
        int int66 = mutablePeriod60.get(durationFieldType65);
        boolean boolean67 = periodType53.isSupported(durationFieldType65);
        mutablePeriod31.set(durationFieldType65, 8);
        int int70 = mutablePeriod7.indexOf(durationFieldType65);
        int int71 = mutablePeriod7.getWeeks();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        int int27 = mutablePeriod26.getYears();
        java.lang.String str28 = mutablePeriod26.toString();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        mutablePeriod26.add((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(readableInstant39, readableInstant40);
        boolean boolean42 = mutablePeriod33.equals((java.lang.Object) readableInstant39);
        mutablePeriod11.add((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutablePeriod48.setPeriod(readablePeriod49);
        mutablePeriod48.addWeeks((int) (byte) 10);
        int int53 = mutablePeriod48.getMonths();
        int int54 = mutablePeriod48.size();
        mutablePeriod48.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod57 = mutablePeriod48.toMutablePeriod();
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.Period period59 = mutablePeriod48.toPeriod();
        boolean boolean60 = duration1.equals((java.lang.Object) period59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology67);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod68);
        mutablePeriod68.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod79 = mutablePeriod68.copy();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Duration duration81 = mutablePeriod68.toDurationTo(readableInstant80);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology84 = null;
        mutablePeriod68.setPeriod((org.joda.time.ReadableDuration) duration83, chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration83, readableInstant86);
        boolean boolean88 = duration1.isEqual((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration90 = org.joda.time.Duration.standardSeconds(1L);
        org.joda.time.Days days91 = duration90.toStandardDays();
        int int92 = duration83.compareTo((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Duration duration94 = org.joda.time.Duration.standardDays((long) ' ');
        org.joda.time.Duration duration97 = duration94.withDurationAdded((long) 340, (-51));
        boolean boolean98 = duration90.isShorterThan((org.joda.time.ReadableDuration) duration97);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0.052S" + "'", str28, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(days91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod10.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        int int14 = mutablePeriod10.get(durationFieldType13);
        int int15 = mutablePeriod10.size();
        mutablePeriod10.addWeeks((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 0, (long) ' ');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getEnd();
        boolean boolean30 = interval15.contains((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        java.lang.String str45 = dateTime44.toString();
        boolean boolean46 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration57 = duration48.plus((org.joda.time.ReadableDuration) duration56);
        boolean boolean58 = dateTime44.equals((java.lang.Object) duration48);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology65);
        mutablePeriod62.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod66);
        java.lang.Object obj68 = mutablePeriod66.clone();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) duration70, chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        mutablePeriod66.add((org.joda.time.ReadableInterval) interval74);
        org.joda.time.DateTime dateTime76 = interval74.getStart();
        org.joda.time.Chronology chronology77 = interval74.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.dayOfYear();
        org.joda.time.Period period79 = duration48.toPeriod(chronology77);
        boolean boolean80 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod82.addHours(0);
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.days();
        boolean boolean86 = mutablePeriod82.isSupported(durationFieldType85);
        boolean boolean87 = duration48.equals((java.lang.Object) mutablePeriod82);
        mutablePeriod82.add(1644572118532L);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod82.setValue((int) (byte) 100, 658);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-11T09:36:40.353Z" + "'", str45, "2022-02-11T09:36:40.353Z");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        boolean boolean19 = interval5.overlaps((org.joda.time.ReadableInterval) interval17);
        java.lang.String str20 = interval17.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod24.setMillis((int) (short) 0);
        mutablePeriod24.addMonths((int) (short) 1);
        mutablePeriod24.setMinutes((int) (byte) 1);
        mutablePeriod24.setYears((int) (short) 100);
        mutablePeriod24.addDays(1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        java.lang.Object obj44 = mutablePeriod42.clone();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((java.lang.Object) duration46, chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        mutablePeriod42.add((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.Duration duration53 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Interval interval83 = interval82.toInterval();
        org.joda.time.DateTime dateTime84 = interval82.getEnd();
        boolean boolean85 = interval70.contains((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Duration duration86 = mutablePeriod57.toDurationTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Period period87 = duration53.toPeriodFrom((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean88 = interval17.contains((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = dateTime84.isSupported(dateTimeFieldType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((java.lang.Object) dateTime84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-01-27T19:35:00.410Z/2022-02-11T09:36:40.410Z" + "'", str20, "2022-01-27T19:35:00.410Z/2022-02-11T09:36:40.410Z");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter38.isPrinter();
        org.joda.time.PeriodType periodType40 = periodFormatter38.getParseType();
        org.joda.time.format.PeriodParser periodParser41 = periodFormatter38.getParser();
        java.util.Locale locale42 = periodFormatter38.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter43 = periodFormatter38.getPrinter();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        int int48 = mutablePeriod47.getYears();
        org.joda.time.MutablePeriod mutablePeriod49 = mutablePeriod47.copy();
        mutablePeriod49.setYears((int) (short) 10);
        mutablePeriod49.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Interval interval73 = interval72.toInterval();
        mutablePeriod49.setPeriod((org.joda.time.ReadableInterval) interval73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = duration76.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Period period84 = duration82.toPeriod(chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        org.joda.time.Period period87 = interval86.toPeriod();
        mutablePeriod49.add((org.joda.time.ReadableInterval) interval86);
        org.joda.time.PeriodType periodType89 = mutablePeriod49.getPeriodType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray90 = mutablePeriod49.getFieldTypes();
        int int91 = mutablePeriod49.size();
        mutablePeriod49.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = periodFormatter38.print((org.joda.time.ReadablePeriod) mutablePeriod49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNull(periodParser41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNull(periodPrinter43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(durationFieldTypeArray90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = interval11.isBefore(readableInterval14);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval14);
        int int17 = mutablePeriod16.getYears();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod16.setValue((-53), 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.setMillis((int) (short) 0);
        mutablePeriod4.addMonths((int) (short) 1);
        mutablePeriod4.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutablePeriod15.setPeriod(readablePeriod16);
        mutablePeriod15.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        int int21 = mutablePeriod15.get(durationFieldType20);
        mutablePeriod4.add(durationFieldType20, (int) '#');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod4.copy();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weeks();
        int int36 = mutablePeriod34.get(durationFieldType35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.hourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.secondOfMinute();
        org.joda.time.DurationField durationField55 = chronology50.weekyears();
        org.joda.time.DurationField durationField56 = chronology50.millis();
        boolean boolean57 = durationFieldType35.isSupported(chronology50);
        org.joda.time.DateTimeField dateTimeField58 = chronology50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology50.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(obj0, chronology50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType62 = mutablePeriod60.getFieldType(8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        boolean boolean5 = periodFormatter3.isParser();
        boolean boolean6 = periodFormatter3.isPrinter();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter3.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        boolean boolean10 = periodFormatter8.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod11 = org.joda.time.MutablePeriod.parse("PT126060S", periodFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.clear();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod12.addHours(0);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        org.joda.time.Period period31 = interval30.toPeriod();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration18, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.halfdayOfDay();
        org.joda.time.DurationField durationField35 = durationFieldType10.getField(chronology32);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod44.addHours(10);
        int[] intArray49 = chronology32.get((org.joda.time.ReadablePeriod) mutablePeriod44, (long) (short) 100, 1260100000L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology56);
        mutablePeriod53.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod57);
        java.lang.Object obj59 = mutablePeriod57.clone();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((java.lang.Object) duration61, chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        mutablePeriod57.add((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Interval interval67 = interval65.toInterval();
        mutablePeriod44.setPeriod((org.joda.time.ReadableInterval) interval67);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean72 = periodType70.equals((java.lang.Object) false);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Duration duration78 = duration76.plus(readableDuration77);
        org.joda.time.Duration duration80 = duration74.withDurationAdded((org.joda.time.ReadableDuration) duration76, (int) (byte) 10);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = duration80.toPeriod(chronology81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Interval interval84 = duration80.toIntervalTo(readableInstant83);
        org.joda.time.Period period85 = interval84.toPeriod();
        org.joda.time.Chronology chronology86 = interval84.getChronology();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1L, periodType70, chronology86);
        org.joda.time.MutablePeriod mutablePeriod88 = mutablePeriod87.toMutablePeriod();
        boolean boolean89 = interval67.equals((java.lang.Object) mutablePeriod87);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval67);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 2, 0, 14, 1, 39, 900]");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(mutablePeriod88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        boolean boolean32 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration25.toPeriod(periodType33, chronology34);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutablePeriod40.setPeriod(readablePeriod41);
        mutablePeriod40.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.days();
        int int46 = mutablePeriod40.get(durationFieldType45);
        boolean boolean47 = periodType33.isSupported(durationFieldType45);
        int int48 = periodType33.size();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.weeks();
        int int50 = periodType33.indexOf(durationFieldType49);
        mutablePeriod10.add(durationFieldType49, 4);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.DurationFieldType[] durationFieldTypeArray64 = mutablePeriod62.getFieldTypes();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.forFields(durationFieldTypeArray64);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod67.addHours(0);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Period period86 = interval85.toPeriod();
        org.joda.time.Chronology chronology87 = interval85.getChronology();
        mutablePeriod67.setPeriod((org.joda.time.ReadableDuration) duration73, chronology87);
        org.joda.time.DateTimeField dateTimeField89 = chronology87.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType65, chronology87);
        org.joda.time.DateTimeField dateTimeField91 = chronology87.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField92 = chronology87.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField93 = chronology87.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField94 = chronology87.secondOfMinute();
        org.joda.time.DurationField durationField95 = durationFieldType49.getField(chronology87);
        org.joda.time.DateTimeField dateTimeField96 = chronology87.minuteOfHour();
        org.joda.time.Chronology chronology97 = chronology87.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration98 = new org.joda.time.Duration((java.lang.Object) chronology87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(durationFieldTypeArray64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        java.lang.String str34 = duration31.toString();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean37 = periodType35.equals((java.lang.Object) false);
        org.joda.time.Period period38 = duration31.toPeriod(periodType35);
        org.joda.time.PeriodType periodType39 = periodType35.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(periodType39);
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod40, (long) (byte) 1, (long) '#');
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyear();
        boolean boolean60 = mutablePeriod40.equals((java.lang.Object) dateTimeField59);
        org.joda.time.PeriodType periodType61 = mutablePeriod40.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType63 = mutablePeriod40.getFieldType(14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT126000S" + "'", str34, "PT126000S");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(periodType61);
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Period period40 = interval39.toPeriod();
        boolean boolean41 = interval12.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Chronology chronology42 = interval12.getChronology();
        org.joda.time.Chronology chronology43 = interval12.getChronology();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        java.lang.String str44 = dateTime43.toString();
        boolean boolean45 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime28.getZone();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        boolean boolean60 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getEnd();
        org.joda.time.Interval interval75 = duration53.toIntervalFrom((org.joda.time.ReadableInstant) dateTime74);
        java.lang.String str76 = dateTime74.toString();
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Duration duration82 = duration80.plus(readableDuration81);
        org.joda.time.Duration duration84 = duration78.withDurationAdded((org.joda.time.ReadableDuration) duration80, (int) (byte) 10);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Period period86 = duration84.toPeriod(chronology85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Interval interval88 = duration84.toIntervalTo(readableInstant87);
        org.joda.time.Interval interval89 = interval88.toInterval();
        org.joda.time.DateTime dateTime90 = interval88.getEnd();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Duration duration92 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Period period93 = duration92.toPeriod();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:36:40.877Z" + "'", str44, "2022-02-11T09:36:40.877Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-11T09:36:40.877Z" + "'", str76, "2022-02-11T09:36:40.877Z");
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        boolean boolean32 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration25.toPeriod(periodType33, chronology34);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutablePeriod40.setPeriod(readablePeriod41);
        mutablePeriod40.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.days();
        int int46 = mutablePeriod40.get(durationFieldType45);
        boolean boolean47 = periodType33.isSupported(durationFieldType45);
        java.lang.String str48 = periodType33.getName();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType33, chronology49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((java.lang.Object) duration52, chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        long long57 = interval56.toDurationMillis();
        mutablePeriod50.setPeriod((org.joda.time.ReadableInterval) interval56);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Period period60 = interval56.toPeriod();
        int int62 = period60.getValue((int) (short) 0);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology65);
        mutablePeriod66.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType69 = null;
        int int70 = mutablePeriod66.get(durationFieldType69);
        int int71 = mutablePeriod66.size();
        mutablePeriod66.addWeeks((int) (short) 0);
        mutablePeriod66.add(0L);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.days();
        int int77 = mutablePeriod66.indexOf(durationFieldType76);
        mutablePeriod66.addHours((int) (short) 1);
        mutablePeriod66.setPeriod(1644572117941L, 1260100L);
        boolean boolean83 = period60.equals((java.lang.Object) 1644572117941L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Years" + "'", str48, "Years");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = dateTime31.isEqual(readableInstant33);
        boolean boolean35 = interval15.contains(readableInstant33);
        org.joda.time.DateTime dateTime36 = interval15.getStart();
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long45 = chronology37.getDateTimeMillis(1, (-52), 340, (-20), 10, 5, 51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -20 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:36:41.082Z" + "'", str32, "2022-02-11T09:36:41.082Z");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.addHours((int) (short) 10);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean15 = periodType13.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, periodType13, chronology16);
        mutablePeriod17.addYears((int) 'a');
        mutablePeriod17.addWeeks((int) '#');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Days days33 = duration32.toStandardDays();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) (short) -1, periodType35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.Period period51 = duration32.toPeriod(periodType35, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.hourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology50.getZone();
        mutablePeriod3.setPeriod(1644572196247L, 1644572192640L, chronology50);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue(102, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 102");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod3.addHours(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration9, chronology23);
        java.lang.String str25 = chronology23.toString();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 1644572186877L, chronology23);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str25, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.add((long) ' ');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod4.setPeriod((long) (short) 0, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfEra();
        org.joda.time.DurationField durationField26 = chronology21.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-11T09:35:19.917Z", chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:19.917Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType42 = periodType41.withMonthsRemoved();
        org.joda.time.PeriodType periodType43 = periodType41.withMonthsRemoved();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.days();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology59);
        org.joda.time.DurationField durationField65 = chronology59.centuries();
        org.joda.time.DateTimeField dateTimeField66 = chronology59.millisOfSecond();
        org.joda.time.DurationField durationField67 = chronology59.days();
        org.joda.time.DateTimeField dateTimeField68 = chronology59.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology59.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((java.lang.Object) periodFormatter40, periodType43, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.format.PeriodFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = interval29.isBefore(readableInterval32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval32);
        int int35 = mutablePeriod34.getHours();
        mutablePeriod34.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray47 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 1, (long) 3);
        org.joda.time.DurationField durationField48 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField49 = chronology17.millisOfSecond();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1L);
        org.joda.time.Days days2 = duration1.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod4.addHours(0);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration10, chronology24);
        org.joda.time.Duration duration28 = duration10.withDurationAdded((long) 3, (int) '4');
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, (org.joda.time.ReadableDuration) duration30, periodType31);
        boolean boolean33 = duration10.isEqual((org.joda.time.ReadableDuration) duration30);
        boolean boolean34 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        org.joda.time.Duration duration61 = interval58.toDuration();
        boolean boolean62 = interval46.overlaps((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Chronology chronology63 = interval58.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.millisOfSecond();
        boolean boolean65 = duration1.equals((java.lang.Object) chronology63);
        long long66 = duration1.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Period period40 = interval39.toPeriod();
        boolean boolean41 = interval12.isBefore((org.joda.time.ReadableInterval) interval39);
        long long42 = interval12.getEndMillis();
        org.joda.time.Period period43 = interval12.toPeriod();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((java.lang.Object) duration45, chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        long long50 = interval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Interval interval63 = interval62.toInterval();
        long long64 = interval63.toDurationMillis();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Interval interval77 = interval76.toInterval();
        org.joda.time.DateTime dateTime78 = interval76.getEnd();
        boolean boolean79 = interval63.isBefore((org.joda.time.ReadableInterval) interval76);
        java.lang.String str80 = interval76.toString();
        boolean boolean81 = interval49.overlaps((org.joda.time.ReadableInterval) interval76);
        boolean boolean82 = interval12.isBefore((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Period period83 = interval76.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType85 = period83.getFieldType(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644572201577L + "'", long42 == 1644572201577L);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 60000L + "'", long50 == 60000L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1260100000L + "'", long64 == 1260100000L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-01-27T19:35:01.577Z/2022-02-11T09:36:41.577Z" + "'", str80, "2022-01-27T19:35:01.577Z/2022-02-11T09:36:41.577Z");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period83);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        boolean boolean7 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType8 = periodFormatter2.getParseType();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology24);
        mutablePeriod27.setSeconds(1);
        mutablePeriod27.addSeconds((int) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod32 = mutablePeriod27.copy();
        mutablePeriod27.setMillis((int) (byte) 10);
        mutablePeriod27.setMonths(0);
        mutablePeriod27.setMonths((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod27, "2022-02-11T09:36:35.896Z", 32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(periodType8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutablePeriod32);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        int int42 = periodType41.size();
        org.joda.time.PeriodType periodType43 = periodType41.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter40.withParseType(periodType43);
        java.io.Writer writer45 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean49 = periodType47.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, periodType47, chronology50);
        mutablePeriod51.addYears((int) 'a');
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        mutablePeriod61.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology78);
        mutablePeriod75.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod79);
        mutablePeriod75.clear();
        mutablePeriod75.setValue((int) (byte) 0, (-1));
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod75);
        mutablePeriod61.setYears((int) (byte) 1);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        mutablePeriod61.addHours((int) (short) 1);
        mutablePeriod61.setHours(456825);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter44.printTo(writer45, (org.joda.time.ReadablePeriod) mutablePeriod61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addMonths(0);
        mutablePeriod3.setMillis((int) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod22.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod36.clear();
        mutablePeriod36.setValue((int) (byte) 0, (-1));
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int47 = mutablePeriod36.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod55.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod55.copy();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Duration duration68 = mutablePeriod55.toDurationTo(readableInstant67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology71 = null;
        mutablePeriod55.setPeriod((org.joda.time.ReadableDuration) duration70, chronology71);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutablePeriod77.setPeriod(readablePeriod78);
        mutablePeriod77.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.days();
        int int83 = mutablePeriod77.get(durationFieldType82);
        boolean boolean84 = mutablePeriod55.isSupported(durationFieldType82);
        mutablePeriod36.set(durationFieldType82, (int) (byte) 1);
        boolean boolean87 = mutablePeriod3.isSupported(durationFieldType82);
        mutablePeriod3.setMinutes(1);
        mutablePeriod3.clear();
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology59);
        org.joda.time.DateTimeField dateTimeField78 = chronology59.yearOfEra();
        org.joda.time.DurationField durationField79 = chronology59.halfdays();
        org.joda.time.DurationField durationField80 = chronology59.years();
        org.joda.time.DateTimeField dateTimeField81 = chronology59.secondOfMinute();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfEra();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Period period39 = interval38.toPeriod();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.days();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfWeek();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        mutablePeriod47.clear();
        mutablePeriod47.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType57 = null;
        boolean boolean58 = mutablePeriod47.isSupported(durationFieldType57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology61);
        int int63 = mutablePeriod62.getWeeks();
        mutablePeriod47.add((org.joda.time.ReadablePeriod) mutablePeriod62);
        mutablePeriod62.setWeeks((int) (short) 100);
        java.lang.String str67 = mutablePeriod62.toString();
        int[] intArray70 = chronology40.get((org.joda.time.ReadablePeriod) mutablePeriod62, 28083659L, 60000L);
        // The following exception was thrown during execution in test generation
        try {
            chronology21.validate(readablePartial26, intArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "P100WT0.087S" + "'", str67, "P100WT0.087S");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 0, -7, -47, -3, -659]");
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType14, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.halfdayOfDay();
        org.joda.time.DurationField durationField41 = chronology36.months();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) (-51), 1644572120402L, chronology36);
        java.lang.String str44 = mutablePeriod43.toString();
        int int45 = mutablePeriod43.getMonths();
        int int46 = mutablePeriod43.size();
        org.joda.time.Period period47 = mutablePeriod43.toPeriod();
        mutablePeriod43.addDays((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType51 = mutablePeriod43.getFieldType((-52));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "P52Y1M1W3DT9H35M20.453S" + "'", str44, "P52Y1M1W3DT9H35M20.453S");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.Object obj21 = mutablePeriod19.clone();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((java.lang.Object) duration23, chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        mutablePeriod19.add((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        mutablePeriod11.setPeriod((org.joda.time.ReadableInterval) interval27);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.setMinutes((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField79 = chronology74.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = chronology74.get(readablePartial80, 1644572198095L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:36:42.025Z" + "'", str42, "2022-02-11T09:36:42.025Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod8.clear();
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod3.setMinutes((int) (byte) 0);
        mutablePeriod3.setHours(7);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration30 = duration21.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.withMillis(1644572115768L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration43 = duration34.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        boolean boolean73 = interval58.contains((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        java.lang.String str88 = dateTime87.toString();
        boolean boolean89 = dateTime72.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Duration duration90 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateTime72);
        long long91 = dateTime72.getMillis();
        org.joda.time.Interval interval92 = duration34.toIntervalFrom((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Interval interval93 = duration29.toIntervalFrom((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration94 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int96 = dateTime72.get(dateTimeFieldType95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-11T09:36:42.049Z" + "'", str88, "2022-02-11T09:36:42.049Z");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(duration90);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1644572202049L + "'", long91 == 1644572202049L);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(duration94);
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1644572156326L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        boolean boolean46 = mutablePeriod30.isSupported(durationFieldType44);
        int int47 = periodType26.indexOf(durationFieldType44);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, periodType26, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.hourOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = mutablePeriod71.getFieldTypes();
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePeriod) mutablePeriod71, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField77 = chronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = chronology61.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology61);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(100L, (-124L), chronology61);
        mutablePeriod80.addMillis(100);
        mutablePeriod80.add((int) 'a', (int) (short) 100, 100, 0, 2, (int) (short) 100, (int) (short) 100, 0);
        int int92 = mutablePeriod80.getMonths();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod10.copy();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = mutablePeriod10.toDurationTo(readableInstant22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration25, chronology26);
        boolean boolean28 = duration2.isEqual((org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        java.lang.String str73 = dateTime72.toString();
        boolean boolean74 = dateTime57.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime57.getZone();
        org.joda.time.Period period77 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime57.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int81 = dateTime57.get(dateTimeFieldType80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:36:42.396Z" + "'", str73, "2022-02-11T09:36:42.396Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        boolean boolean8 = periodFormatter7.isParser();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod12.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod12.add((long) 4);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = periodFormatter7.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod12, "2022-02-11T09:36:16.989Z", 33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setDays((int) (short) 10);
        mutablePeriod3.addMinutes(32);
        int int12 = mutablePeriod3.getMinutes();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        int int8 = mutablePeriod5.size();
        int[] intArray9 = mutablePeriod5.getValues();
        mutablePeriod5.addWeeks(456825);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = mutablePeriod5.getValue((-19));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, 0, 0, 0, 0, 0, 0, -52]");
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Duration duration57 = duration45.minus(100000L);
        org.joda.time.Minutes minutes58 = duration45.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:36:42.535Z" + "'", str42, "2022-02-11T09:36:42.535Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(minutes58);
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(28083659L);
        int int2 = mutablePeriod1.getWeeks();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withDaysRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1644572123588L, periodType23);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod24.setHours(102);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        int int72 = mutablePeriod33.getYears();
        mutablePeriod33.setDays((int) 'a');
        mutablePeriod33.setDays(658);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-52) + "'", int72 == (-52));
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        boolean boolean27 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration20.toPeriod(periodType28, chronology29);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = periodType28.isSupported(durationFieldType40);
        org.joda.time.PeriodType periodType43 = periodType28.withDaysRemoved();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.days();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology59);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((java.lang.Object) duration10, periodType28, chronology59);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod65.setHours(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter38.getLocale();
        boolean boolean42 = periodFormatter38.isPrinter();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter38.withLocale(locale43);
        java.io.Writer writer45 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod49.addMillis(10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod55.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod58 = mutablePeriod55.toMutablePeriod();
        mutablePeriod49.add((org.joda.time.ReadablePeriod) mutablePeriod55);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter38.printTo(writer45, (org.joda.time.ReadablePeriod) mutablePeriod55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(mutablePeriod58);
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setYears((int) '4');
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getEnd();
        boolean boolean37 = interval22.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        boolean boolean54 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Minutes minutes55 = duration41.toStandardMinutes();
        org.joda.time.Duration duration57 = duration41.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Minutes minutes59 = duration41.toStandardMinutes();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration41);
        org.joda.time.PeriodType periodType61 = mutablePeriod3.getPeriodType();
        mutablePeriod3.setMonths((int) (short) 0);
        org.joda.time.format.PeriodPrinter periodPrinter64 = null;
        org.joda.time.format.PeriodParser periodParser65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = new org.joda.time.format.PeriodFormatter(periodPrinter64, periodParser65);
        java.util.Locale locale67 = periodFormatter66.getLocale();
        boolean boolean68 = periodFormatter66.isParser();
        boolean boolean69 = periodFormatter66.isPrinter();
        java.util.Locale locale70 = null;
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter66.withLocale(locale70);
        org.joda.time.format.PeriodParser periodParser72 = periodFormatter71.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = mutablePeriod3.toString(periodFormatter71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNull(locale67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertNull(periodParser72);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        boolean boolean5 = periodFormatter2.isParser();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = periodType25.isSupported(durationFieldType37);
        int int40 = periodType25.size();
        org.joda.time.PeriodType periodType41 = periodType25.withMonthsRemoved();
        org.joda.time.PeriodType periodType42 = periodType41.withYearsRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withHoursRemoved();
        int int44 = periodType42.size();
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter2.withParseType(periodType42);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant46, readableInstant47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod48, "2022-02-11T09:36:35.044Z", (-124));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(periodFormatter45);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0S");
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = mutablePeriod7.getFieldTypes();
        org.joda.time.format.PeriodPrinter periodPrinter22 = null;
        org.joda.time.format.PeriodParser periodParser23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = new org.joda.time.format.PeriodFormatter(periodPrinter22, periodParser23);
        java.util.Locale locale25 = periodFormatter24.getLocale();
        boolean boolean26 = mutablePeriod7.equals((java.lang.Object) locale25);
        mutablePeriod7.addDays(0);
        int int29 = mutablePeriod7.getHours();
        mutablePeriod7.setHours(33);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withDaysRemoved();
        org.joda.time.PeriodType periodType30 = periodType29.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1644572123588L, periodType30);
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter6.withParseType(periodType30);
        org.joda.time.ReadWritablePeriod readWritablePeriod33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = periodFormatter6.parseInto(readWritablePeriod33, "2022-02-11T09:35:57.166Z", (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodFormatter32);
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology67);
        int int69 = mutablePeriod68.getYears();
        org.joda.time.MutablePeriod mutablePeriod70 = mutablePeriod68.copy();
        mutablePeriod70.setYears((int) (short) 10);
        mutablePeriod70.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.Period period83 = mutablePeriod70.toPeriod();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(period83);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration18.toPeriod(chronology26);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        int int30 = mutablePeriod3.indexOf(durationFieldType29);
        mutablePeriod3.addMillis((-53));
        java.lang.Class<?> wildcardClass33 = mutablePeriod3.getClass();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        java.lang.String str35 = chronology29.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.clockhourOfDay();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology15.minutes();
        org.joda.time.DurationField durationField20 = chronology15.seconds();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (-1), 1644572119917L, chronology15);
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = chronology15.get(readablePartial23, 1644572172127L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.format.PeriodParser periodParser41 = periodFormatter40.getParser();
        java.lang.StringBuffer stringBuffer42 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean46 = periodType44.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, periodType44, chronology47);
        mutablePeriod48.addYears((int) 'a');
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod58.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology75);
        mutablePeriod72.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod76);
        mutablePeriod72.clear();
        mutablePeriod72.setValue((int) (byte) 0, (-1));
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        mutablePeriod58.setYears((int) (byte) 1);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        int int86 = mutablePeriod58.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter40.printTo(stringBuffer42, (org.joda.time.ReadablePeriod) mutablePeriod58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(periodParser41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        mutablePeriod18.setSeconds(1);
        mutablePeriod18.addSeconds((int) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod18.copy();
        mutablePeriod18.setMillis((int) (byte) 10);
        mutablePeriod18.setMonths(0);
        mutablePeriod18.setMonths((int) (byte) 1);
        mutablePeriod18.setYears(456825);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutablePeriod23);
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology15);
        mutablePeriod20.setPeriod(2, (int) (byte) 0, (int) (byte) 10, 1, 4, 2, 2, 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod34.setPeriod((long) (short) 0, chronology51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.secondOfMinute();
        boolean boolean71 = mutablePeriod34.equals((java.lang.Object) chronology66);
        org.joda.time.Chronology chronology72 = chronology66.withUTC();
        mutablePeriod20.setPeriod((long) 100, chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.millisOfSecond();
        org.joda.time.DurationField durationField76 = chronology72.months();
        org.joda.time.ReadablePartial readablePartial77 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long79 = chronology72.set(readablePartial77, 1644572151352L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray40 = mutablePeriod7.getValues();
        org.joda.time.Period period41 = mutablePeriod7.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        boolean boolean59 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration52.toPeriod(periodType60, chronology61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutablePeriod67.setPeriod(readablePeriod68);
        mutablePeriod67.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.days();
        int int73 = mutablePeriod67.get(durationFieldType72);
        boolean boolean74 = periodType60.isSupported(durationFieldType72);
        boolean boolean75 = mutablePeriod42.isSupported(durationFieldType72);
        mutablePeriod42.setMonths(10);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 42, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod5);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setValue((-52), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        int int1 = periodType0.size();
        org.joda.time.PeriodType periodType2 = periodType0.withYearsRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572126356L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572126356 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1L, periodType1);
        mutablePeriod2.addDays(456825);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod8.add((long) ' ');
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod8.setPeriod((long) (short) 0, chronology25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Period period39 = interval38.toPeriod();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.secondOfMinute();
        boolean boolean45 = mutablePeriod8.equals((java.lang.Object) chronology40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        java.lang.Object obj55 = mutablePeriod53.clone();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((java.lang.Object) duration57, chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        mutablePeriod53.add((org.joda.time.ReadableInterval) interval61);
        mutablePeriod53.addHours((int) (short) 1);
        int[] intArray66 = chronology40.get((org.joda.time.ReadablePeriod) mutablePeriod53, 1260100000L);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT1H1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT1H1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT1H1M0.052S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 2, 0, 14, 1, 40, 0]");
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType45 = mutablePeriod5.getPeriodType();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.days();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.monthOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.millisOfDay();
        mutablePeriod5.setPeriod(1000L, chronology60);
        org.joda.time.DateTimeField dateTimeField68 = chronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField69 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField70 = chronology60.era();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getEnd();
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        boolean boolean80 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration73.toPeriod(periodType81, chronology82);
        org.joda.time.PeriodType periodType84 = periodType81.withYearsRemoved();
        org.joda.time.PeriodType periodType85 = periodType84.withDaysRemoved();
        org.joda.time.PeriodType periodType86 = periodType85.withSecondsRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime62, periodType86);
        org.joda.time.Instant instant89 = dateTime62.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration90 = new org.joda.time.Duration((java.lang.Object) dateTime62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-11T09:36:44.143Z" + "'", str63, "2022-02-11T09:36:44.143Z");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(instant89);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.Chronology chronology16 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology13.getZone();
        org.joda.time.DurationField durationField19 = chronology13.centuries();
        org.joda.time.DurationField durationField20 = chronology13.weekyears();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = periodFormatter2.getLocale();
        boolean boolean40 = periodFormatter2.isPrinter();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (short) -1, (int) (byte) 10, (-51), 2, (-51), (int) (byte) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod49, "2022-02-11T09:35:40.251Z", (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        java.lang.StringBuffer stringBuffer11 = null;
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutablePeriod34.setPeriod(readablePeriod35);
        mutablePeriod34.addWeeks((int) (byte) 10);
        int[] intArray41 = chronology25.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) '#', (-1L));
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        java.lang.String str46 = duration43.toString();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean49 = periodType47.equals((java.lang.Object) false);
        org.joda.time.Period period50 = duration43.toPeriod(periodType47);
        org.joda.time.PeriodType periodType51 = periodType47.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(periodType51);
        int[] intArray55 = chronology25.get((org.joda.time.ReadablePeriod) mutablePeriod52, (long) (byte) 1, (long) '#');
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Period period68 = interval67.toPeriod();
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.hourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekyear();
        boolean boolean72 = mutablePeriod52.equals((java.lang.Object) dateTimeField71);
        org.joda.time.PeriodType periodType73 = mutablePeriod52.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter10.printTo(stringBuffer11, (org.joda.time.ReadablePeriod) mutablePeriod52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT126000S" + "'", str46, "PT126000S");
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(periodType73);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        mutablePeriod7.addMillis((-124));
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean14 = periodType12.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, periodType12, chronology15);
        mutablePeriod16.addYears((int) 'a');
        mutablePeriod16.addDays((int) 'a');
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        java.lang.String str25 = duration22.toString();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean28 = periodType26.equals((java.lang.Object) false);
        org.joda.time.Period period29 = duration22.toPeriod(periodType26);
        org.joda.time.PeriodType periodType30 = periodType26.withMillisRemoved();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.days();
        boolean boolean32 = periodType26.equals((java.lang.Object) periodType31);
        org.joda.time.PeriodType periodType33 = periodType26.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        boolean boolean35 = periodType26.isSupported(durationFieldType34);
        boolean boolean36 = mutablePeriod16.isSupported(durationFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = periodFormatter10.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod16, "2022-01-27T19:33:54.899Z/2022-02-11T09:35:34.899Z", 80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT126000S" + "'", str25, "PT126000S");
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(126000000L);
        org.joda.time.Duration duration3 = duration1.plus(1644572139204L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod15.copy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        int int31 = mutablePeriod30.getYears();
        java.lang.String str32 = mutablePeriod30.toString();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        mutablePeriod30.add((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant43, readableInstant44);
        boolean boolean46 = mutablePeriod37.equals((java.lang.Object) readableInstant43);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutablePeriod52.setPeriod(readablePeriod53);
        mutablePeriod52.addWeeks((int) (byte) 10);
        int int57 = mutablePeriod52.getMonths();
        int int58 = mutablePeriod52.size();
        mutablePeriod52.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod61 = mutablePeriod52.toMutablePeriod();
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.Period period63 = mutablePeriod52.toPeriod();
        boolean boolean64 = duration5.equals((java.lang.Object) period63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology71);
        mutablePeriod68.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        mutablePeriod72.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod83 = mutablePeriod72.copy();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Duration duration85 = mutablePeriod72.toDurationTo(readableInstant84);
        org.joda.time.Duration duration87 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology88 = null;
        mutablePeriod72.setPeriod((org.joda.time.ReadableDuration) duration87, chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration87, readableInstant90);
        boolean boolean92 = duration5.isEqual((org.joda.time.ReadableDuration) duration87);
        org.joda.time.Duration duration94 = org.joda.time.Duration.standardSeconds(1L);
        org.joda.time.Days days95 = duration94.toStandardDays();
        int int96 = duration87.compareTo((org.joda.time.ReadableDuration) duration94);
        org.joda.time.Duration duration97 = duration1.plus((org.joda.time.ReadableDuration) duration87);
        long long98 = duration97.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.052S" + "'", str32, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(days95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 35000L + "'", long98 == 35000L);
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        org.joda.time.format.PeriodPrinter periodPrinter4 = null;
        org.joda.time.format.PeriodParser periodParser5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = new org.joda.time.format.PeriodFormatter(periodPrinter4, periodParser5);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutablePeriod31.setPeriod(readablePeriod32);
        mutablePeriod31.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.days();
        int int37 = mutablePeriod31.get(durationFieldType36);
        boolean boolean38 = periodType24.isSupported(durationFieldType36);
        int int39 = periodType24.size();
        org.joda.time.PeriodType periodType40 = periodType24.withMonthsRemoved();
        org.joda.time.PeriodType periodType41 = periodType40.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter6.withParseType(periodType40);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(126000L, 1644572114290L, periodType40);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 0L, periodType40);
        java.lang.String str45 = mutablePeriod44.toString();
        org.joda.time.MutablePeriod mutablePeriod46 = mutablePeriod44.toMutablePeriod();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "P0Y" + "'", str45, "P0Y");
        org.junit.Assert.assertNotNull(mutablePeriod46);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(160000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = mutablePeriod9.toDurationTo(readableInstant21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology25 = null;
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration24, chronology25);
        boolean boolean27 = duration1.isEqual((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        boolean boolean57 = interval42.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.DateTime dateTime71 = interval69.getEnd();
        java.lang.String str72 = dateTime71.toString();
        boolean boolean73 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration74 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime56.getZone();
        org.joda.time.Period period76 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime56);
        long long77 = duration1.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-11T09:36:44.990Z" + "'", str72, "2022-02-11T09:36:44.990Z");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1644572156326L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology79);
        mutablePeriod80.add((int) (byte) 10, (int) '#', (int) (byte) 1, (int) ' ', (int) (byte) 10, 2, 100, 100);
        mutablePeriod80.clear();
        long long93 = chronology59.add((org.joda.time.ReadablePeriod) mutablePeriod80, 1643312034248L, 10);
        org.joda.time.DateTimeField dateTimeField94 = chronology59.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period95 = duration1.toPeriod(chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 9789119978");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1643312034248L + "'", long93 == 1643312034248L);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = mutablePeriod1.get(durationFieldType4);
        mutablePeriod1.addHours((int) 'a');
        mutablePeriod1.setMonths((int) '4');
        mutablePeriod1.setDays((int) '#');
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.dayTime();
        java.lang.String str15 = periodType14.getName();
        int int16 = periodType14.size();
        org.joda.time.PeriodType periodType17 = periodType14.withDaysRemoved();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfDay();
        org.joda.time.DurationField durationField37 = chronology33.minutes();
        org.joda.time.DurationField durationField38 = chronology33.seconds();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (-1), 1644572119917L, chronology33);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1644572129879L, 1644572170421L, periodType14, chronology33);
        org.joda.time.PeriodType periodType41 = periodType14.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) '#', periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DayTime" + "'", str15, "DayTime");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(periodType41);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.withMillis(126000000L);
        org.joda.time.Duration duration5 = duration1.minus(1644572125280L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) '#');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getEnd();
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getEnd();
        boolean boolean50 = interval35.contains((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = interval35.getStart();
        java.lang.String str52 = dateTime51.toString();
        boolean boolean53 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Interval interval54 = duration7.toIntervalFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        mutablePeriod62.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod73 = mutablePeriod62.copy();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology76);
        int int78 = mutablePeriod77.getYears();
        java.lang.String str79 = mutablePeriod77.toString();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        mutablePeriod84.setPeriod(readablePeriod85);
        mutablePeriod84.addWeeks((int) (byte) 10);
        mutablePeriod77.add((org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(readableInstant90, readableInstant91);
        boolean boolean93 = mutablePeriod84.equals((java.lang.Object) readableInstant90);
        mutablePeriod62.add((org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.PeriodType periodType95 = mutablePeriod62.getPeriodType();
        org.joda.time.Period period96 = duration5.toPeriodTo((org.joda.time.ReadableInstant) dateTime21, periodType95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((java.lang.Object) dateTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T09:36:45.407Z" + "'", str22, "2022-02-11T09:36:45.407Z");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-01-27T19:35:05.407Z" + "'", str52, "2022-01-27T19:35:05.407Z");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(mutablePeriod73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT0.052S" + "'", str79, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(periodType95);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        boolean boolean40 = periodFormatter39.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod41 = org.joda.time.MutablePeriod.parse("P52Y1M1W3DT9H35M20.453S", periodFormatter39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutablePeriod20.setPeriod(readablePeriod21);
        mutablePeriod20.addWeeks((int) (byte) 10);
        int int25 = mutablePeriod20.getMonths();
        mutablePeriod20.addDays(10);
        mutablePeriod20.setWeeks((int) (byte) -1);
        int[] intArray32 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod20, (long) 100, 10L);
        org.joda.time.DurationField durationField33 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField34 = chronology13.monthOfYear();
        java.lang.Class<?> wildcardClass35 = dateTimeField34.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, -90]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.secondOfMinute();
        org.joda.time.DurationField durationField31 = chronology26.weekyears();
        org.joda.time.DurationField durationField32 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfMonth();
        mutablePeriod11.add((long) 3, chronology26);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = interval48.isAfter(readableInterval49);
        org.joda.time.Chronology chronology51 = interval48.getChronology();
        mutablePeriod11.setPeriod(1644572118532L, 1644572142121L, chronology51);
        org.joda.time.Chronology chronology53 = chronology51.withUTC();
        long long57 = chronology53.add(1644572187937L, 1643312029818L, 340);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 560370662326057L + "'", long57 == 560370662326057L);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getMinutes();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        java.lang.String str17 = duration12.toString();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Period period30 = interval29.toPeriod();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.secondOfMinute();
        org.joda.time.DurationField durationField36 = chronology31.weekyears();
        org.joda.time.DurationField durationField37 = chronology31.millis();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.dayOfMonth();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration12, chronology31);
        org.joda.time.Period period40 = mutablePeriod3.toPeriod();
        org.joda.time.Period period41 = mutablePeriod3.toPeriod();
        int int42 = period41.size();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1260100S" + "'", str17, "PT1260100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod2.addHours(0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration8, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType0.getField(chronology22);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod34.addHours(10);
        int[] intArray39 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (short) 100, 1260100000L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        java.lang.Object obj49 = mutablePeriod47.clone();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) duration51, chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        mutablePeriod47.add((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Interval interval57 = interval55.toInterval();
        mutablePeriod34.setPeriod((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean62 = periodType60.equals((java.lang.Object) false);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Period period75 = interval74.toPeriod();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(1L, periodType60, chronology76);
        org.joda.time.MutablePeriod mutablePeriod78 = mutablePeriod77.toMutablePeriod();
        boolean boolean79 = interval57.equals((java.lang.Object) mutablePeriod77);
        mutablePeriod77.addWeeks((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod77.setPeriod(4, 97, 456825, (-124), (-124), 100, (int) (short) 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 2, 0, 14, 1, 39, 900]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.minuteOfHour();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1644572125205L, periodType1);
        mutablePeriod3.add((long) 456825);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setSeconds((-51));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hours" + "'", str2, "Hours");
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.setMinutes((int) (short) 0);
        mutablePeriod3.addDays(2);
        mutablePeriod3.setSeconds(51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        int int28 = duration7.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod30.addHours(0);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration36, chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.Period period54 = duration17.toPeriod(chronology50);
        org.joda.time.DurationField durationField55 = chronology50.hours();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.dayOfYear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str52, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = mutablePeriod7.getFieldTypes();
        mutablePeriod7.setYears((int) 'a');
        mutablePeriod7.setYears((int) (byte) 100);
        int int26 = mutablePeriod7.getMonths();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        java.lang.Object obj37 = mutablePeriod35.clone();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((java.lang.Object) duration39, chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.Chronology chronology46 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.monthOfYear();
        mutablePeriod7.setPeriod(2704L, chronology46);
        mutablePeriod7.clear();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Days days6 = duration5.toStandardDays();
        org.joda.time.Days days7 = duration5.toStandardDays();
        java.lang.Class<?> wildcardClass8 = duration5.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter38.getLocale();
        boolean boolean42 = periodFormatter38.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter43 = periodFormatter38.getPrinter();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod47.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod50 = mutablePeriod47.toMutablePeriod();
        int[] intArray51 = mutablePeriod47.getValues();
        mutablePeriod47.addHours(0);
        mutablePeriod47.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray56 = mutablePeriod47.getFieldTypes();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.forFields(durationFieldTypeArray56);
        org.joda.time.DurationFieldType durationFieldType59 = periodType57.getFieldType(4);
        org.joda.time.format.PeriodFormatter periodFormatter60 = periodFormatter38.withParseType(periodType57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod62 = periodFormatter38.parseMutablePeriod("2022-02-11T09:36:39.699Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(periodPrinter43);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(periodFormatter60);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatter2.getPrinter();
        boolean boolean8 = periodFormatter2.isPrinter();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNull(periodPrinter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = dateTime31.isEqual(readableInstant33);
        boolean boolean35 = interval15.contains(readableInstant33);
        org.joda.time.DateTime dateTime36 = interval15.getStart();
        java.lang.Object obj37 = null;
        boolean boolean38 = interval15.equals(obj37);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:36:47.379Z" + "'", str32, "2022-02-11T09:36:47.379Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        java.util.Locale locale7 = periodFormatter2.getLocale();
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter2.withLocale(locale8);
        org.joda.time.format.PeriodPrinter periodPrinter10 = periodFormatter2.getPrinter();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod12.addHours(0);
        mutablePeriod12.addYears(2);
        mutablePeriod12.addYears((int) '4');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod26.copy();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        boolean boolean54 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration47.toPeriod(periodType55, chronology56);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutablePeriod62.setPeriod(readablePeriod63);
        mutablePeriod62.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.days();
        int int68 = mutablePeriod62.get(durationFieldType67);
        boolean boolean69 = periodType55.isSupported(durationFieldType67);
        mutablePeriod26.set(durationFieldType67, (int) '4');
        java.lang.String str72 = durationFieldType67.getName();
        int int73 = mutablePeriod12.indexOf(durationFieldType67);
        mutablePeriod12.addMillis((int) (byte) -1);
        int int76 = mutablePeriod12.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNull(periodPrinter10);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "days" + "'", str72, "days");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(157802760000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = duration1.toPeriod();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2630046000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.joda.time.format.PeriodPrinter periodPrinter8 = null;
        org.joda.time.format.PeriodParser periodParser9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = new org.joda.time.format.PeriodFormatter(periodPrinter8, periodParser9);
        java.util.Locale locale11 = periodFormatter10.getLocale();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        mutablePeriod19.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod19.copy();
        org.joda.time.PeriodType periodType31 = mutablePeriod19.getPeriodType();
        org.joda.time.PeriodType periodType32 = periodType31.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter10.withParseType(periodType32);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        java.lang.String str39 = duration36.toString();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean42 = periodType40.equals((java.lang.Object) false);
        org.joda.time.Period period43 = duration36.toPeriod(periodType40);
        org.joda.time.PeriodType periodType44 = periodType40.withMillisRemoved();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        boolean boolean46 = periodType40.equals((java.lang.Object) periodType45);
        java.lang.String str47 = periodType40.toString();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1260100L, periodType40);
        org.joda.time.format.PeriodFormatter periodFormatter49 = periodFormatter33.withParseType(periodType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(97, (-3), 5, (int) (byte) 0, 33, 456825, (-3), 18, periodType40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT126000S" + "'", str39, "PT126000S");
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PeriodType[YearWeekDay]" + "'", str47, "PeriodType[YearWeekDay]");
        org.junit.Assert.assertNotNull(periodFormatter49);
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 340);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.add((org.joda.time.ReadablePeriod) mutablePeriod9);
        boolean boolean11 = duration1.equals((java.lang.Object) mutablePeriod9);
        mutablePeriod9.setMillis((int) (byte) -1);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.PeriodType periodType2 = periodType0.withWeeksRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod6.toMutablePeriod();
        int[] intArray10 = mutablePeriod6.getValues();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod15.add((long) ' ');
        mutablePeriod15.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = mutablePeriod15.isSupported(durationFieldType29);
        boolean boolean32 = periodType11.isSupported(durationFieldType29);
        int int33 = mutablePeriod6.indexOf(durationFieldType29);
        int int34 = periodType0.indexOf(durationFieldType29);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology50);
        mutablePeriod55.setMinutes(4);
        mutablePeriod55.setWeeks(340);
        boolean boolean60 = periodType0.equals((java.lang.Object) 340);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Days" + "'", str1, "Days");
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        java.lang.String str1 = periodType0.getName();
        int int2 = periodType0.size();
        org.joda.time.PeriodType periodType3 = periodType0.withDaysRemoved();
        org.joda.time.PeriodType periodType4 = periodType0.withMonthsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType7 = periodType5.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DayTime" + "'", str1, "DayTime");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getEnd();
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        boolean boolean80 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration73.toPeriod(periodType81, chronology82);
        org.joda.time.PeriodType periodType84 = periodType81.withYearsRemoved();
        org.joda.time.PeriodType periodType85 = periodType84.withDaysRemoved();
        org.joda.time.PeriodType periodType86 = periodType85.withSecondsRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime62, periodType86);
        org.joda.time.Instant instant89 = dateTime62.toInstant();
        java.lang.Object obj90 = null;
        boolean boolean91 = instant89.equals(obj90);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-11T09:36:48.153Z" + "'", str63, "2022-02-11T09:36:48.153Z");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        boolean boolean42 = interval27.contains((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        java.lang.String str57 = dateTime56.toString();
        boolean boolean58 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime41.getZone();
        org.joda.time.Period period61 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period62 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        boolean boolean75 = duration64.isShorterThan((org.joda.time.ReadableDuration) duration72);
        boolean boolean77 = duration64.equals((java.lang.Object) 0.0d);
        boolean boolean78 = duration1.equals((java.lang.Object) 0.0d);
        org.joda.time.Duration duration81 = duration1.withDurationAdded((long) 5, 97);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:36:48.345Z" + "'", str57, "2022-02-11T09:36:48.345Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration81);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        mutablePeriod2.addWeeks((int) 'a');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.halfdayOfDay();
        mutablePeriod2.add(1644572150989L, chronology21);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = chronology21.getDateTimeMillis(0, 2, (int) 'a', (-51), (int) (byte) 1, 35, 33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        long long21 = chronology13.add(1643312018503L, 0L, 0);
        long long25 = chronology13.add(1644572156326L, 1643312097539L, 100);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1643312018503L + "'", long21 == 1643312018503L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 165975781910226L + "'", long25 == 165975781910226L);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        org.joda.time.ReadWritablePeriod readWritablePeriod9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = periodFormatter2.parseInto(readWritablePeriod9, "2022-02-11T09:36:39.444Z", (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodFormatter8);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter40 = null;
        org.joda.time.format.PeriodParser periodParser41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = new org.joda.time.format.PeriodFormatter(periodPrinter40, periodParser41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        boolean boolean59 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration52.toPeriod(periodType60, chronology61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutablePeriod67.setPeriod(readablePeriod68);
        mutablePeriod67.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.days();
        int int73 = mutablePeriod67.get(durationFieldType72);
        boolean boolean74 = periodType60.isSupported(durationFieldType72);
        int int75 = periodType60.size();
        org.joda.time.PeriodType periodType76 = periodType60.withMonthsRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter42.withParseType(periodType76);
        java.util.Locale locale79 = null;
        org.joda.time.format.PeriodFormatter periodFormatter80 = periodFormatter78.withLocale(locale79);
        java.util.Locale locale81 = periodFormatter78.getLocale();
        boolean boolean82 = periodFormatter78.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter83 = periodFormatter78.getPrinter();
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.time();
        int int85 = periodType84.size();
        org.joda.time.PeriodType periodType86 = periodType84.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter87 = periodFormatter78.withParseType(periodType86);
        org.joda.time.PeriodType periodType88 = periodType86.withMonthsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter89 = periodFormatter2.withParseType(periodType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod91 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:06.838Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(periodFormatter80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(periodPrinter83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodFormatter87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodFormatter89);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType37 = mutablePeriod3.getFieldType(33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        int int42 = periodType41.size();
        org.joda.time.PeriodType periodType43 = periodType41.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter40.withParseType(periodType43);
        org.joda.time.format.PeriodParser periodParser45 = periodFormatter44.getParser();
        java.util.Locale locale46 = periodFormatter44.getLocale();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNull(periodParser45);
        org.junit.Assert.assertNull(locale46);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str23 = durationFieldType22.toString();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.secondOfMinute();
        org.joda.time.DurationField durationField42 = chronology37.months();
        boolean boolean43 = durationFieldType22.isSupported(chronology37);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1644572139095L, periodType21, chronology37);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod44.setMillis(340);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyears" + "'", str23, "weekyears");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration1.minus(1644572139243L);
        org.joda.time.Duration duration6 = duration1.toDuration();
        long long7 = duration6.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.clockhourOfDay();
        org.joda.time.DurationField durationField78 = chronology74.hours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:36:48.930Z" + "'", str42, "2022-02-11T09:36:48.930Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        java.lang.String str38 = chronology34.toString();
        org.joda.time.DurationField durationField39 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.millisOfDay();
        org.joda.time.DurationField durationField42 = chronology34.seconds();
        java.lang.String str43 = chronology34.toString();
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str38, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str43, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        // The following exception was thrown during execution in test generation
        try {
            int int31 = mutablePeriod22.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
    }
}

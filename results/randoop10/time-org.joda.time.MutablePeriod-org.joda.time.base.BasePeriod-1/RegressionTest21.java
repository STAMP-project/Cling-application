import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1644572238890L);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = new org.joda.time.Duration(10L);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        boolean boolean6 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration4);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutablePeriod5.setPeriod(readablePeriod6);
        mutablePeriod5.setMinutes((int) ' ');
        mutablePeriod5.setPeriod((long) (short) -1, (long) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod5.toMutablePeriod();
        org.joda.time.PeriodType periodType14 = mutablePeriod5.getPeriodType();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-11T09:37:39.430Z", periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:37:39.430Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.toMutablePeriod();
        int int13 = mutablePeriod12.getSeconds();
        mutablePeriod12.add(2704L);
        org.joda.time.DurationFieldType durationFieldType17 = mutablePeriod12.getFieldType((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod12.setMillis(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        boolean boolean46 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Minutes minutes47 = duration33.toStandardMinutes();
        org.joda.time.Duration duration49 = duration33.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod54.clear();
        mutablePeriod54.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType64 = null;
        boolean boolean65 = mutablePeriod54.isSupported(durationFieldType64);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration74.toPeriod(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        org.joda.time.Period period79 = interval78.toPeriod();
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.hourOfDay();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.weekyearOfCentury();
        mutablePeriod54.add((long) (short) 100, chronology80);
        org.joda.time.DurationField durationField84 = chronology80.halfdays();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((java.lang.Object) duration33, chronology80);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 51, (long) (byte) -1, chronology80);
        org.joda.time.Period period87 = mutablePeriod86.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int89 = period87.getValue(59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(period87);
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withSecondsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.centuryOfEra();
        org.joda.time.DurationField durationField26 = chronology20.minutes();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        boolean boolean56 = interval41.contains((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        java.lang.String str71 = dateTime70.toString();
        boolean boolean72 = dateTime55.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime55.getZone();
        org.joda.time.Chronology chronology75 = chronology20.withZone(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = chronology20.weekyearOfCentury();
        org.joda.time.DurationField durationField77 = chronology20.weekyears();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(19019L, 1644572250619L, periodType4, chronology20);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Days" + "'", str3, "Days");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-11T09:43:02.581Z" + "'", str71, "2022-02-11T09:43:02.581Z");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1644572231645L);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod10.getFieldTypes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod15.addHours(0);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration21, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType13, chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology35.getZone();
        org.joda.time.DateTimeField dateTimeField44 = chronology35.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1644572278721L, chronology35);
        org.joda.time.MutablePeriod mutablePeriod46 = mutablePeriod45.toMutablePeriod();
        mutablePeriod46.addSeconds(0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutablePeriod46);
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType14, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = chronology36.minuteOfDay();
        org.joda.time.DurationField durationField44 = chronology36.halfdays();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 10, chronology36);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        boolean boolean62 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Minutes minutes63 = duration49.toStandardMinutes();
        int[] intArray65 = chronology36.get((org.joda.time.ReadablePeriod) minutes63, (long) (-53));
        org.joda.time.DateTimeField dateTimeField66 = chronology36.dayOfMonth();
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod1.toMutablePeriod();
        mutablePeriod1.addMinutes(340);
        mutablePeriod1.setPeriod(0L, 1643312209993L);
        org.joda.time.Period period10 = mutablePeriod1.toPeriod();
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = interval25.isAfter(readableInterval26);
        org.joda.time.Chronology chronology28 = interval25.getChronology();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        boolean boolean57 = interval42.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.DateTime dateTime71 = interval69.getEnd();
        java.lang.String str72 = dateTime71.toString();
        boolean boolean73 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = interval25.isAfter((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Duration duration78 = duration76.plus(readableDuration77);
        org.joda.time.Duration duration80 = duration78.withMillis((long) (-1));
        long long81 = duration80.getStandardDays();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableDuration) duration80);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod82.setValue((-14), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -14");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-11T09:43:02.699Z" + "'", str72, "2022-02-11T09:43:02.699Z");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1643312118404L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        mutablePeriod7.setWeeks((int) (short) 10);
        mutablePeriod7.add(4, (int) '4', (int) 'a', 0, 32, 100, 8, (int) (short) 0);
        mutablePeriod7.addWeeks((int) (short) 10);
        mutablePeriod7.setMinutes(487);
        mutablePeriod7.addHours(100);
        mutablePeriod7.setDays(6);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-52), 11, (-27409536), 7);
        mutablePeriod4.addSeconds(32);
        mutablePeriod4.clear();
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) period12, chronology28);
        mutablePeriod33.addDays(1);
        mutablePeriod33.addMonths(34);
        mutablePeriod33.setYears(2);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 0, (-23), (-3), (-53), 671, 340, 102, 671);
        mutablePeriod8.addSeconds((int) 'a');
        mutablePeriod8.setWeeks(943);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.format.PeriodParser periodParser41 = periodFormatter40.getParser();
        java.util.Locale locale42 = periodFormatter40.getLocale();
        boolean boolean43 = periodFormatter40.isParser();
        boolean boolean44 = periodFormatter40.isParser();
        java.lang.StringBuffer stringBuffer45 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.days();
        java.lang.String str48 = periodType47.getName();
        org.joda.time.PeriodType periodType49 = periodType47.withSecondsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withHoursRemoved();
        org.joda.time.PeriodType periodType51 = periodType49.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, periodType49);
        int int53 = mutablePeriod52.getHours();
        mutablePeriod52.addMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter40.printTo(stringBuffer45, (org.joda.time.ReadablePeriod) mutablePeriod52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(periodParser41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Days" + "'", str48, "Days");
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((java.lang.Object) duration19, chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Period period36 = interval35.toPeriod();
        boolean boolean37 = interval23.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology40);
        mutablePeriod41.add((long) ' ');
        int int44 = mutablePeriod41.getDays();
        mutablePeriod41.setMillis((int) (byte) -1);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        boolean boolean74 = interval59.contains((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = duration76.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Period period84 = duration82.toPeriod(chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        org.joda.time.Interval interval87 = interval86.toInterval();
        org.joda.time.DateTime dateTime88 = interval86.getEnd();
        java.lang.String str89 = dateTime88.toString();
        boolean boolean90 = dateTime73.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Duration duration91 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean92 = interval35.isAfter((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime93 = interval35.getStart();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = null;
        boolean boolean95 = dateTime93.isSupported(dateTimeFieldType94);
        org.joda.time.Chronology chronology96 = dateTime93.getChronology();
        org.joda.time.DateTimeZone dateTimeZone97 = dateTime93.getZone();
        org.joda.time.Chronology chronology98 = chronology13.withZone(dateTimeZone97);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-11T09:43:02.813Z" + "'", str89, "2022-02-11T09:43:02.813Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(dateTimeZone97);
        org.junit.Assert.assertNotNull(chronology98);
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        boolean boolean30 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration23.toPeriod(periodType31, chronology32);
        org.joda.time.PeriodType periodType34 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType31.withWeeksRemoved();
        org.joda.time.PeriodType periodType36 = periodType31.withSecondsRemoved();
        org.joda.time.Period period37 = interval11.toPeriod(periodType31);
        org.joda.time.PeriodType periodType38 = periodType31.withSecondsRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withSecondsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withMinutesRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        boolean boolean46 = mutablePeriod30.isSupported(durationFieldType44);
        int int47 = periodType26.indexOf(durationFieldType44);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, periodType26, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.hourOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = mutablePeriod71.getFieldTypes();
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePeriod) mutablePeriod71, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField77 = chronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = chronology61.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology61);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(100L, (-124L), chronology61);
        mutablePeriod80.addMillis(100);
        mutablePeriod80.setYears(5);
        mutablePeriod80.addDays(350);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration13 = interval11.toDuration();
        org.joda.time.format.PeriodPrinter periodPrinter14 = null;
        org.joda.time.format.PeriodParser periodParser15 = null;
        org.joda.time.format.PeriodFormatter periodFormatter16 = new org.joda.time.format.PeriodFormatter(periodPrinter14, periodParser15);
        java.util.Locale locale17 = periodFormatter16.getLocale();
        java.util.Locale locale18 = periodFormatter16.getLocale();
        org.joda.time.format.PeriodParser periodParser19 = periodFormatter16.getParser();
        org.joda.time.format.PeriodParser periodParser20 = periodFormatter16.getParser();
        boolean boolean21 = duration13.equals((java.lang.Object) periodParser20);
        org.joda.time.Period period22 = duration13.toPeriod();
        long long23 = duration13.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNull(periodParser19);
        org.junit.Assert.assertNull(periodParser20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 350L + "'", long23 == 350L);
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) '#');
        boolean boolean4 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration8.withMillis((long) (-1));
        org.joda.time.Duration duration13 = duration10.withDurationAdded(0L, (int) (short) 10);
        org.joda.time.Duration duration14 = duration1.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        boolean boolean44 = interval29.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.DateTime dateTime58 = interval56.getEnd();
        java.lang.String str59 = dateTime58.toString();
        boolean boolean60 = dateTime43.isBefore((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration61 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime43.getZone();
        long long63 = dateTime43.getMillis();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration67.withMillis((long) (-1));
        org.joda.time.Duration duration72 = duration69.withDurationAdded(0L, (int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration77 = org.joda.time.Duration.millis((long) '#');
        boolean boolean78 = duration75.isShorterThan((org.joda.time.ReadableDuration) duration77);
        long long79 = duration77.getStandardSeconds();
        org.joda.time.Duration duration81 = org.joda.time.Duration.millis((long) (byte) 1);
        org.joda.time.Duration duration82 = duration77.minus((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration83 = duration81.toDuration();
        boolean boolean84 = mutablePeriod73.equals((java.lang.Object) duration83);
        boolean boolean85 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-11T09:43:02.913Z" + "'", str59, "2022-02-11T09:43:02.913Z");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1644572582913L + "'", long63 == 1644572582913L);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType25.withWeeksRemoved();
        org.joda.time.PeriodType periodType30 = periodType25.withWeeksRemoved();
        org.joda.time.PeriodType periodType31 = periodType25.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(periodType31);
        org.joda.time.PeriodType periodType33 = periodType31.withMonthsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(101, (int) (byte) -1, (int) '#', 918, 340, (int) (short) 100, 2719, 48, periodType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        int int13 = mutablePeriod12.getYears();
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod12.copy();
        mutablePeriod14.setYears((int) (short) 10);
        mutablePeriod14.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        mutablePeriod14.setPeriod((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.DateTime dateTime66 = interval64.getEnd();
        boolean boolean67 = interval52.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval38);
        org.joda.time.MutablePeriod mutablePeriod70 = mutablePeriod3.copy();
        org.joda.time.DurationFieldType durationFieldType72 = mutablePeriod70.getFieldType((int) (short) 0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology75);
        mutablePeriod76.add((long) ' ');
        mutablePeriod76.addSeconds((int) (byte) 100);
        mutablePeriod76.addWeeks((int) '#');
        org.joda.time.MutablePeriod mutablePeriod83 = mutablePeriod76.toMutablePeriod();
        mutablePeriod70.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod76);
        mutablePeriod70.setPeriod(1644572162472L, 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(mutablePeriod83);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod6.setPeriod((int) '4', 100, 10, (int) (byte) 10, 0, (int) (short) 1, (int) '#', 0);
        java.lang.String str16 = mutablePeriod6.toString();
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = mutablePeriod6.getFieldTypes();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        int int22 = mutablePeriod21.getYears();
        java.lang.String str23 = mutablePeriod21.toString();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant34, readableInstant35);
        boolean boolean37 = mutablePeriod28.equals((java.lang.Object) readableInstant34);
        org.joda.time.Period period38 = mutablePeriod28.toPeriod();
        org.joda.time.PeriodType periodType39 = mutablePeriod28.getPeriodType();
        mutablePeriod6.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.PeriodType periodType41 = mutablePeriod28.getPeriodType();
        org.joda.time.PeriodType periodType42 = periodType41.withSecondsRemoved();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P52Y100M10W10DT1M35S" + "'", str16, "P52Y100M10W10DT1M35S");
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.052S" + "'", str23, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getEnd();
        org.joda.time.Duration duration28 = interval25.toDuration();
        boolean boolean29 = interval13.overlaps((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Chronology chronology30 = interval25.getChronology();
        org.joda.time.DateTime dateTime31 = interval25.getEnd();
        org.joda.time.format.PeriodPrinter periodPrinter32 = null;
        org.joda.time.format.PeriodParser periodParser33 = null;
        org.joda.time.format.PeriodFormatter periodFormatter34 = new org.joda.time.format.PeriodFormatter(periodPrinter32, periodParser33);
        java.util.Locale locale35 = periodFormatter34.getLocale();
        java.util.Locale locale36 = periodFormatter34.getLocale();
        org.joda.time.format.PeriodParser periodParser37 = periodFormatter34.getParser();
        org.joda.time.format.PeriodParser periodParser38 = periodFormatter34.getParser();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.days();
        java.lang.String str42 = periodType41.getName();
        org.joda.time.PeriodType periodType43 = periodType41.withWeeksRemoved();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration40.toPeriod(periodType41, chronology44);
        org.joda.time.format.PeriodFormatter periodFormatter46 = periodFormatter34.withParseType(periodType41);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime31, periodType41);
        org.joda.time.Period period48 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNull(periodParser37);
        org.junit.Assert.assertNull(periodParser38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Days" + "'", str42, "Days");
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodFormatter46);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology15);
        org.joda.time.DurationField durationField21 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology15.era();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        org.joda.time.ReadableInterval readableInterval36 = null;
        mutablePeriod29.setPeriod(readableInterval36);
        int[] intArray40 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod29, 1644572135829L, 1644572119390L);
        mutablePeriod29.addMillis(0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, -16, -439]");
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addYears(1);
        mutablePeriod3.setHours(100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod17.setMillis((int) (short) 0);
        mutablePeriod17.addMonths((int) (short) 1);
        mutablePeriod17.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = mutablePeriod17.getFieldTypes();
        mutablePeriod17.addMonths(0);
        mutablePeriod17.setMillis((int) (byte) 1);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyearOfCentury();
        org.joda.time.DurationField durationField48 = chronology45.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.yearOfCentury();
        org.joda.time.DurationField durationField50 = chronology45.halfdays();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1644572120402L, (long) (byte) 10, chronology45);
        mutablePeriod51.setMonths((-53));
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        mutablePeriod17.addMillis(54);
        mutablePeriod17.add((int) (short) 1, (int) (short) -1, 0, (int) '#', 100, 70, 56, 35);
        org.joda.time.Period period66 = mutablePeriod17.toPeriod();
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572223782L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572223782 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addMonths(0);
        org.joda.time.Period period13 = mutablePeriod3.toPeriod();
        mutablePeriod3.addMonths((int) (short) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        boolean boolean32 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration25.toPeriod(periodType33, chronology34);
        org.joda.time.PeriodType periodType36 = periodType33.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.months();
        int int38 = periodType36.indexOf(durationFieldType37);
        boolean boolean39 = mutablePeriod3.isSupported(durationFieldType37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        mutablePeriod44.clear();
        mutablePeriod44.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType54 = null;
        boolean boolean55 = mutablePeriod44.isSupported(durationFieldType54);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Period period69 = interval68.toPeriod();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.hourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.weekyearOfCentury();
        mutablePeriod44.add((long) (short) 100, chronology70);
        org.joda.time.DurationField durationField74 = chronology70.halfdays();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField76 = chronology70.centuryOfEra();
        org.joda.time.DurationField durationField77 = chronology70.halfdays();
        mutablePeriod3.setPeriod(0L, chronology70);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        int int35 = mutablePeriod33.get(durationFieldType34);
        mutablePeriod33.addYears((int) (byte) 1);
        mutablePeriod33.setSeconds(32);
        int int40 = mutablePeriod33.getWeeks();
        mutablePeriod33.addYears(0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.PeriodType periodType40 = mutablePeriod7.getPeriodType();
        mutablePeriod7.setSeconds((int) '#');
        int int43 = mutablePeriod7.getMonths();
        org.joda.time.MutablePeriod mutablePeriod44 = mutablePeriod7.toMutablePeriod();
        int int46 = mutablePeriod7.getValue(3);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        mutablePeriod50.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        java.lang.Object obj56 = mutablePeriod54.clone();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration58, chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        mutablePeriod54.add((org.joda.time.ReadableInterval) interval62);
        org.joda.time.DateTime dateTime64 = interval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology67);
        mutablePeriod68.setMillis((int) (short) 0);
        mutablePeriod68.addMonths((int) (short) 1);
        int int73 = mutablePeriod68.size();
        int int74 = mutablePeriod68.getWeeks();
        mutablePeriod68.setYears(8);
        mutablePeriod68.addSeconds(1);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Duration duration84 = duration82.plus(readableDuration83);
        org.joda.time.Duration duration86 = duration80.withDurationAdded((org.joda.time.ReadableDuration) duration82, (int) (byte) 10);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Period period88 = duration86.toPeriod(chronology87);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Interval interval90 = duration86.toIntervalTo(readableInstant89);
        org.joda.time.Period period91 = interval90.toPeriod();
        org.joda.time.Chronology chronology92 = interval90.getChronology();
        mutablePeriod68.add((org.joda.time.ReadableInterval) interval90);
        boolean boolean94 = interval62.contains((org.joda.time.ReadableInterval) interval90);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval90);
        org.joda.time.Period period96 = mutablePeriod7.toPeriod();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType3 = periodType0.getFieldType(0);
        java.lang.String str4 = periodType0.toString();
        org.joda.time.format.PeriodPrinter periodPrinter5 = null;
        org.joda.time.format.PeriodParser periodParser6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = new org.joda.time.format.PeriodFormatter(periodPrinter5, periodParser6);
        java.util.Locale locale8 = periodFormatter7.getLocale();
        java.util.Locale locale9 = periodFormatter7.getLocale();
        org.joda.time.format.PeriodParser periodParser10 = periodFormatter7.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter11 = periodFormatter7.getPrinter();
        org.joda.time.format.PeriodParser periodParser12 = periodFormatter7.getParser();
        boolean boolean13 = periodFormatter7.isParser();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        boolean boolean30 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration23.toPeriod(periodType31, chronology32);
        org.joda.time.PeriodType periodType34 = periodType31.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.months();
        int int36 = periodType34.indexOf(durationFieldType35);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType34);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod46.addHours(10);
        mutablePeriod46.setWeeks(0);
        mutablePeriod46.setYears((int) (byte) 100);
        mutablePeriod46.clear();
        boolean boolean54 = periodType34.equals((java.lang.Object) mutablePeriod46);
        int int55 = periodType34.size();
        org.joda.time.format.PeriodFormatter periodFormatter56 = periodFormatter7.withParseType(periodType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((java.lang.Object) str4, periodType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[Millis]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PeriodType[Millis]" + "'", str4, "PeriodType[Millis]");
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNull(periodParser10);
        org.junit.Assert.assertNull(periodPrinter11);
        org.junit.Assert.assertNull(periodParser12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(periodFormatter56);
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        boolean boolean21 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration14.toPeriod(periodType22, chronology23);
        org.joda.time.PeriodType periodType25 = periodType22.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str27 = durationFieldType26.toString();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Period period40 = interval39.toPeriod();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.secondOfMinute();
        org.joda.time.DurationField durationField46 = chronology41.months();
        boolean boolean47 = durationFieldType26.isSupported(chronology41);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1644572139095L, periodType25, chronology41);
        org.joda.time.DateTimeField dateTimeField49 = chronology41.weekOfWeekyear();
        org.joda.time.DurationField durationField50 = chronology41.millis();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-61056806399660L), (-433L), chronology41);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1644572171196L, 1644572476116L, chronology41);
        org.joda.time.DateTimeField dateTimeField53 = chronology41.minuteOfHour();
        org.joda.time.DurationField durationField54 = chronology41.weeks();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyears" + "'", str27, "weekyears");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyear();
        org.joda.time.DurationField durationField60 = chronology57.weeks();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.clockhourOfDay();
        org.joda.time.DurationField durationField63 = chronology57.years();
        org.joda.time.DateTimeField dateTimeField64 = chronology57.clockhourOfDay();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((long) 2, (long) ' ');
        org.joda.time.Duration duration69 = duration67.withMillis(21001L);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology76);
        mutablePeriod73.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod77);
        java.lang.Object obj79 = mutablePeriod77.clone();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration81, chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        mutablePeriod77.add((org.joda.time.ReadableInterval) interval85);
        org.joda.time.DateTime dateTime87 = interval85.getStart();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod(1L, periodType89);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime87, periodType89);
        mutablePeriod91.setSeconds(0);
        int[] intArray96 = chronology57.get((org.joda.time.ReadablePeriod) mutablePeriod91, 1644572316381L, 1644572329373L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0, 0, 0, 0, 12, 992]");
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration1, periodType2);
        org.joda.time.Days days4 = duration1.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod6.addHours(0);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = mutablePeriod6.get(durationFieldType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod6.copy();
        mutablePeriod11.addDays(2);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getEnd();
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.DateTime dateTime29 = interval25.getStart();
        org.joda.time.Duration duration30 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = duration30.toPeriod();
        int int32 = duration1.compareTo((org.joda.time.ReadableDuration) duration30);
        java.lang.String str33 = duration30.toString();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration37 = org.joda.time.Duration.millis((long) '#');
        boolean boolean38 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration37);
        long long39 = duration37.getStandardSeconds();
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis((long) (byte) 1);
        org.joda.time.Duration duration42 = duration37.minus((org.joda.time.ReadableDuration) duration41);
        int int43 = duration30.compareTo((org.joda.time.ReadableDuration) duration37);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT172800.052S" + "'", str33, "PT172800.052S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(918, (-18), 4, 48);
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = periodFormatter2.parsePeriod("2022-02-11T09:36:17.248Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodPrinter5);
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        int int35 = mutablePeriod33.get(durationFieldType34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.secondOfMinute();
        org.joda.time.DurationField durationField54 = chronology49.weekyears();
        org.joda.time.DurationField durationField55 = chronology49.millis();
        boolean boolean56 = durationFieldType34.isSupported(chronology49);
        org.joda.time.DateTimeField dateTimeField57 = chronology49.year();
        org.joda.time.DateTimeField dateTimeField58 = chronology49.halfdayOfDay();
        org.joda.time.DurationField durationField59 = chronology49.years();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(261L, 5184456299723L, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        java.lang.String str16 = duration11.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((java.lang.Object) duration18, chronology19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        boolean boolean33 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration34 = duration18.minus((org.joda.time.ReadableDuration) duration22);
        boolean boolean35 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        boolean boolean38 = duration11.isEqual((org.joda.time.ReadableDuration) duration37);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        java.lang.Object obj52 = null;
        boolean boolean53 = duration47.equals(obj52);
        org.joda.time.Duration duration54 = duration47.toDuration();
        java.lang.String str55 = duration54.toString();
        org.joda.time.Duration duration56 = duration11.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration60 = duration58.plus(126000L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Period period73 = interval72.toPeriod();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.hourOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.dayOfYear();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        mutablePeriod83.setPeriod(readablePeriod84);
        mutablePeriod83.addWeeks((int) (byte) 10);
        int[] intArray90 = chronology74.get((org.joda.time.ReadablePeriod) mutablePeriod83, (long) '#', (-1L));
        org.joda.time.DurationField durationField91 = chronology74.minutes();
        org.joda.time.DurationField durationField92 = chronology74.centuries();
        org.joda.time.DateTimeField dateTimeField93 = chronology74.minuteOfHour();
        org.joda.time.Period period94 = duration60.toPeriod(chronology74);
        boolean boolean95 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1260100S" + "'", str16, "PT1260100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT1260100S" + "'", str55, "PT1260100S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutablePeriod44.setPeriod(readablePeriod45);
        mutablePeriod44.addWeeks((int) (byte) 10);
        int int49 = mutablePeriod44.getMonths();
        int int50 = mutablePeriod44.size();
        mutablePeriod44.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod44.toMutablePeriod();
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration56, chronology57);
        mutablePeriod58.setPeriod((int) '#', 2, (int) (short) 10, (-51), (int) '4', (int) '#', 10, 8);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.Period period69 = mutablePeriod58.toPeriod();
        org.joda.time.DurationFieldType durationFieldType71 = mutablePeriod58.getFieldType(0);
        mutablePeriod58.setMillis((int) (short) -1);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType71);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Hours hours4 = duration3.toStandardHours();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableInstant5, (org.joda.time.ReadableDuration) duration6, periodType7);
        org.joda.time.Duration duration10 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration6, 10);
        org.joda.time.Duration duration11 = duration6.toDuration();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.standard();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DurationFieldType[] durationFieldTypeArray26 = mutablePeriod24.getFieldTypes();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.forFields(durationFieldTypeArray26);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod29.addHours(0);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration35, chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType27, chronology49);
        java.lang.String str53 = chronology49.toString();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1644572123588L, (long) 4, chronology49);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.weekyearOfCentury();
        org.joda.time.Chronology chronology56 = chronology49.withUTC();
        org.joda.time.DurationField durationField57 = chronology49.weekyears();
        org.joda.time.Period period58 = duration11.toPeriod(periodType12, chronology49);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldTypeArray26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str53, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod29.setMillis((-1));
        org.joda.time.PeriodType periodType42 = mutablePeriod29.getPeriodType();
        java.lang.Object obj43 = mutablePeriod29.clone();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "P10WT0.001S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "P10WT0.001S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "P10WT0.001S");
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        java.lang.String str8 = duration5.toString();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean11 = periodType9.equals((java.lang.Object) false);
        org.joda.time.Period period12 = duration5.toPeriod(periodType9);
        org.joda.time.PeriodType periodType13 = periodType9.withMillisRemoved();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.days();
        boolean boolean15 = periodType9.equals((java.lang.Object) periodType14);
        org.joda.time.PeriodType periodType16 = periodType9.withMonthsRemoved();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod26.copy();
        org.joda.time.PeriodType periodType38 = mutablePeriod26.getPeriodType();
        org.joda.time.PeriodType periodType39 = periodType38.withWeeksRemoved();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        mutablePeriod43.add((long) ' ');
        mutablePeriod43.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutablePeriod52.setPeriod(readablePeriod53);
        mutablePeriod52.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.days();
        int int58 = mutablePeriod52.get(durationFieldType57);
        boolean boolean59 = mutablePeriod43.isSupported(durationFieldType57);
        int int60 = periodType39.indexOf(durationFieldType57);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Period period73 = interval72.toPeriod();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((java.lang.Object) duration18, periodType39, chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) (byte) 0, 0L, periodType9, chronology74);
        org.joda.time.DateTimeField dateTimeField78 = chronology74.millisOfDay();
        org.joda.time.DurationField durationField79 = chronology74.millis();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1643312038686L, 20492L, chronology74);
        org.joda.time.DateTimeField dateTimeField81 = chronology74.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long86 = chronology74.getDateTimeMillis(2784, 40, (-14), 112);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT126000S" + "'", str8, "PT126000S");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.PeriodType periodType34 = periodType17.withMinutesRemoved();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DurationFieldType[] durationFieldTypeArray47 = mutablePeriod45.getFieldTypes();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.forFields(durationFieldTypeArray47);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod50.addHours(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Period period69 = interval68.toPeriod();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        mutablePeriod50.setPeriod((org.joda.time.ReadableDuration) duration56, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType48, chronology70);
        org.joda.time.DateTimeField dateTimeField74 = chronology70.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.dayOfMonth();
        org.joda.time.DurationField durationField76 = durationFieldType35.getField(chronology70);
        int int77 = periodType17.indexOf(durationFieldType35);
        java.lang.String str78 = durationFieldType35.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(durationFieldTypeArray47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "weekyears" + "'", str78, "weekyears");
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        java.lang.String str72 = chronology68.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology68.secondOfDay();
        org.joda.time.Chronology chronology74 = chronology68.withUTC();
        org.joda.time.DurationField durationField75 = chronology74.eras();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.minuteOfDay();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str72, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1644572414653L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant2, (org.joda.time.ReadableDuration) duration3, periodType4);
        org.joda.time.Duration duration7 = duration3.minus((long) 10);
        org.joda.time.Period period8 = duration3.toPeriod();
        org.joda.time.Duration duration10 = duration3.plus(1644572120180L);
        org.joda.time.Duration duration12 = new org.joda.time.Duration(1644572172897L);
        org.joda.time.Duration duration14 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, 52);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Hours hours19 = duration18.toStandardHours();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        boolean boolean24 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((long) (-1), (-1));
        long long28 = duration21.getMillis();
        java.lang.String str29 = duration21.toString();
        org.joda.time.Duration duration31 = duration21.withMillis(1644572255589L);
        org.joda.time.Duration duration34 = new org.joda.time.Duration(1643312286578L, 1644572211797L);
        boolean boolean35 = duration31.isEqual((org.joda.time.ReadableDuration) duration34);
        boolean boolean36 = duration10.equals((java.lang.Object) duration34);
        org.joda.time.Duration duration38 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration34, 5);
        org.joda.time.Duration duration40 = duration34.withMillis(0L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 126000000L + "'", long28 == 126000000L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT126000S" + "'", str29, "PT126000S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        long long36 = interval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = interval32.toMutableInterval();
        long long38 = mutableInterval37.getEndMillis();
        org.joda.time.Interval interval39 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval37.getStart();
        long long41 = mutableInterval37.toDurationMillis();
        org.joda.time.Interval interval42 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1260100000L + "'", long36 == 1260100000L);
        org.junit.Assert.assertNotNull(mutableInterval37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1644572583782L + "'", long38 == 1644572583782L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1260100000L + "'", long41 == 1260100000L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.year();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.yearOfCentury();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = periodType18.isSupported(durationFieldType30);
        int int33 = periodType18.size();
        org.joda.time.PeriodType periodType34 = periodType18.withMonthsRemoved();
        org.joda.time.PeriodType periodType35 = periodType18.withWeeksRemoved();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.monthOfYear();
        org.joda.time.DurationField durationField52 = chronology49.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1643312075592L, periodType18, chronology49);
        java.lang.Object obj55 = mutablePeriod54.clone();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "P0Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "P0Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "P0Y");
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod9.addHours(0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration15, chronology29);
        long long31 = duration15.getStandardSeconds();
        long long32 = duration15.getMillis();
        boolean boolean33 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        boolean boolean50 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Minutes minutes51 = duration37.toStandardMinutes();
        org.joda.time.Duration duration53 = duration37.plus((long) 8);
        org.joda.time.Duration duration55 = duration37.minus((long) (byte) 1);
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration57 = duration55.toDuration();
        int int58 = duration15.compareTo((org.joda.time.ReadableDuration) duration57);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 126000L + "'", long31 == 126000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 126000000L + "'", long32 == 126000000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) -1);
        mutablePeriod1.setDays((int) 'a');
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod1.copy();
        int int5 = mutablePeriod1.size();
        int int6 = mutablePeriod1.getMinutes();
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (short) -1, 36000000L);
        org.joda.time.Hours hours3 = duration2.toStandardHours();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology25.seconds();
        org.joda.time.DurationField durationField32 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.millisOfDay();
        org.joda.time.DurationField durationField34 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology25.millisOfSecond();
        boolean boolean36 = duration2.equals((java.lang.Object) chronology25);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        org.joda.time.PeriodType periodType7 = periodFormatter6.getParseType();
        boolean boolean8 = periodFormatter6.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatter6.getPrinter();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(periodPrinter9);
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Period period14 = interval11.toPeriod();
        org.joda.time.Interval interval15 = interval11.toInterval();
        org.joda.time.Interval interval16 = interval11.toInterval();
        org.joda.time.format.PeriodPrinter periodPrinter17 = null;
        org.joda.time.format.PeriodParser periodParser18 = null;
        org.joda.time.format.PeriodFormatter periodFormatter19 = new org.joda.time.format.PeriodFormatter(periodPrinter17, periodParser18);
        java.util.Locale locale20 = periodFormatter19.getLocale();
        boolean boolean21 = periodFormatter19.isParser();
        org.joda.time.PeriodType periodType22 = periodFormatter19.getParseType();
        org.joda.time.PeriodType periodType23 = periodFormatter19.getParseType();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod27.setMillis((int) (short) 0);
        mutablePeriod27.addMonths((int) (short) 1);
        mutablePeriod27.setMinutes((int) (byte) 1);
        mutablePeriod27.addSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType36 = mutablePeriod27.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter37 = periodFormatter19.withParseType(periodType36);
        boolean boolean38 = interval16.equals((java.lang.Object) periodFormatter37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.days();
        java.lang.String str42 = periodType41.getName();
        org.joda.time.PeriodType periodType43 = periodType41.withWeeksRemoved();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyearOfCentury();
        org.joda.time.DurationField durationField60 = chronology57.days();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(2704L, 10L, periodType43, chronology57);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(periodType43);
        org.joda.time.format.PeriodFormatter periodFormatter63 = periodFormatter37.withParseType(periodType43);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(periodType22);
        org.junit.Assert.assertNull(periodType23);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Days" + "'", str42, "Days");
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(periodFormatter63);
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1644572480288L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Period period13 = interval11.toPeriod();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = interval11.contains(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        java.lang.Object obj25 = mutablePeriod23.clone();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((java.lang.Object) duration27, chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        mutablePeriod23.add((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod37.setMillis((int) (short) 0);
        mutablePeriod37.addMonths((int) (short) 1);
        int int42 = mutablePeriod37.size();
        int int43 = mutablePeriod37.getWeeks();
        mutablePeriod37.setYears(8);
        mutablePeriod37.addSeconds(1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        mutablePeriod37.add((org.joda.time.ReadableInterval) interval59);
        boolean boolean63 = interval31.contains((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = interval11.isBefore((org.joda.time.ReadableInterval) interval59);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.time();
        int int66 = periodType65.size();
        org.joda.time.Period period67 = interval59.toPeriod(periodType65);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology74);
        mutablePeriod71.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod75);
        java.lang.Object obj77 = mutablePeriod75.clone();
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((java.lang.Object) duration79, chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Interval interval83 = duration79.toIntervalTo(readableInstant82);
        mutablePeriod75.add((org.joda.time.ReadableInterval) interval83);
        org.joda.time.Interval interval85 = interval83.toInterval();
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.days();
        java.lang.String str87 = periodType86.getName();
        org.joda.time.PeriodType periodType88 = periodType86.withSecondsRemoved();
        org.joda.time.PeriodType periodType89 = periodType86.withMonthsRemoved();
        org.joda.time.Period period90 = interval85.toPeriod(periodType89);
        boolean boolean91 = interval59.isBefore((org.joda.time.ReadableInterval) interval85);
        long long92 = interval59.getEndMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Days" + "'", str87, "Days");
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1644572584015L + "'", long92 == 1644572584015L);
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        java.lang.String str44 = dateTime43.toString();
        boolean boolean45 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration56 = duration47.plus((org.joda.time.ReadableDuration) duration55);
        boolean boolean57 = dateTime43.equals((java.lang.Object) duration47);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        java.lang.Object obj67 = mutablePeriod65.clone();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((java.lang.Object) duration69, chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        mutablePeriod65.add((org.joda.time.ReadableInterval) interval73);
        org.joda.time.DateTime dateTime75 = interval73.getStart();
        org.joda.time.Chronology chronology76 = interval73.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.dayOfYear();
        org.joda.time.Period period78 = duration47.toPeriod(chronology76);
        org.joda.time.DateTimeField dateTimeField79 = chronology76.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology76.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField81 = chronology76.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(1644572119084L, 1644572186877L, chronology76);
        int int83 = mutablePeriod82.getMonths();
        mutablePeriod82.setMillis(6);
        mutablePeriod82.add(88, (int) 'a', (-18), (-3), 112, 97, 88, 712);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:43:04.042Z" + "'", str44, "2022-02-11T09:43:04.042Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(100L);
        java.lang.String str2 = duration1.toString();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.PeriodType periodType8 = periodType6.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, periodType6);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.hourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology23.seconds();
        org.joda.time.Period period28 = duration1.toPeriod(periodType6, chronology23);
        org.joda.time.Duration duration30 = new org.joda.time.Duration(10L);
        org.joda.time.Seconds seconds31 = duration30.toStandardSeconds();
        org.joda.time.Duration duration32 = duration30.toDuration();
        long long33 = duration32.getMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(1644572154267L);
        int int36 = duration32.compareTo((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration37 = duration1.minus((org.joda.time.ReadableDuration) duration35);
        long long38 = duration1.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0.100S" + "'", str2, "PT0.100S");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Days" + "'", str5, "Days");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1643312158638L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.add((long) ' ');
        int int8 = mutablePeriod5.getDays();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.millis();
        mutablePeriod5.add(durationFieldType9, (int) (byte) 1);
        int int12 = mutablePeriod5.getWeeks();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod16.add((long) ' ');
        mutablePeriod16.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = mutablePeriod16.isSupported(durationFieldType30);
        boolean boolean33 = mutablePeriod5.isSupported(durationFieldType30);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration35 = mutablePeriod5.toDurationTo(readableInstant34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getEnd();
        boolean boolean63 = interval48.contains((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Interval interval88 = interval87.toInterval();
        org.joda.time.DateTime dateTime89 = interval87.getEnd();
        org.joda.time.Duration duration90 = interval87.toDuration();
        boolean boolean91 = interval75.overlaps((org.joda.time.ReadableInterval) interval87);
        boolean boolean92 = interval48.isBefore((org.joda.time.ReadableInterval) interval75);
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Duration duration94 = interval48.toDuration();
        org.joda.time.DateTime dateTime95 = interval48.getStart();
        org.joda.time.DateTime dateTime96 = interval48.getStart();
        boolean boolean97 = duration1.equals((java.lang.Object) interval48);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withWeeksRemoved();
        org.joda.time.PeriodType periodType23 = periodType18.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(100L, periodType18);
        org.joda.time.PeriodType periodType25 = periodType18.withSecondsRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.add((long) ' ');
        mutablePeriod14.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod14.isSupported(durationFieldType28);
        boolean boolean31 = mutablePeriod3.isSupported(durationFieldType28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = mutablePeriod3.toDurationTo(readableInstant32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        boolean boolean61 = interval46.contains((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        org.joda.time.Duration duration88 = interval85.toDuration();
        boolean boolean89 = interval73.overlaps((org.joda.time.ReadableInterval) interval85);
        boolean boolean90 = interval46.isBefore((org.joda.time.ReadableInterval) interval73);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval46);
        mutablePeriod3.setWeeks(2);
        mutablePeriod3.add(1644572360814L);
        mutablePeriod3.addMinutes(107);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.hours();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withParseType(periodType4);
        boolean boolean7 = periodFormatter6.isParser();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType25.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean31 = periodType25.isSupported(durationFieldType30);
        org.joda.time.PeriodType periodType32 = periodType25.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter6.withParseType(periodType32);
        java.util.Locale locale34 = periodFormatter6.getLocale();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Hours" + "'", str5, "Hours");
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNull(locale34);
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.Chronology chronology22 = null;
        mutablePeriod7.setPeriod(1644572184618L, 1260100000L, chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod31.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod31.copy();
        mutablePeriod31.setMillis((int) ' ');
        mutablePeriod31.addDays(0);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod31);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DurationFieldType[] durationFieldTypeArray61 = mutablePeriod59.getFieldTypes();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.forFields(durationFieldTypeArray61);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod64.addHours(0);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Period period83 = interval82.toPeriod();
        org.joda.time.Chronology chronology84 = interval82.getChronology();
        mutablePeriod64.setPeriod((org.joda.time.ReadableDuration) duration70, chronology84);
        org.joda.time.DateTimeField dateTimeField86 = chronology84.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType62, chronology84);
        java.lang.String str88 = chronology84.toString();
        org.joda.time.DurationField durationField89 = chronology84.months();
        org.joda.time.DurationField durationField90 = chronology84.centuries();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((long) (short) -1, chronology84);
        int int92 = mutablePeriod91.getDays();
        boolean boolean93 = mutablePeriod7.equals((java.lang.Object) int92);
        mutablePeriod7.addDays(299);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(durationFieldTypeArray61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str88, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Period period21 = mutablePeriod10.toPeriod();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration32 = duration23.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean35 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration34);
        java.lang.String str36 = duration34.toString();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Period period54 = duration38.toPeriodTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period55 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration56 = mutablePeriod10.toDurationTo((org.joda.time.ReadableInstant) dateTime52);
        long long57 = duration56.getStandardMinutes();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT6000S" + "'", str36, "PT6000S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-11T09:43:04.223Z" + "'", str53, "2022-02-11T09:43:04.223Z");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100800L + "'", long57 == 100800L);
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = mutablePeriod7.getFieldTypes();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getEnd();
        org.joda.time.Duration duration24 = interval21.toDuration();
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval21);
        mutablePeriod7.addMonths(14);
        int int28 = mutablePeriod7.getMonths();
        mutablePeriod7.setMonths((int) 'a');
        mutablePeriod7.addMillis((-18));
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 14 + "'", int28 == 14);
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        java.lang.String str72 = chronology68.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology68.secondOfDay();
        org.joda.time.Chronology chronology74 = chronology68.withUTC();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.millisOfDay();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str72, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        boolean boolean5 = periodFormatter2.isParser();
        boolean boolean6 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatter2.getPrinter();
        boolean boolean8 = periodFormatter2.isPrinter();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(periodPrinter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(4, (int) (short) 100, (int) (byte) 0, 0);
        mutablePeriod4.addYears((-51));
        mutablePeriod4.setDays(6);
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        mutablePeriod10.addMillis(1);
        mutablePeriod10.addSeconds((int) 'a');
        java.lang.String str25 = mutablePeriod10.toString();
        mutablePeriod10.setWeeks(1);
        org.joda.time.format.PeriodPrinter periodPrinter28 = null;
        org.joda.time.format.PeriodParser periodParser29 = null;
        org.joda.time.format.PeriodFormatter periodFormatter30 = new org.joda.time.format.PeriodFormatter(periodPrinter28, periodParser29);
        java.util.Locale locale31 = periodFormatter30.getLocale();
        java.util.Locale locale32 = periodFormatter30.getLocale();
        org.joda.time.format.PeriodParser periodParser33 = periodFormatter30.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter34 = periodFormatter30.getPrinter();
        java.util.Locale locale35 = periodFormatter30.getLocale();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        boolean boolean52 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration45.toPeriod(periodType53, chronology54);
        org.joda.time.PeriodType periodType56 = periodType53.withYearsRemoved();
        org.joda.time.PeriodType periodType57 = periodType53.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType58 = null;
        int int59 = periodType57.indexOf(durationFieldType58);
        org.joda.time.format.PeriodFormatter periodFormatter60 = periodFormatter30.withParseType(periodType57);
        org.joda.time.PeriodType periodType61 = periodType57.withMinutesRemoved();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.days();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod64.addHours(0);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Period period83 = interval82.toPeriod();
        org.joda.time.Chronology chronology84 = interval82.getChronology();
        mutablePeriod64.setPeriod((org.joda.time.ReadableDuration) duration70, chronology84);
        org.joda.time.DateTimeField dateTimeField86 = chronology84.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField87 = chronology84.hourOfDay();
        boolean boolean88 = durationFieldType62.isSupported(chronology84);
        int int89 = periodType57.indexOf(durationFieldType62);
        boolean boolean90 = mutablePeriod10.isSupported(durationFieldType62);
        java.lang.String str91 = durationFieldType62.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "P10WT97.001S" + "'", str25, "P10WT97.001S");
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertNull(periodParser33);
        org.junit.Assert.assertNull(periodPrinter34);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "days" + "'", str91, "days");
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.secondOfMinute();
        org.joda.time.DurationField durationField31 = chronology26.weekyears();
        org.joda.time.DurationField durationField32 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfMonth();
        mutablePeriod11.add((long) 3, chronology26);
        mutablePeriod11.addMinutes((int) (short) 0);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration38 = mutablePeriod11.toDurationFrom(readableInstant37);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(duration38);
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1644572117941L, 1644572415451L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getEnd();
        boolean boolean30 = interval15.contains((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        boolean boolean44 = interval15.isBefore((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTime dateTime45 = interval42.getEnd();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        java.lang.String str47 = periodType46.getName();
        org.joda.time.PeriodType periodType48 = periodType46.withWeeksRemoved();
        org.joda.time.PeriodType periodType49 = periodType46.withMinutesRemoved();
        org.joda.time.PeriodType periodType50 = periodType46.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime45, periodType50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        java.lang.Object obj64 = null;
        boolean boolean65 = duration59.equals(obj64);
        org.joda.time.Duration duration66 = duration59.toDuration();
        org.joda.time.Duration duration68 = duration66.plus((long) 6);
        org.joda.time.Duration duration70 = duration66.withMillis(1644572108797L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Interval interval83 = interval82.toInterval();
        org.joda.time.DateTime dateTime84 = interval82.getEnd();
        org.joda.time.Interval interval85 = duration66.toIntervalTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Duration duration86 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone87 = dateTime45.getZone();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Days" + "'", str47, "Days");
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTimeZone87);
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        mutablePeriod5.addWeeks((int) '#');
        java.lang.Object obj10 = mutablePeriod5.clone();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '4');
        long long13 = duration12.getStandardDays();
        org.joda.time.Seconds seconds14 = duration12.toStandardSeconds();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration27 = duration18.plus((org.joda.time.ReadableDuration) duration26);
        boolean boolean28 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period29 = duration16.toPeriod();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.Duration duration40 = duration16.plus((org.joda.time.ReadableDuration) duration37);
        boolean boolean41 = duration12.equals((java.lang.Object) duration40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.Duration duration55 = interval53.toDuration();
        long long56 = interval53.toDurationMillis();
        org.joda.time.Period period57 = interval53.toPeriod();
        org.joda.time.DateTime dateTime58 = interval53.getEnd();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.days();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.PeriodType periodType61 = periodType59.withSecondsRemoved();
        org.joda.time.PeriodType periodType62 = periodType61.withHoursRemoved();
        org.joda.time.PeriodType periodType63 = periodType61.withSecondsRemoved();
        org.joda.time.PeriodType periodType64 = periodType61.withHoursRemoved();
        int int65 = periodType64.size();
        int int66 = periodType64.size();
        org.joda.time.Period period67 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime58, periodType64);
        mutablePeriod5.add((org.joda.time.ReadablePeriod) period67);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "P97Y35W2D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "P97Y35W2D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "P97Y35W2D");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1260100000L + "'", long56 == 1260100000L);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Days" + "'", str60, "Days");
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572369086L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572369086 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572151088L);
        int int2 = mutablePeriod1.getMinutes();
        mutablePeriod1.add(0, (-19), (-53), 5, 39, 184, (-42), 9);
        org.joda.time.Period period12 = mutablePeriod1.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType14 = mutablePeriod1.getFieldType(487);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        int int16 = mutablePeriod10.get(durationFieldType15);
        mutablePeriod10.setMinutes((-1));
        mutablePeriod10.addDays((int) (short) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        java.lang.Object obj32 = mutablePeriod30.clone();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((java.lang.Object) duration34, chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        mutablePeriod30.add((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.Chronology chronology41 = interval38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        mutablePeriod10.setPeriod((long) 100, (long) 3, chronology41);
        org.joda.time.PeriodType periodType44 = mutablePeriod10.getPeriodType();
        org.joda.time.PeriodType periodType45 = periodType44.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1643312038686L, 13156577230478L, periodType45);
        org.joda.time.PeriodType periodType47 = periodType45.withYearsRemoved();
        org.joda.time.PeriodType periodType48 = periodType47.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter49 = periodFormatter2.withParseType(periodType47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodFormatter49);
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withWeeksRemoved();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(2704L, 10L, periodType4, chronology18);
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = chronology18.get(readablePartial23, 1644572190503L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Days" + "'", str3, "Days");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) '4', (-51), 35, (int) (byte) 1, (int) '#', 0, 2, 32);
        org.joda.time.Period period9 = mutablePeriod8.toPeriod();
        mutablePeriod8.setPeriod(33, 51, 70, 5, (-51), 0, 101, (-35));
        mutablePeriod8.setHours(0);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '#', periodType1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        boolean boolean11 = duration4.isEqual((org.joda.time.ReadableDuration) duration8);
        boolean boolean12 = mutablePeriod2.equals((java.lang.Object) duration8);
        mutablePeriod2.addSeconds(712);
        mutablePeriod2.addWeeks((-3));
        mutablePeriod2.setHours(88);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.DateTime dateTime51 = interval49.getEnd();
        boolean boolean52 = interval37.contains((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration53 = mutablePeriod24.toDurationTo((org.joda.time.ReadableInstant) dateTime51);
        mutablePeriod24.addSeconds(54);
        org.joda.time.Period period56 = mutablePeriod24.toPeriod();
        int[] intArray58 = chronology18.get((org.joda.time.ReadablePeriod) period56, 1643312212916L);
        org.joda.time.DurationField durationField59 = chronology18.hours();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 2717, 0, 19, 36, 52, 916]");
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        java.lang.Object obj10 = mutablePeriod8.clone();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((java.lang.Object) duration12, chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval16);
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.Chronology chronology19 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1644572151352L, chronology19);
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration24, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        java.lang.Object obj36 = mutablePeriod34.clone();
        boolean boolean37 = duration24.equals((java.lang.Object) mutablePeriod34);
        mutablePeriod34.setDays((int) ' ');
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.DateTime dateTime66 = interval64.getEnd();
        boolean boolean67 = interval52.contains((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = duration75.toPeriod(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = duration75.toIntervalTo(readableInstant78);
        org.joda.time.Interval interval80 = interval79.toInterval();
        org.joda.time.DateTime dateTime81 = interval79.getEnd();
        java.lang.String str82 = dateTime81.toString();
        boolean boolean83 = dateTime66.isBefore((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime66.getZone();
        org.joda.time.Duration duration85 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateTime66);
        int int86 = mutablePeriod34.getYears();
        long long89 = chronology19.add((org.joda.time.ReadablePeriod) mutablePeriod34, 1643312308570L, 350);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "P32DT0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "P32DT0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "P32DT0.052S");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-11T09:43:04.606Z" + "'", str82, "2022-02-11T09:43:04.606Z");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 2610992290370L + "'", long89 == 2610992290370L);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) '4', (-124), 340, (-20));
        mutablePeriod4.setYears((-35));
        mutablePeriod4.addYears(2717);
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        mutablePeriod5.clear();
        mutablePeriod5.addSeconds(6);
        java.lang.String str34 = mutablePeriod5.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT6S" + "'", str34, "PT6S");
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Hours hours4 = duration3.toStandardHours();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableInstant5, (org.joda.time.ReadableDuration) duration6, periodType7);
        org.joda.time.Duration duration10 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration6, 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod18.copy();
        org.joda.time.PeriodType periodType30 = mutablePeriod18.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod18.toMutablePeriod();
        mutablePeriod18.clear();
        boolean boolean33 = duration10.equals((java.lang.Object) mutablePeriod18);
        int int34 = mutablePeriod18.getYears();
        org.joda.time.DurationFieldType durationFieldType36 = mutablePeriod18.getFieldType(2);
        mutablePeriod18.setMinutes(851);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(durationFieldType36);
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(3, (int) '#', 102, 51, (-23), 2, (int) (short) -1, (-19));
        mutablePeriod20.setSeconds(671);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.add((org.joda.time.ReadablePeriod) mutablePeriod20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod24.add((long) ' ');
        mutablePeriod24.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        int int39 = mutablePeriod33.get(durationFieldType38);
        boolean boolean40 = mutablePeriod24.isSupported(durationFieldType38);
        int int41 = periodType20.indexOf(durationFieldType38);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Period period54 = interval53.toPeriod();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.days();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.millisOfDay();
        org.joda.time.DurationField durationField59 = durationFieldType38.getField(chronology55);
        org.joda.time.DurationField durationField60 = chronology55.years();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        boolean boolean17 = mutablePeriod3.equals((java.lang.Object) (-1.0f));
        mutablePeriod3.setMinutes((int) (short) 1);
        int int20 = mutablePeriod3.getHours();
        org.joda.time.Period period21 = mutablePeriod3.toPeriod();
        mutablePeriod3.setMonths(1);
        mutablePeriod3.addMonths((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.add(6, 0, (int) (short) 0, 8, (int) '4', 98, (int) (short) 0, (-19));
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod3.toMutablePeriod();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(mutablePeriod36);
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (-53));
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration5 = org.joda.time.Duration.millis((long) '#');
        boolean boolean6 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration5);
        boolean boolean7 = duration1.isEqual((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration9 = duration5.minus(1644572255589L);
        org.joda.time.Period period10 = duration5.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.era();
        org.joda.time.DurationField durationField26 = chronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (byte) 0, (int) (byte) 0, 0, (int) '#', (int) (short) -1, 3, (int) (short) 1, (int) ' ');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod24.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod24.copy();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = mutablePeriod24.toDurationTo(readableInstant36);
        long long38 = duration37.getStandardSeconds();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Days days40 = duration37.toStandardDays();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 28083659L + "'", long38 == 28083659L);
        org.junit.Assert.assertNotNull(days40);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod18.toMutablePeriod();
        mutablePeriod18.addWeeks(4);
        mutablePeriod18.setSeconds(80);
        mutablePeriod18.add((-28), (-28), 59, 8, 92, 92, 46, (-3));
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType14, chronology36);
        java.lang.String str40 = chronology36.toString();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1644572123588L, (long) 4, chronology36);
        int int42 = mutablePeriod41.getMinutes();
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str40, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-35) + "'", int42 == (-35));
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        long long23 = duration7.getStandardSeconds();
        org.joda.time.Period period24 = duration7.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) duration26, chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = mutablePeriod28.toDurationFrom(readableInstant29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) duration32, chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        boolean boolean37 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration32);
        java.lang.String str38 = duration32.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        int int43 = mutablePeriod42.getMinutes();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        java.lang.String str56 = duration51.toString();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Period period69 = interval68.toPeriod();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.hourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.dayOfYear();
        org.joda.time.DateTimeField dateTimeField74 = chronology70.secondOfMinute();
        org.joda.time.DurationField durationField75 = chronology70.weekyears();
        org.joda.time.DurationField durationField76 = chronology70.millis();
        org.joda.time.DateTimeField dateTimeField77 = chronology70.dayOfMonth();
        mutablePeriod42.setPeriod((org.joda.time.ReadableDuration) duration51, chronology70);
        boolean boolean79 = duration32.isEqual((org.joda.time.ReadableDuration) duration51);
        int int80 = duration7.compareTo((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration83 = new org.joda.time.Duration(1644572512388L, 83873178385L);
        boolean boolean84 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 126000L + "'", long23 == 126000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT60S" + "'", str38, "PT60S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT1260100S" + "'", str56, "PT1260100S");
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod18.addMillis((int) (byte) 100);
        mutablePeriod18.setMinutes((int) (short) 10);
        mutablePeriod18.addMonths(1250);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = mutablePeriod18.getFieldType((-28));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        java.lang.Object obj0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = periodType18.isSupported(durationFieldType30);
        int int33 = periodType18.size();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(periodType18);
        org.joda.time.PeriodType periodType35 = periodType18.withMinutesRemoved();
        java.lang.String str36 = periodType18.toString();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(obj0, periodType18);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[Years]" + "'", str36, "PeriodType[Years]");
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        boolean boolean6 = periodFormatter2.isPrinter();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withDaysRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withYearsRemoved();
        java.lang.String str30 = periodType28.toString();
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter2.withParseType(periodType28);
        java.util.Locale locale32 = null;
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter2.withLocale(locale32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period35 = periodFormatter33.parsePeriod("2022-01-27T19:38:36.920Z/2022-02-11T09:40:16.920Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PeriodType[YearsNoYears]" + "'", str30, "PeriodType[YearsNoYears]");
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodFormatter33);
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str23 = durationFieldType22.toString();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.secondOfMinute();
        org.joda.time.DurationField durationField42 = chronology37.months();
        boolean boolean43 = durationFieldType22.isSupported(chronology37);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1644572139095L, periodType21, chronology37);
        org.joda.time.DateTimeField dateTimeField45 = chronology37.weekOfWeekyear();
        org.joda.time.DurationField durationField46 = chronology37.millis();
        org.joda.time.DateTimeField dateTimeField47 = chronology37.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((java.lang.Object) chronology37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyears" + "'", str23, "weekyears");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology54 = dateTime50.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.millis();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.monthOfYear();
        org.joda.time.Chronology chronology58 = chronology54.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.hourOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:43:05.012Z" + "'", str51, "2022-02-11T09:43:05.012Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Hours hours4 = duration3.toStandardHours();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        boolean boolean9 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        int int20 = duration6.compareTo((org.joda.time.ReadableDuration) duration17);
        java.lang.String str21 = duration6.toString();
        java.lang.String str22 = duration6.toString();
        org.joda.time.Duration duration24 = duration6.withMillis(1644572524536L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT126000S" + "'", str21, "PT126000S");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT126000S" + "'", str22, "PT126000S");
        org.junit.Assert.assertNotNull(duration24);
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, periodType2);
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1644572119390L, periodType4);
        mutablePeriod5.setMinutes((int) ' ');
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        boolean boolean26 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration19.toPeriod(periodType27, chronology28);
        int int30 = duration9.compareTo((org.joda.time.ReadableDuration) duration19);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod32.addHours(0);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Period period51 = interval50.toPeriod();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration38, chronology52);
        java.lang.String str54 = chronology52.toString();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekOfWeekyear();
        org.joda.time.Period period56 = duration19.toPeriod(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) (short) 100, periodType1, chronology52);
        mutablePeriod58.addMinutes(10);
        org.joda.time.MutablePeriod mutablePeriod61 = mutablePeriod58.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod58.addYears(431);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str54, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(mutablePeriod61);
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.secondOfMinute();
        org.joda.time.DurationField durationField31 = chronology26.weekyears();
        org.joda.time.DurationField durationField32 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfMonth();
        mutablePeriod11.add((long) 3, chronology26);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = interval48.isAfter(readableInterval49);
        org.joda.time.Chronology chronology51 = interval48.getChronology();
        mutablePeriod11.setPeriod(1644572118532L, 1644572142121L, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.year();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) -1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        mutablePeriod1.add(durationFieldType40, (int) '4');
        mutablePeriod1.setSeconds((int) '4');
        mutablePeriod1.setYears(487);
        mutablePeriod1.add(1644572348140L);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean55 = periodType53.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, periodType53, chronology56);
        mutablePeriod57.addYears((int) 'a');
        mutablePeriod57.addDays((int) 'a');
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        java.lang.String str66 = duration63.toString();
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean69 = periodType67.equals((java.lang.Object) false);
        org.joda.time.Period period70 = duration63.toPeriod(periodType67);
        org.joda.time.PeriodType periodType71 = periodType67.withMillisRemoved();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.days();
        boolean boolean73 = periodType67.equals((java.lang.Object) periodType72);
        org.joda.time.PeriodType periodType74 = periodType67.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.hours();
        boolean boolean76 = periodType67.isSupported(durationFieldType75);
        boolean boolean77 = mutablePeriod57.isSupported(durationFieldType75);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration85.toPeriod(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Interval interval89 = duration85.toIntervalTo(readableInstant88);
        org.joda.time.Period period90 = interval89.toPeriod();
        org.joda.time.Period period91 = interval89.toPeriod();
        mutablePeriod57.add((org.joda.time.ReadableInterval) interval89);
        org.joda.time.ReadableInterval readableInterval93 = null;
        boolean boolean94 = interval89.isAfter(readableInterval93);
        org.joda.time.MutableInterval mutableInterval95 = interval89.toMutableInterval();
        org.joda.time.Duration duration96 = mutableInterval95.toDuration();
        org.joda.time.Period period97 = mutableInterval95.toPeriod();
        mutablePeriod1.add((org.joda.time.ReadableInterval) mutableInterval95);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT126000S" + "'", str66, "PT126000S");
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mutableInterval95);
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertNotNull(period97);
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addYears(1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        boolean boolean18 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration15);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int23 = duration13.compareTo((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration34 = duration25.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean37 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration36);
        java.lang.String str38 = duration34.toString();
        boolean boolean39 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration41 = duration34.withMillis((long) (byte) 1);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration52 = duration43.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean55 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardMinutes((long) 1);
        int int58 = duration52.compareTo((org.joda.time.ReadableDuration) duration57);
        boolean boolean59 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration62 = duration57.withDurationAdded(1644572554856L, 52);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT160S" + "'", str38, "PT160S");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration62);
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.secondOfMinute();
        org.joda.time.DurationField durationField31 = chronology26.weekyears();
        org.joda.time.DurationField durationField32 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfMonth();
        mutablePeriod11.add((long) 3, chronology26);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod11.toMutablePeriod();
        java.lang.Object obj36 = mutablePeriod11.clone();
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod11.toMutablePeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "P0D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "P0D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "P0D");
        org.junit.Assert.assertNotNull(mutablePeriod37);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(32, 10, (-392), 2719, 0, 2784, 100, 38);
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1643312238397L, 0L);
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Period period13 = interval11.toPeriod();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = interval11.contains(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        java.lang.Object obj25 = mutablePeriod23.clone();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((java.lang.Object) duration27, chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        mutablePeriod23.add((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod37.setMillis((int) (short) 0);
        mutablePeriod37.addMonths((int) (short) 1);
        int int42 = mutablePeriod37.size();
        int int43 = mutablePeriod37.getWeeks();
        mutablePeriod37.setYears(8);
        mutablePeriod37.addSeconds(1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        mutablePeriod37.add((org.joda.time.ReadableInterval) interval59);
        boolean boolean63 = interval31.contains((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = interval11.isBefore((org.joda.time.ReadableInterval) interval59);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.time();
        int int66 = periodType65.size();
        org.joda.time.Period period67 = interval59.toPeriod(periodType65);
        org.joda.time.Chronology chronology68 = interval59.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.hourOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        mutablePeriod7.setSeconds((int) '#');
        mutablePeriod7.setPeriod(1260100000L, 1260100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration26 = duration24.plus(126000L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        int int33 = mutablePeriod30.getDays();
        mutablePeriod30.setMillis((int) (byte) -1);
        mutablePeriod30.setYears(4);
        boolean boolean38 = duration24.equals((java.lang.Object) 4);
        long long39 = duration24.getStandardSeconds();
        java.lang.Object obj40 = null;
        boolean boolean41 = duration24.equals(obj40);
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 6000L + "'", long39 == 6000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Duration duration57 = duration45.minus(100000L);
        org.joda.time.Duration duration58 = duration45.toDuration();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration62 = duration60.withMillis(126000000L);
        org.joda.time.Duration duration64 = duration60.minus(1644572125280L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.millis(1644572140503L);
        boolean boolean67 = duration60.equals((java.lang.Object) duration66);
        boolean boolean68 = duration45.isEqual((org.joda.time.ReadableDuration) duration66);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:43:05.246Z" + "'", str42, "2022-02-11T09:43:05.246Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod7.setMillis((int) ' ');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        mutablePeriod28.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod28.copy();
        org.joda.time.PeriodType periodType40 = mutablePeriod28.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType43 = periodType40.getFieldType(1);
        mutablePeriod7.add(durationFieldType43, (int) ' ');
        mutablePeriod7.setYears(93);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType43);
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getEnd();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval16);
        long long20 = interval16.getStartMillis();
        org.joda.time.Period period21 = interval16.toPeriod();
        long long22 = interval16.getEndMillis();
        java.lang.String str23 = interval16.toString();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1643312485303L + "'", long20 == 1643312485303L);
        org.junit.Assert.assertNotNull(period21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644572585303L + "'", long22 == 1644572585303L);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-27T19:41:25.303Z/2022-02-11T09:43:05.303Z" + "'", str23, "2022-01-27T19:41:25.303Z/2022-02-11T09:43:05.303Z");
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        long long6 = interval5.getEndMillis();
        org.joda.time.Interval interval7 = interval5.toInterval();
        org.joda.time.MutableInterval mutableInterval8 = interval5.toMutableInterval();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration18.toPeriod(periodType26, chronology27);
        org.joda.time.PeriodType periodType29 = periodType26.withMonthsRemoved();
        org.joda.time.Period period30 = interval5.toPeriod(periodType29);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572585317L + "'", long6 == 1644572585317L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        mutablePeriod7.clear();
        mutablePeriod7.clear();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0S");
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setDays((int) (short) 10);
        mutablePeriod3.setYears(51);
        mutablePeriod3.setMonths(36);
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 112);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.add((long) ' ');
        int int8 = mutablePeriod5.getDays();
        mutablePeriod5.setMillis((int) (byte) -1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getEnd();
        boolean boolean38 = interval23.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        java.lang.String str53 = dateTime52.toString();
        boolean boolean54 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = mutablePeriod5.toDurationFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology56 = dateTime52.getChronology();
        org.joda.time.Interval interval57 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-11T09:43:05.385Z" + "'", str53, "2022-02-11T09:43:05.385Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval57);
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType5);
        org.joda.time.PeriodType periodType11 = periodType5.withMonthsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withMonthsRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        boolean boolean20 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration17);
        long long21 = duration17.getMillis();
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration17);
        mutablePeriod3.addWeeks((-28));
        org.joda.time.DurationFieldType[] durationFieldTypeArray25 = mutablePeriod3.getFieldTypes();
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 126000000L + "'", long21 == 126000000L);
        org.junit.Assert.assertNotNull(durationFieldTypeArray25);
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) '#');
        boolean boolean4 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        long long5 = duration3.getStandardSeconds();
        org.joda.time.Duration duration7 = duration3.withMillis(1083773027377440L);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.days();
        java.lang.String str11 = periodType10.getName();
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = chronology26.days();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(2704L, 10L, periodType12, chronology26);
        org.joda.time.Period period31 = duration7.toPeriod(chronology26);
        org.joda.time.Period period32 = duration7.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Days" + "'", str11, "Days");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration3.withMillis((long) (-1));
        org.joda.time.Duration duration8 = duration5.withDurationAdded(0L, (int) (short) 10);
        org.joda.time.Duration duration10 = duration8.plus(60000L);
        org.joda.time.Period period11 = duration8.toPeriod();
        long long12 = duration8.getStandardHours();
        long long13 = duration8.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getEnd();
        boolean boolean28 = interval13.contains((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        java.lang.String str43 = dateTime42.toString();
        boolean boolean44 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration55 = duration46.plus((org.joda.time.ReadableDuration) duration54);
        boolean boolean56 = dateTime42.equals((java.lang.Object) duration46);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology63);
        mutablePeriod60.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        java.lang.Object obj66 = mutablePeriod64.clone();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((java.lang.Object) duration68, chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        mutablePeriod64.add((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateTime dateTime74 = interval72.getStart();
        org.joda.time.Chronology chronology75 = interval72.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.dayOfYear();
        org.joda.time.Period period77 = duration46.toPeriod(chronology75);
        org.joda.time.DurationField durationField78 = chronology75.minutes();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.dayOfYear();
        org.joda.time.Chronology chronology80 = chronology75.withUTC();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.weekyearOfCentury();
        org.joda.time.DurationField durationField82 = chronology80.weeks();
        long long86 = chronology80.add(2100L, 2L, (int) '4');
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1644572224546L, chronology80);
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((long) '#', (long) 2, periodType90);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(periodType90);
        mutablePeriod87.add((org.joda.time.ReadablePeriod) mutablePeriod92);
        mutablePeriod92.setSeconds(5438);
        mutablePeriod92.setSeconds((int) '4');
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-11T09:43:05.488Z" + "'", str43, "2022-02-11T09:43:05.488Z");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 2204L + "'", long86 == 2204L);
        org.junit.Assert.assertNotNull(periodType90);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(360000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setDays((int) (byte) 100);
        mutablePeriod2.clear();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setValue(341, (-14));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        java.lang.String str3 = duration2.toString();
        org.joda.time.Duration duration5 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getEnd();
        org.joda.time.Duration duration20 = interval17.toDuration();
        org.joda.time.DateTime dateTime21 = interval17.getStart();
        org.joda.time.Period period22 = duration5.toPeriodTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        boolean boolean35 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration32);
        long long36 = duration32.getStandardSeconds();
        int int37 = duration5.compareTo((org.joda.time.ReadableDuration) duration32);
        int int38 = duration2.compareTo((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 0, (long) ' ');
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        mutablePeriod46.setPeriod((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Chronology chronology62 = interval58.getChronology();
        org.joda.time.DateTime dateTime63 = interval58.getEnd();
        org.joda.time.Interval interval64 = duration41.toIntervalTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0S" + "'", str3, "PT0S");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1260100L + "'", long36 == 1260100L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval64);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.clear();
        mutablePeriod3.addMonths((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod3.getFieldTypes();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.weekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod27.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = mutablePeriod27.get(durationFieldType30);
        int int32 = mutablePeriod27.size();
        mutablePeriod27.add((long) 14);
        long long37 = chronology15.add((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 4, 456825);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology15.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology15.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = chronology15.get(readablePartial41, 5920460025292800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-12791096L) + "'", long37 == (-12791096L));
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatter3.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod5 = org.joda.time.MutablePeriod.parse("2022-01-27T19:39:28.450Z", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodPrinter4);
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(20, 1, 918, 45);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod8.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod8.toMutablePeriod();
        mutablePeriod8.addDays((int) (byte) 1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        boolean boolean30 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration23.toPeriod(chronology31);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) period32);
        java.lang.String str34 = period32.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod38.toMutablePeriod();
        mutablePeriod41.setPeriod((int) '4', 100, 10, (int) (byte) 10, 0, (int) (short) 1, (int) '#', 0);
        java.lang.String str51 = mutablePeriod41.toString();
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = mutablePeriod41.getFieldTypes();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod56.add((long) ' ');
        mutablePeriod56.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutablePeriod65.setPeriod(readablePeriod66);
        mutablePeriod65.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.days();
        int int71 = mutablePeriod65.get(durationFieldType70);
        boolean boolean72 = mutablePeriod56.isSupported(durationFieldType70);
        int int73 = mutablePeriod41.indexOf(durationFieldType70);
        org.joda.time.Chronology chronology74 = null;
        boolean boolean75 = durationFieldType70.isSupported(chronology74);
        boolean boolean76 = period32.isSupported(durationFieldType70);
        int int77 = mutablePeriod4.get(durationFieldType70);
        mutablePeriod4.setHours((-124));
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M40S" + "'", str34, "PT1M40S");
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "P52Y100M10W10DT1M35S" + "'", str51, "P52Y100M10W10DT1M35S");
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.time();
        boolean boolean13 = periodType9.equals((java.lang.Object) periodType12);
        org.joda.time.PeriodType periodType14 = periodType9.withSecondsRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod15.copy();
        org.joda.time.PeriodType periodType27 = mutablePeriod15.getPeriodType();
        org.joda.time.PeriodType periodType28 = periodType27.withWeeksRemoved();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod32.add((long) ' ');
        mutablePeriod32.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutablePeriod41.setPeriod(readablePeriod42);
        mutablePeriod41.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.days();
        int int47 = mutablePeriod41.get(durationFieldType46);
        boolean boolean48 = mutablePeriod32.isSupported(durationFieldType46);
        int int49 = periodType28.indexOf(durationFieldType46);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Period period62 = interval61.toPeriod();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) duration7, periodType28, chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.hourOfDay();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology72);
        mutablePeriod69.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.DurationFieldType[] durationFieldTypeArray75 = mutablePeriod73.getFieldTypes();
        int[] intArray78 = chronology63.get((org.joda.time.ReadablePeriod) mutablePeriod73, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField79 = chronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField80 = chronology63.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology63);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(100L, (-124L), chronology63);
        org.joda.time.DateTimeField dateTimeField83 = chronology63.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField84 = chronology63.yearOfCentury();
        org.joda.time.DurationField durationField85 = chronology63.days();
        org.joda.time.DurationField durationField86 = chronology63.months();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1644572245457L, periodType1, chronology63);
        mutablePeriod87.clear();
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationFieldTypeArray75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(durationField86);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        mutablePeriod3.addYears(0);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.setDays(52);
        mutablePeriod3.clear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        int int17 = mutablePeriod16.getYears();
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod16.copy();
        mutablePeriod18.setYears((int) (short) 10);
        mutablePeriod18.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        mutablePeriod18.setPeriod((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        mutablePeriod18.add((org.joda.time.ReadableInterval) interval55);
        org.joda.time.PeriodType periodType58 = mutablePeriod18.getPeriodType();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Period period72 = interval71.toPeriod();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.days();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.millisOfDay();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField78 = chronology73.monthOfYear();
        org.joda.time.DateTimeField dateTimeField79 = chronology73.millisOfDay();
        mutablePeriod18.setPeriod(1000L, chronology73);
        org.joda.time.DateTimeField dateTimeField81 = chronology73.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField82 = chronology73.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField83 = chronology73.secondOfMinute();
        mutablePeriod3.setPeriod(1644572276897L, chronology73);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572153833L);
        mutablePeriod1.setMonths(102);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod7.setMillis((int) (short) 0);
        mutablePeriod7.addMonths((int) (short) 1);
        mutablePeriod7.setMinutes((int) (byte) 1);
        mutablePeriod7.add((int) (short) 1, 32, 2, (int) (byte) 100, (int) (byte) 1, 3, 4, 10);
        mutablePeriod7.addDays(2);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean28 = periodType26.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, periodType26, chronology29);
        mutablePeriod30.addYears((int) 'a');
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod54.clear();
        mutablePeriod54.setValue((int) (byte) 0, (-1));
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        mutablePeriod40.setYears((int) (byte) 1);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.addHours((int) (short) 1);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        java.lang.String str74 = duration71.toString();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean77 = periodType75.equals((java.lang.Object) false);
        org.joda.time.Period period78 = duration71.toPeriod(periodType75);
        org.joda.time.PeriodType periodType79 = periodType75.withMillisRemoved();
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.days();
        boolean boolean81 = periodType75.equals((java.lang.Object) periodType80);
        org.joda.time.PeriodType periodType82 = periodType75.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.hours();
        boolean boolean84 = periodType75.isSupported(durationFieldType83);
        boolean boolean85 = mutablePeriod40.isSupported(durationFieldType83);
        boolean boolean86 = mutablePeriod7.isSupported(durationFieldType83);
        int int87 = mutablePeriod1.get(durationFieldType83);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT126000S" + "'", str74, "PT126000S");
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 456825 + "'", int87 == 456825);
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.days();
        boolean boolean5 = mutablePeriod1.isSupported(durationFieldType4);
        mutablePeriod1.addMonths(0);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology26);
        org.joda.time.DurationField durationField32 = chronology26.centuries();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology26);
        org.joda.time.DateTimeField dateTimeField34 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology26.dayOfMonth();
        java.lang.String str36 = chronology26.toString();
        mutablePeriod1.add((long) (-1), chronology26);
        mutablePeriod1.clear();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str36, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        mutablePeriod1.addYears(2);
        mutablePeriod1.addYears((int) '4');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod15.copy();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        boolean boolean43 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration36.toPeriod(periodType44, chronology45);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutablePeriod51.setPeriod(readablePeriod52);
        mutablePeriod51.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.days();
        int int57 = mutablePeriod51.get(durationFieldType56);
        boolean boolean58 = periodType44.isSupported(durationFieldType56);
        mutablePeriod15.set(durationFieldType56, (int) '4');
        java.lang.String str61 = durationFieldType56.getName();
        int int62 = mutablePeriod1.indexOf(durationFieldType56);
        boolean boolean64 = mutablePeriod1.equals((java.lang.Object) "2022-01-27T19:33:34.681Z/2022-02-11T09:35:14.681Z");
        mutablePeriod1.addWeeks(0);
        mutablePeriod1.addSeconds((-52));
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "days" + "'", str61, "days");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1644572140503L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = mutablePeriod5.toDurationFrom(readableInstant6);
        org.joda.time.Days days8 = duration7.toStandardDays();
        boolean boolean9 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = duration7.minus(1643312172541L);
        org.joda.time.Period period12 = duration7.toPeriod();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod21.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod32 = mutablePeriod21.copy();
        org.joda.time.PeriodType periodType33 = mutablePeriod21.getPeriodType();
        boolean boolean34 = periodType13.equals((java.lang.Object) mutablePeriod21);
        org.joda.time.PeriodType periodType35 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutablePeriod41.setPeriod(readablePeriod42);
        mutablePeriod41.addWeeks((int) (byte) 10);
        mutablePeriod41.addWeeks(0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        int int52 = mutablePeriod51.getYears();
        java.lang.String str53 = mutablePeriod51.toString();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutablePeriod58.setPeriod(readablePeriod59);
        mutablePeriod58.addWeeks((int) (byte) 10);
        mutablePeriod51.add((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(readableInstant64, readableInstant65);
        boolean boolean67 = mutablePeriod58.equals((java.lang.Object) readableInstant64);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.millis();
        mutablePeriod58.set(durationFieldType68, (int) (byte) 10);
        mutablePeriod41.set(durationFieldType68, (int) '4');
        boolean boolean73 = periodType36.isSupported(durationFieldType68);
        org.joda.time.PeriodType periodType74 = periodType36.withHoursRemoved();
        org.joda.time.Period period75 = duration7.toPeriod(periodType36);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0.052S" + "'", str53, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-19), (int) (short) -1, (-124), (int) (byte) 10);
        mutablePeriod4.clear();
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod4.getFieldTypes();
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.Chronology chronology15 = interval11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = chronology15.getDateTimeMillis(1L, 341, 46, (-28), 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 341 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        int int6 = mutablePeriod5.getYears();
        java.lang.String str7 = mutablePeriod5.toString();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        mutablePeriod5.add((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant18, readableInstant19);
        boolean boolean21 = mutablePeriod12.equals((java.lang.Object) readableInstant18);
        org.joda.time.Period period22 = mutablePeriod12.toPeriod();
        boolean boolean23 = mutablePeriod1.equals((java.lang.Object) period22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DurationFieldType[] durationFieldTypeArray37 = mutablePeriod35.getFieldTypes();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.forFields(durationFieldTypeArray37);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod40.addHours(0);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration46, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType38, chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField67 = chronology60.minuteOfDay();
        org.joda.time.DurationField durationField68 = chronology60.months();
        mutablePeriod1.setPeriod(1644572233598L, 1644572211547L, chronology60);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology72);
        mutablePeriod73.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod73.add((org.joda.time.ReadablePeriod) mutablePeriod77);
        mutablePeriod73.addYears(2);
        mutablePeriod73.addDays(35);
        int[] intArray85 = chronology60.get((org.joda.time.ReadablePeriod) mutablePeriod73, 1643308500943L, (-31246872614383L));
        int int86 = mutablePeriod73.getMonths();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.052S" + "'", str7, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1042, -2, -4, -1, -9, -25, -15, -326]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval12.getStart();
        long long29 = interval12.getEndMillis();
        long long30 = interval12.getStartMillis();
        org.joda.time.Interval interval31 = interval12.toInterval();
        org.joda.time.DateTime dateTime32 = interval12.getEnd();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        java.lang.String str38 = duration35.toString();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean41 = periodType39.equals((java.lang.Object) false);
        org.joda.time.Period period42 = duration35.toPeriod(periodType39);
        org.joda.time.PeriodType periodType43 = periodType39.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(periodType39);
        org.joda.time.PeriodType periodType45 = periodType39.withMonthsRemoved();
        org.joda.time.PeriodType periodType46 = periodType39.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1644572351974L, periodType39);
        org.joda.time.Period period48 = interval12.toPeriod(periodType39);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644572585852L + "'", long29 == 1644572585852L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1643312485852L + "'", long30 == 1643312485852L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT126000S" + "'", str38, "PT126000S");
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addHours((int) (short) 0);
        int int13 = mutablePeriod3.getSeconds();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DurationFieldType[] durationFieldTypeArray27 = mutablePeriod25.getFieldTypes();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.forFields(durationFieldTypeArray27);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod30.addHours(0);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration36, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType28, chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.halfdayOfDay();
        org.joda.time.DurationField durationField55 = chronology50.weekyears();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1644572166232L, chronology50);
        long long62 = chronology50.getDateTimeMillis(1644572298610L, 11, 5, (int) (short) 0, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField63 = chronology50.weekOfWeekyear();
        mutablePeriod3.add(1644572377999L, chronology50);
        org.joda.time.ReadablePartial readablePartial65 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long67 = chronology50.set(readablePartial65, 1644572268427L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1644577500000L + "'", long62 == 1644577500000L);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        int int3 = mutablePeriod2.size();
        org.joda.time.Period period4 = mutablePeriod2.toPeriod();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration8 = org.joda.time.Duration.millis((long) 2);
        boolean boolean9 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        boolean boolean26 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration19.toPeriod(periodType27, chronology28);
        org.joda.time.PeriodType periodType30 = periodType27.withYearsRemoved();
        org.joda.time.PeriodType periodType31 = periodType27.withWeeksRemoved();
        org.joda.time.PeriodType periodType32 = periodType27.withWeeksRemoved();
        org.joda.time.Period period33 = duration6.toPeriod(periodType32);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration6);
        mutablePeriod2.setPeriod((-392), 2, (-3126812), 712, 2719, 658, (int) (byte) 10, 45);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(38L, periodType1, chronology2);
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        boolean boolean43 = interval28.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        java.lang.String str58 = dateTime57.toString();
        boolean boolean59 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime42.getZone();
        org.joda.time.Period period62 = duration13.toPeriodTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period63 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        java.lang.Object obj64 = null;
        boolean boolean65 = dateTime42.equals(obj64);
        org.joda.time.Instant instant66 = dateTime42.toInstant();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-11T09:43:05.918Z" + "'", str58, "2022-02-11T09:43:05.918Z");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(instant66);
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        java.lang.String str59 = periodType22.getName();
        org.joda.time.PeriodType periodType60 = periodType22.withHoursRemoved();
        java.lang.String str61 = periodType22.getName();
        org.joda.time.PeriodType periodType62 = periodType22.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType64 = periodType22.getFieldType(5);
        org.joda.time.PeriodType periodType65 = periodType22.withMonthsRemoved();
        int int66 = periodType65.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "StandardNoWeeks" + "'", str59, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "StandardNoWeeks" + "'", str61, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.setHours(0);
        int int9 = mutablePeriod3.getMillis();
        mutablePeriod3.addMillis(97);
        mutablePeriod3.addMonths((-14));
        int int14 = mutablePeriod3.getMillis();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-20) + "'", int9 == (-20));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 77 + "'", int14 == 77);
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval12.getStart();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        boolean boolean42 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        org.joda.time.Interval interval57 = duration35.toIntervalFrom((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = dateTime56.isSupported(dateTimeFieldType59);
        org.joda.time.Chronology chronology61 = dateTime56.getChronology();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-27T19:41:25.989Z" + "'", str29, "2022-01-27T19:41:25.989Z");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutablePeriod44.setPeriod(readablePeriod45);
        mutablePeriod44.addWeeks((int) (byte) 10);
        int int49 = mutablePeriod44.getMonths();
        int int50 = mutablePeriod44.size();
        mutablePeriod44.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod44.toMutablePeriod();
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod44.setMinutes(0);
        mutablePeriod44.setHours(6);
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = mutablePeriod44.getFieldTypes();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.forFields(durationFieldTypeArray59);
        int int61 = periodType60.size();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:10.106Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:10.106Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 2719, 1643312036835L);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter38.isPrinter();
        org.joda.time.PeriodType periodType40 = periodFormatter38.getParseType();
        org.joda.time.format.PeriodParser periodParser41 = periodFormatter38.getParser();
        boolean boolean42 = periodFormatter38.isPrinter();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1643312094639L);
        int int45 = mutablePeriod44.getDays();
        mutablePeriod44.setPeriod(40, 302, (-20), 4, 6, 9, (int) (short) 0, 340);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = periodFormatter38.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod44, "2022-02-11T09:37:04.546Z", (-18));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNull(periodParser41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod13.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        java.lang.Object obj19 = mutablePeriod17.clone();
        mutablePeriod17.clear();
        int int21 = mutablePeriod17.getWeeks();
        mutablePeriod17.addMonths(943);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, periodType25);
        mutablePeriod26.addDays((int) (short) -1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod32.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod32.toMutablePeriod();
        int[] intArray36 = mutablePeriod32.getValues();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        boolean boolean53 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration46.toPeriod(periodType54, chronology55);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        mutablePeriod61.setPeriod(readablePeriod62);
        mutablePeriod61.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.days();
        int int67 = mutablePeriod61.get(durationFieldType66);
        boolean boolean68 = periodType54.isSupported(durationFieldType66);
        mutablePeriod32.set(durationFieldType66, 8);
        boolean boolean71 = mutablePeriod26.isSupported(durationFieldType66);
        int int72 = mutablePeriod17.get(durationFieldType66);
        int int73 = mutablePeriod3.get(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "P943M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "P943M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "P943M");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.addHours((int) (short) 10);
        mutablePeriod3.setHours(102);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod17.setMillis((int) (short) 0);
        mutablePeriod17.addMonths((int) (short) 1);
        int int22 = mutablePeriod17.size();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        int int29 = mutablePeriod26.getDays();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.millis();
        mutablePeriod26.add(durationFieldType30, (int) (byte) 1);
        int int33 = mutablePeriod26.getWeeks();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod37.add((long) ' ');
        mutablePeriod37.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutablePeriod46.setPeriod(readablePeriod47);
        mutablePeriod46.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        int int52 = mutablePeriod46.get(durationFieldType51);
        boolean boolean53 = mutablePeriod37.isSupported(durationFieldType51);
        boolean boolean54 = mutablePeriod26.isSupported(durationFieldType51);
        int int55 = mutablePeriod17.get(durationFieldType51);
        java.lang.String str56 = durationFieldType51.toString();
        java.lang.String str57 = durationFieldType51.toString();
        int int58 = mutablePeriod3.indexOf(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "days" + "'", str56, "days");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "days" + "'", str57, "days");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1L);
        org.joda.time.Days days2 = duration1.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod4.addHours(0);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration10, chronology24);
        org.joda.time.Duration duration28 = duration10.withDurationAdded((long) 3, (int) '4');
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, (org.joda.time.ReadableDuration) duration30, periodType31);
        boolean boolean33 = duration10.isEqual((org.joda.time.ReadableDuration) duration30);
        boolean boolean34 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((-1L), 1644572118532L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isShorterThan(readableDuration38);
        org.joda.time.Duration duration41 = duration37.withMillis(0L);
        boolean boolean42 = duration1.isEqual((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period43 = duration37.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(10, 100, 14, 36);
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) duration7, chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        boolean boolean12 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        org.joda.time.Duration duration27 = interval24.toDuration();
        boolean boolean28 = duration5.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        long long37 = duration36.getStandardDays();
        org.joda.time.Duration duration38 = duration27.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        mutablePeriod43.setPeriod((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Chronology chronology59 = interval55.getChronology();
        org.joda.time.Period period60 = duration36.toPeriod(chronology59);
        long long61 = duration36.getStandardHours();
        long long62 = duration36.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 14L + "'", long37 == 14L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 350L + "'", long61 == 350L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1260100L + "'", long62 == 1260100L);
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.PeriodType periodType24 = periodType21.withYearsRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DurationFieldType[] durationFieldTypeArray36 = mutablePeriod34.getFieldTypes();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.forFields(durationFieldTypeArray36);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod39.addHours(0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration45, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType37, chronology59);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) (short) 1, (long) (short) 100, periodType24, chronology59);
        org.joda.time.PeriodType periodType64 = periodType24.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(periodType24);
        org.joda.time.PeriodType periodType66 = periodType24.withMonthsRemoved();
        org.joda.time.PeriodType periodType67 = periodType24.withWeeksRemoved();
        org.joda.time.PeriodType periodType68 = periodType67.withWeeksRemoved();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology76);
        mutablePeriod73.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod77);
        java.lang.Object obj79 = mutablePeriod77.clone();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration81, chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        mutablePeriod77.add((org.joda.time.ReadableInterval) interval85);
        org.joda.time.DateTime dateTime87 = interval85.getStart();
        org.joda.time.Chronology chronology88 = interval85.getChronology();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(1644572151352L, chronology88);
        org.joda.time.DateTimeField dateTimeField90 = chronology88.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology88.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(0L, 1644572125205L, periodType67, chronology88);
        org.joda.time.PeriodType periodType93 = periodType67.withMonthsRemoved();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldTypeArray36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(periodType93);
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1644572160782L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        mutablePeriod7.setDays(100);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str29 = durationFieldType28.toString();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Period period42 = interval41.toPeriod();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.secondOfMinute();
        org.joda.time.DurationField durationField48 = chronology43.months();
        boolean boolean49 = durationFieldType28.isSupported(chronology43);
        boolean boolean50 = mutablePeriod7.isSupported(durationFieldType28);
        mutablePeriod7.addMinutes(6);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyears" + "'", str29, "weekyears");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Hours hours4 = duration3.toStandardHours();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        boolean boolean9 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        int int20 = duration6.compareTo((org.joda.time.ReadableDuration) duration17);
        java.lang.String str21 = duration6.toString();
        java.lang.String str22 = duration6.toString();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(1L);
        org.joda.time.Duration duration25 = duration24.toDuration();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Hours hours30 = duration29.toStandardHours();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        boolean boolean35 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration36 = duration25.plus((org.joda.time.ReadableDuration) duration32);
        boolean boolean37 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT126000S" + "'", str21, "PT126000S");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT126000S" + "'", str22, "PT126000S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        mutablePeriod1.addYears(2);
        org.joda.time.PeriodType periodType6 = mutablePeriod1.getPeriodType();
        mutablePeriod1.addSeconds(45);
        mutablePeriod1.addMonths((int) (short) -1);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        boolean boolean42 = interval27.contains((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        java.lang.String str57 = dateTime56.toString();
        boolean boolean58 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime41.getZone();
        org.joda.time.Period period61 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period62 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Instant instant63 = dateTime41.toInstant();
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        long long65 = instant63.getMillis();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType67 = periodType66.withYearsRemoved();
        boolean boolean68 = instant63.equals((java.lang.Object) periodType67);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:43:06.338Z" + "'", str57, "2022-02-11T09:43:06.338Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(chronology64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1644572586338L + "'", long65 == 1644572586338L);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology13.dayOfYear();
        org.joda.time.DurationField durationField32 = chronology13.days();
        org.joda.time.Chronology chronology33 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        boolean boolean27 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration22, chronology28);
        long long30 = duration22.getMillis();
        long long31 = duration22.getStandardSeconds();
        org.joda.time.Duration duration33 = duration22.minus(1644572275367L);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 126000000L + "'", long30 == 126000000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 126000L + "'", long31 == 126000L);
        org.junit.Assert.assertNotNull(duration33);
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology59);
        mutablePeriod77.addHours((int) (byte) 0);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration87.toPeriod(chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Interval interval91 = duration87.toIntervalTo(readableInstant90);
        org.joda.time.Interval interval92 = interval91.toInterval();
        org.joda.time.DateTime dateTime93 = interval91.getEnd();
        org.joda.time.Duration duration94 = interval91.toDuration();
        java.lang.String str95 = interval91.toString();
        org.joda.time.MutableInterval mutableInterval96 = interval91.toMutableInterval();
        mutablePeriod77.add((org.joda.time.ReadableInterval) interval91);
        mutablePeriod77.addSeconds(2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(duration94);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-01-27T19:41:26.439Z/2022-02-11T09:43:06.439Z" + "'", str95, "2022-01-27T19:41:26.439Z/2022-02-11T09:43:06.439Z");
        org.junit.Assert.assertNotNull(mutableInterval96);
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology59);
        org.joda.time.DateTimeField dateTimeField78 = chronology59.yearOfEra();
        org.joda.time.DurationField durationField79 = chronology59.halfdays();
        org.joda.time.DateTimeField dateTimeField80 = chronology59.secondOfDay();
        org.joda.time.DateTimeField dateTimeField81 = chronology59.clockhourOfHalfday();
        org.joda.time.DurationField durationField82 = chronology59.weeks();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration32 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Instant instant33 = dateTime30.toInstant();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        boolean boolean61 = interval46.contains((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = instant33.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int64 = instant33.get(dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod6.setPeriod((int) '4', 100, 10, (int) (byte) 10, 0, (int) (short) 1, (int) '#', 0);
        java.lang.String str16 = mutablePeriod6.toString();
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = mutablePeriod6.getFieldTypes();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod21.add((long) ' ');
        mutablePeriod21.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutablePeriod30.setPeriod(readablePeriod31);
        mutablePeriod30.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.days();
        int int36 = mutablePeriod30.get(durationFieldType35);
        boolean boolean37 = mutablePeriod21.isSupported(durationFieldType35);
        int int38 = mutablePeriod6.indexOf(durationFieldType35);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P52Y100M10W10DT1M35S" + "'", str16, "P52Y100M10W10DT1M35S");
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.Period period7 = mutablePeriod3.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue(918, 70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 918");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        boolean boolean46 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration39.toPeriod(periodType47, chronology48);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = periodType47.isSupported(durationFieldType59);
        java.lang.String str62 = periodType47.getName();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType47, chronology63);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((java.lang.Object) duration66, chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        long long71 = interval70.toDurationMillis();
        mutablePeriod64.setPeriod((org.joda.time.ReadableInterval) interval70);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        int int74 = mutablePeriod64.getHours();
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Years" + "'", str62, "Years");
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 60000L + "'", long71 == 60000L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod16.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod30.clear();
        mutablePeriod30.setValue((int) (byte) 0, (-1));
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod30, chronology41);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutablePeriod47.setPeriod(readablePeriod48);
        mutablePeriod47.addWeeks((int) (byte) 10);
        int int52 = mutablePeriod47.getMonths();
        int int53 = mutablePeriod47.size();
        mutablePeriod47.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod56 = mutablePeriod47.toMutablePeriod();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardMinutes((long) 1);
        mutablePeriod56.add((org.joda.time.ReadableDuration) duration58);
        mutablePeriod42.add((org.joda.time.ReadableDuration) duration58);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertNotNull(duration58);
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        int int1 = periodType0.size();
        org.joda.time.PeriodType periodType2 = periodType0.withYearsRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType2);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setMillis(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = mutablePeriod2.getFieldTypes();
        mutablePeriod2.addYears((int) (byte) 0);
        mutablePeriod2.addMonths(6);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod2.toMutablePeriod();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DurationFieldType[] durationFieldTypeArray22 = mutablePeriod20.getFieldTypes();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.forFields(durationFieldTypeArray22);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod25.addHours(0);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration31, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType23, chronology45);
        mutablePeriod48.setMillis((int) (byte) -1);
        int int51 = mutablePeriod48.getSeconds();
        mutablePeriod48.add((-3), (int) (short) 0, (int) (short) 100, 35, 52, (int) (short) 0, 456825, (-20));
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        mutablePeriod48.setPeriod(658, (-18), 918, (int) (byte) 0, 918, 98, 0, 3);
        mutablePeriod48.setMonths((int) '#');
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(durationFieldTypeArray22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1644572125205L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        java.lang.String str3 = duration2.toString();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        boolean boolean13 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        int int24 = duration10.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getEnd();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.DateTime dateTime65 = interval63.getEnd();
        boolean boolean66 = interval51.contains((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration74.toPeriod(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        org.joda.time.Interval interval79 = interval78.toInterval();
        org.joda.time.DateTime dateTime80 = interval78.getEnd();
        java.lang.String str81 = dateTime80.toString();
        boolean boolean82 = dateTime65.isBefore((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime38);
        mutablePeriod84.addYears(7);
        mutablePeriod84.setDays(8);
        org.joda.time.PeriodType periodType89 = mutablePeriod84.getPeriodType();
        org.joda.time.Period period90 = duration2.toPeriod(periodType89);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT1644572125205S" + "'", str3, "PT1644572125205S");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-11T09:43:06.616Z" + "'", str81, "2022-02-11T09:43:06.616Z");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(period90);
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType24.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter2.withParseType(periodType24);
        java.util.Locale locale30 = periodFormatter29.getLocale();
        org.joda.time.PeriodType periodType31 = periodFormatter29.getParseType();
        java.util.Locale locale32 = null;
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter29.withLocale(locale32);
        org.joda.time.PeriodType periodType34 = periodFormatter29.getParseType();
        org.joda.time.PeriodType periodType35 = periodFormatter29.getParseType();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.setWeeks((int) (short) 100);
        java.lang.String str23 = mutablePeriod18.toString();
        java.lang.String str24 = mutablePeriod18.toString();
        mutablePeriod18.add((long) 'a');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.addSeconds((int) (byte) 100);
        mutablePeriod30.addWeeks((int) '#');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        int int41 = mutablePeriod40.getYears();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod40.copy();
        mutablePeriod42.setYears((int) (short) 10);
        int int45 = mutablePeriod42.size();
        mutablePeriod42.setMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod42.set(durationFieldType48, 340);
        mutablePeriod30.add(durationFieldType48, 32);
        boolean boolean53 = mutablePeriod18.isSupported(durationFieldType48);
        mutablePeriod18.addSeconds(2);
        mutablePeriod18.clear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology59);
        mutablePeriod60.add((long) ' ');
        org.joda.time.PeriodType periodType63 = mutablePeriod60.getPeriodType();
        org.joda.time.PeriodType periodType64 = periodType63.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod18, periodType63);
        java.lang.String str66 = periodType63.getName();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology69);
        mutablePeriod70.add((long) ' ');
        org.joda.time.PeriodType periodType73 = mutablePeriod70.getPeriodType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray74 = mutablePeriod70.getFieldTypes();
        boolean boolean75 = periodType63.equals((java.lang.Object) mutablePeriod70);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P100WT0.087S" + "'", str23, "P100WT0.087S");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P100WT0.087S" + "'", str24, "P100WT0.087S");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Standard" + "'", str66, "Standard");
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(durationFieldTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setDays((int) (byte) 0);
        mutablePeriod5.setSeconds(8);
        mutablePeriod5.setSeconds(14);
        mutablePeriod5.setPeriod(102, 0, (-52), 7, 52, 340, (-52), 8);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours(29376000000L);
        mutablePeriod5.add((org.joda.time.ReadableDuration) duration22);
        mutablePeriod5.addMillis(658);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration22);
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1643312097539L, (long) (short) 10);
        org.joda.time.Duration duration4 = org.joda.time.Duration.millis(1644572414868L);
        org.joda.time.ReadableDuration readableDuration5 = null;
        boolean boolean6 = duration4.isLongerThan(readableDuration5);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfMonth();
        org.joda.time.Chronology chronology29 = chronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 1644572278423L, chronology24);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getEnd();
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = interval44.isBefore(readableInterval47);
        org.joda.time.DateTime dateTime49 = interval44.getStart();
        org.joda.time.Duration duration50 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        boolean boolean69 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration62.toPeriod(periodType70, chronology71);
        org.joda.time.PeriodType periodType73 = periodType70.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1644572224534L, periodType73);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(1644572284083L, periodType73);
        org.joda.time.Period period76 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49, periodType73);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((java.lang.Object) duration2, periodType73);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.add((int) (byte) 0, 8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4');
        mutablePeriod3.clear();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        boolean boolean33 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration20.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration36 = duration22.withMillis((long) (short) 100);
        boolean boolean37 = mutablePeriod3.equals((java.lang.Object) (short) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = mutablePeriod3.getFieldTypes();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.days();
        java.lang.String str40 = periodType39.getName();
        org.joda.time.PeriodType periodType41 = periodType39.withSecondsRemoved();
        int int42 = periodType39.size();
        org.joda.time.PeriodType periodType43 = periodType39.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.eras();
        int int45 = periodType39.indexOf(durationFieldType44);
        java.lang.String str46 = durationFieldType44.toString();
        java.lang.String str47 = durationFieldType44.getName();
        int int48 = mutablePeriod3.indexOf(durationFieldType44);
        int int49 = mutablePeriod3.getWeeks();
        java.lang.String str50 = mutablePeriod3.toString();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Days" + "'", str40, "Days");
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "eras" + "'", str46, "eras");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "eras" + "'", str47, "eras");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0S" + "'", str50, "PT0S");
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType45 = mutablePeriod5.getPeriodType();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.days();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.monthOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.millisOfDay();
        mutablePeriod5.setPeriod(1000L, chronology60);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = duration75.toPeriod(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = duration75.toIntervalTo(readableInstant78);
        org.joda.time.Period period80 = interval79.toPeriod();
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        org.joda.time.DurationField durationField82 = chronology81.days();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.millisOfDay();
        org.joda.time.DateTimeField dateTimeField85 = chronology81.dayOfYear();
        boolean boolean86 = mutablePeriod5.equals((java.lang.Object) dateTimeField85);
        mutablePeriod5.setValue(1, 7);
        org.joda.time.PeriodType periodType90 = mutablePeriod5.getPeriodType();
        org.joda.time.PeriodType periodType91 = periodType90.withHoursRemoved();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType91);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(21001L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration5 = duration3.withMillis(126000000L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration16 = duration7.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean19 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration18);
        java.lang.String str20 = duration18.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod24.add((long) ' ');
        int int27 = mutablePeriod24.getDays();
        mutablePeriod24.setMillis((int) (byte) -1);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        boolean boolean57 = interval42.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.DateTime dateTime71 = interval69.getEnd();
        java.lang.String str72 = dateTime71.toString();
        boolean boolean73 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration74 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology75 = dateTime71.getChronology();
        org.joda.time.Period period76 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime71);
        long long77 = dateTime71.getMillis();
        org.joda.time.Chronology chronology78 = dateTime71.getChronology();
        org.joda.time.Interval interval79 = duration5.toIntervalFrom((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean80 = duration1.isEqual((org.joda.time.ReadableDuration) duration5);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT6000S" + "'", str20, "PT6000S");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-11T09:43:06.849Z" + "'", str72, "2022-02-11T09:43:06.849Z");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(period76);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1644572586849L + "'", long77 == 1644572586849L);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Duration duration13 = duration7.minus(1643312110613L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration37.toPeriod(periodType45, chronology46);
        org.joda.time.PeriodType periodType48 = periodType45.withYearsRemoved();
        org.joda.time.PeriodType periodType49 = periodType45.withWeeksRemoved();
        org.joda.time.PeriodType periodType50 = periodType45.withSecondsRemoved();
        org.joda.time.Period period51 = interval25.toPeriod(periodType45);
        org.joda.time.PeriodType periodType52 = periodType45.withSecondsRemoved();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType54 = null;
        int int55 = periodType52.indexOf(durationFieldType54);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod57.addHours(0);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Period period76 = interval75.toPeriod();
        org.joda.time.Chronology chronology77 = interval75.getChronology();
        mutablePeriod57.setPeriod((org.joda.time.ReadableDuration) duration63, chronology77);
        java.lang.String str79 = chronology77.toString();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField81 = chronology77.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField82 = chronology77.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField83 = chronology77.dayOfYear();
        org.joda.time.Period period84 = duration13.toPeriod(periodType52, chronology77);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(periodType52);
        java.lang.String str86 = periodType52.getName();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str79, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Years" + "'", str86, "Years");
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration18.toPeriod(chronology26);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        int int30 = mutablePeriod3.indexOf(durationFieldType29);
        mutablePeriod3.addHours((int) ' ');
        int int33 = mutablePeriod3.getHours();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DurationFieldType[] durationFieldTypeArray48 = mutablePeriod46.getFieldTypes();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.forFields(durationFieldTypeArray48);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod51.addHours(0);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Period period70 = interval69.toPeriod();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        mutablePeriod51.setPeriod((org.joda.time.ReadableDuration) duration57, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType49, chronology71);
        java.lang.String str75 = chronology71.toString();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(1644572123588L, (long) 4, chronology71);
        org.joda.time.DurationField durationField77 = chronology71.eras();
        mutablePeriod3.setPeriod(1643312018503L, chronology71);
        mutablePeriod3.setMillis(5);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology83);
        int int85 = mutablePeriod84.getYears();
        org.joda.time.DurationFieldType durationFieldType86 = null;
        boolean boolean87 = mutablePeriod84.isSupported(durationFieldType86);
        mutablePeriod84.clear();
        int int89 = mutablePeriod84.size();
        org.joda.time.DurationFieldType durationFieldType91 = mutablePeriod84.getFieldType(0);
        boolean boolean92 = mutablePeriod3.isSupported(durationFieldType91);
        int int93 = mutablePeriod3.getHours();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertNotNull(durationFieldTypeArray48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str75, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 19 + "'", int93 == 19);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod8.addHours(10);
        mutablePeriod8.setWeeks(0);
        mutablePeriod8.setYears((int) (byte) 100);
        mutablePeriod8.clear();
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod8.copy();
        mutablePeriod8.addYears(32);
        org.junit.Assert.assertNotNull(mutablePeriod16);
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.size();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Period period18 = interval16.toPeriod();
        org.joda.time.ReadableInterval readableInterval19 = null;
        boolean boolean20 = interval16.contains(readableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        java.lang.Object obj30 = mutablePeriod28.clone();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) duration32, chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        mutablePeriod28.add((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        mutablePeriod42.setMillis((int) (short) 0);
        mutablePeriod42.addMonths((int) (short) 1);
        int int47 = mutablePeriod42.size();
        int int48 = mutablePeriod42.getWeeks();
        mutablePeriod42.setYears(8);
        mutablePeriod42.addSeconds(1);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        mutablePeriod42.add((org.joda.time.ReadableInterval) interval64);
        boolean boolean68 = interval36.contains((org.joda.time.ReadableInterval) interval64);
        boolean boolean69 = interval16.isBefore((org.joda.time.ReadableInterval) interval64);
        org.joda.time.DateTime dateTime70 = interval16.getEnd();
        org.joda.time.MutableInterval mutableInterval71 = interval16.toMutableInterval();
        mutablePeriod3.add((org.joda.time.ReadableInterval) mutableInterval71);
        org.joda.time.Interval interval73 = mutableInterval71.toInterval();
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) '#', (long) 2, periodType76);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((java.lang.Object) interval73, periodType76);
        org.joda.time.ReadableInterval readableInterval79 = null;
        boolean boolean80 = interval73.isBefore(readableInterval79);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = periodType18.isSupported(durationFieldType30);
        int int33 = periodType18.size();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        int int35 = periodType18.indexOf(durationFieldType34);
        org.joda.time.PeriodType periodType36 = periodType18.withDaysRemoved();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Period period51 = interval50.toPeriod();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.hourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekyearOfCentury();
        org.joda.time.DurationField durationField55 = chronology52.days();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology52.halfdays();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1644572120402L, (long) (byte) 10, chronology52);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(98674326653820000L, periodType18, chronology52);
        org.joda.time.DateTimeField dateTimeField60 = chronology52.millisOfSecond();
        org.joda.time.DurationField durationField61 = chronology52.days();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getEnd();
        org.joda.time.Duration duration26 = interval23.toDuration();
        boolean boolean27 = interval11.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime28 = interval23.getStart();
        org.joda.time.Duration duration30 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        org.joda.time.Duration duration45 = interval42.toDuration();
        org.joda.time.DateTime dateTime46 = interval42.getStart();
        org.joda.time.Period period47 = duration30.toPeriodTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        boolean boolean60 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration57);
        long long61 = duration57.getStandardSeconds();
        int int62 = duration30.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((-124L));
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((java.lang.Object) duration68, chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Duration duration78 = duration76.plus(readableDuration77);
        org.joda.time.Duration duration80 = duration74.withDurationAdded((org.joda.time.ReadableDuration) duration76, (int) (byte) 10);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = duration80.toPeriod(chronology81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Interval interval84 = duration80.toIntervalTo(readableInstant83);
        org.joda.time.Period period85 = interval84.toPeriod();
        boolean boolean86 = interval72.overlaps((org.joda.time.ReadableInterval) interval84);
        org.joda.time.MutableInterval mutableInterval87 = interval84.toMutableInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval87.getEnd();
        long long89 = dateTime88.getMillis();
        long long90 = dateTime88.getMillis();
        int int91 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1260100L + "'", long61 == 1260100L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1644572587000L + "'", long89 == 1644572587000L);
// flaky:         org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1644572587000L + "'", long90 == 1644572587000L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = mutablePeriod7.getFieldTypes();
        mutablePeriod7.setYears((int) 'a');
        mutablePeriod7.setYears((int) (byte) 100);
        int int26 = mutablePeriod7.getMonths();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        java.lang.Object obj37 = mutablePeriod35.clone();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((java.lang.Object) duration39, chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.Chronology chronology46 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.monthOfYear();
        mutablePeriod7.setPeriod(2704L, chronology46);
        org.joda.time.DateTimeField dateTimeField50 = chronology46.yearOfCentury();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.minutes();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        boolean boolean28 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration21.toPeriod(periodType29, chronology30);
        int int32 = duration11.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod34.addHours(0);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Period period53 = interval52.toPeriod();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        mutablePeriod34.setPeriod((org.joda.time.ReadableDuration) duration40, chronology54);
        java.lang.String str56 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.weekOfWeekyear();
        org.joda.time.Period period58 = duration21.toPeriod(chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) (short) 100, periodType3, chronology54);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) (short) 0, chronology54);
        org.joda.time.DateTimeField dateTimeField62 = chronology54.minuteOfDay();
        org.joda.time.DurationField durationField63 = chronology54.centuries();
        long long67 = chronology54.add(60000L, 1644572244197L, 9);
        org.joda.time.DateTimeField dateTimeField68 = chronology54.dayOfWeek();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str56, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 14801150257773L + "'", long67 == 14801150257773L);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0, (-3), 671, (int) (byte) 1);
        mutablePeriod4.setPeriod(1643312445790L);
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        java.lang.String str11 = mutablePeriod4.toString();
        mutablePeriod4.addMonths((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod4.toMutablePeriod();
        mutablePeriod4.setDays(4);
        mutablePeriod4.addHours((-53));
        mutablePeriod4.setHours((-53));
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P10W" + "'", str11, "P10W");
        org.junit.Assert.assertNotNull(mutablePeriod14);
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        mutablePeriod3.clear();
        org.joda.time.PeriodType periodType5 = mutablePeriod3.getPeriodType();
        int int7 = mutablePeriod3.getValue((int) (byte) 0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        int int34 = mutablePeriod3.getMillis();
        mutablePeriod3.addWeeks(671);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType38 = mutablePeriod3.getFieldType(112);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-52) + "'", int34 == (-52));
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        mutablePeriod3.addMinutes(340);
        int int13 = mutablePeriod3.getMonths();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.halfdayOfDay();
        org.joda.time.DurationField durationField39 = durationFieldType14.getField(chronology36);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutablePeriod62.setPeriod(readablePeriod63);
        mutablePeriod62.addWeeks((int) (byte) 10);
        int[] intArray69 = chronology53.get((org.joda.time.ReadablePeriod) mutablePeriod62, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField70 = chronology53.clockhourOfHalfday();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology73);
        mutablePeriod74.setMillis((int) (short) 0);
        mutablePeriod74.addMonths((int) (short) 1);
        mutablePeriod74.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray81 = mutablePeriod74.getFieldTypes();
        mutablePeriod74.addMonths(0);
        org.joda.time.Period period84 = mutablePeriod74.toPeriod();
        int[] intArray86 = chronology53.get((org.joda.time.ReadablePeriod) mutablePeriod74, 126000L);
        org.joda.time.DurationField durationField87 = durationFieldType14.getField(chronology53);
        int int88 = mutablePeriod3.indexOf(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationFieldTypeArray81);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 2, 6, 0]");
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1644572342812L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        java.lang.String str13 = duration10.toString();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean16 = periodType14.equals((java.lang.Object) false);
        org.joda.time.Period period17 = duration10.toPeriod(periodType14);
        org.joda.time.PeriodType periodType18 = periodType14.withMillisRemoved();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.days();
        boolean boolean20 = periodType14.equals((java.lang.Object) periodType19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.DurationField durationField36 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1644572162472L, periodType14, chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(21, 2717, 59, 0, 851, 51, 48, 49, periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT126000S" + "'", str13, "PT126000S");
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology59);
        org.joda.time.DateTimeField dateTimeField78 = chronology59.yearOfEra();
        org.joda.time.Chronology chronology79 = chronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField80 = chronology59.monthOfYear();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        java.lang.Object obj10 = mutablePeriod8.clone();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((java.lang.Object) duration12, chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval16);
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.Chronology chronology19 = interval16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1644572151352L, chronology19);
        org.joda.time.DurationField durationField21 = chronology19.eras();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        org.joda.time.MutablePeriod mutablePeriod72 = mutablePeriod33.toMutablePeriod();
        mutablePeriod33.setMonths(18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(mutablePeriod72);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        boolean boolean27 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration20.toPeriod(periodType28, chronology29);
        int int31 = duration10.compareTo((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod33.addHours(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration39, chronology53);
        java.lang.String str55 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        org.joda.time.Period period57 = duration20.toPeriod(chronology53);
        org.joda.time.DateTimeField dateTimeField58 = chronology53.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology53.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(350L, chronology53);
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = chronology53.era();
        org.joda.time.DateTimeField dateTimeField63 = chronology53.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(40834312119965L, 36000000L, chronology53);
        org.joda.time.DurationField durationField65 = chronology53.hours();
        org.joda.time.DateTimeField dateTimeField66 = chronology53.secondOfMinute();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str55, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572464270L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572464270 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (-53));
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration5 = org.joda.time.Duration.millis((long) '#');
        boolean boolean6 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration5);
        boolean boolean7 = duration1.isEqual((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration9 = duration5.withMillis(1644572207737L);
        org.joda.time.Duration duration11 = new org.joda.time.Duration(1644572150989L);
        org.joda.time.Duration duration14 = duration11.withDurationAdded(1644572151088L, 102);
        org.joda.time.Duration duration15 = duration5.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Period period16 = duration5.toPeriod();
        org.joda.time.Hours hours17 = duration5.toStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(hours17);
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(100000L);
        org.joda.time.Duration duration3 = duration1.plus(1644572122254L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Period period51 = interval50.toPeriod();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.hourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfYear();
        org.joda.time.Chronology chronology56 = chronology52.withUTC();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        org.joda.time.ReadableInterval readableInterval71 = null;
        boolean boolean72 = interval68.isBefore(readableInterval71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval71);
        int int74 = mutablePeriod73.getHours();
        mutablePeriod73.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray86 = chronology56.get((org.joda.time.ReadablePeriod) mutablePeriod73, (long) 1, (long) 3);
        org.joda.time.DateTimeField dateTimeField87 = chronology56.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField88 = chronology56.millisOfDay();
        org.joda.time.Period period89 = duration1.toPeriod(periodType37, chronology56);
        org.joda.time.Chronology chronology90 = chronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.dayOfWeek();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DurationFieldType[] durationFieldTypeArray18 = mutablePeriod16.getFieldTypes();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.forFields(durationFieldTypeArray18);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod21.addHours(0);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Period period40 = interval39.toPeriod();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        mutablePeriod21.setPeriod((org.joda.time.ReadableDuration) duration27, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType19, chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfDay();
        boolean boolean47 = duration3.equals((java.lang.Object) dateTimeField46);
        org.joda.time.Duration duration49 = duration3.plus(1644572125280L);
        long long50 = duration49.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644698125280L + "'", long50 == 1644698125280L);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType24.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter2.withParseType(periodType24);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter29.withParseType(periodType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod35.setMillis((int) (short) 0);
        mutablePeriod35.addMonths((int) (short) 1);
        mutablePeriod35.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutablePeriod46.setPeriod(readablePeriod47);
        mutablePeriod46.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        int int52 = mutablePeriod46.get(durationFieldType51);
        mutablePeriod35.add(durationFieldType51, (int) '#');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.MutablePeriod mutablePeriod65 = mutablePeriod35.copy();
        mutablePeriod65.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod65.addMillis((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod77 = mutablePeriod65.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = periodFormatter29.print((org.joda.time.ReadablePeriod) mutablePeriod77);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(mutablePeriod77);
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        java.lang.Object obj10 = mutablePeriod8.clone();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((java.lang.Object) duration12, chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Interval interval18 = interval16.toInterval();
        org.joda.time.Chronology chronology19 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        java.lang.Object obj30 = mutablePeriod28.clone();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) duration32, chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        mutablePeriod28.add((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.Chronology chronology39 = interval36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.Chronology chronology41 = chronology19.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField43 = chronology19.weekyear();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1172578694485385L, chronology19);
        mutablePeriod44.setWeeks((-19));
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        mutablePeriod18.addHours(7);
        mutablePeriod18.addHours(1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Period period36 = interval35.toPeriod();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.yearOfCentury();
        mutablePeriod18.setPeriod(1644572151352L, chronology37);
        org.joda.time.DurationField durationField43 = chronology37.halfdays();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        mutablePeriod7.setDays(100);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str29 = durationFieldType28.toString();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Period period42 = interval41.toPeriod();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.secondOfMinute();
        org.joda.time.DurationField durationField48 = chronology43.months();
        boolean boolean49 = durationFieldType28.isSupported(chronology43);
        boolean boolean50 = mutablePeriod7.isSupported(durationFieldType28);
        mutablePeriod7.addMillis(0);
        mutablePeriod7.add(1644572336675L);
        mutablePeriod7.addDays((-3));
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyears" + "'", str29, "weekyears");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21);
        mutablePeriod22.addWeeks((int) 'a');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        mutablePeriod29.add((long) ' ');
        mutablePeriod29.setMonths(0);
        mutablePeriod29.setMonths(10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod39.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod39.toMutablePeriod();
        int[] intArray43 = mutablePeriod39.getValues();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        boolean boolean60 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration53.toPeriod(periodType61, chronology62);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutablePeriod68.setPeriod(readablePeriod69);
        mutablePeriod68.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.days();
        int int74 = mutablePeriod68.get(durationFieldType73);
        boolean boolean75 = periodType61.isSupported(durationFieldType73);
        mutablePeriod39.set(durationFieldType73, 8);
        int int78 = mutablePeriod29.get(durationFieldType73);
        boolean boolean79 = mutablePeriod3.isSupported(durationFieldType73);
        org.joda.time.PeriodType periodType80 = mutablePeriod3.getPeriodType();
        int int81 = mutablePeriod3.size();
        mutablePeriod3.addYears(102);
        java.lang.Object obj84 = null;
        boolean boolean85 = mutablePeriod3.equals(obj84);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.Period period33 = mutablePeriod3.toPeriod();
        mutablePeriod3.setPeriod(4, (int) (short) 0, 0, 32, 0, (int) (short) 1, 2, (-1));
        org.joda.time.Period period43 = mutablePeriod3.toPeriod();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        java.lang.String str48 = duration45.toString();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean51 = periodType49.equals((java.lang.Object) false);
        org.joda.time.Period period52 = duration45.toPeriod(periodType49);
        org.joda.time.PeriodType periodType53 = periodType49.withMillisRemoved();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.days();
        boolean boolean55 = periodType49.equals((java.lang.Object) periodType54);
        org.joda.time.PeriodType periodType56 = periodType49.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        boolean boolean58 = periodType49.isSupported(durationFieldType57);
        boolean boolean59 = mutablePeriod3.isSupported(durationFieldType57);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Period period72 = interval71.toPeriod();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.days();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.millisOfDay();
        org.joda.time.DurationField durationField77 = chronology73.minutes();
        org.joda.time.DurationField durationField78 = chronology73.seconds();
        org.joda.time.DateTimeField dateTimeField79 = chronology73.clockhourOfHalfday();
        long long83 = chronology73.add(1644572119084L, (long) 100, 3);
        org.joda.time.DateTimeField dateTimeField84 = chronology73.dayOfYear();
        org.joda.time.DateTimeField dateTimeField85 = chronology73.millisOfSecond();
        java.lang.String str86 = chronology73.toString();
        boolean boolean87 = durationFieldType57.isSupported(chronology73);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT126000S" + "'", str48, "PT126000S");
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1644572119384L + "'", long83 == 1644572119384L);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str86, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        boolean boolean17 = mutablePeriod3.equals((java.lang.Object) (-1.0f));
        mutablePeriod3.addMillis((int) '#');
        mutablePeriod3.setWeeks((int) '#');
        int int22 = mutablePeriod3.getWeeks();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) (short) 10, 0, 8, (-23));
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod27.copy();
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        int int30 = mutablePeriod3.getYears();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.PeriodType periodType2 = periodType0.withSecondsRemoved();
        int int3 = periodType0.size();
        org.joda.time.PeriodType periodType4 = periodType0.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.eras();
        int int6 = periodType0.indexOf(durationFieldType5);
        org.joda.time.PeriodType periodType7 = periodType0.withMillisRemoved();
        org.joda.time.PeriodType periodType8 = periodType0.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType0.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Days" + "'", str1, "Days");
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology54 = dateTime50.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.millis();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.monthOfYear();
        org.joda.time.Chronology chronology58 = chronology54.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.secondOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:43:07.601Z" + "'", str51, "2022-02-11T09:43:07.601Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.Chronology chronology16 = chronology13.withUTC();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        java.lang.String str46 = dateTime45.toString();
        boolean boolean47 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime30.getZone();
        org.joda.time.Period period50 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime30);
        long long51 = dateTime30.getMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        boolean boolean76 = duration63.isShorterThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = duration69.toPeriod(periodType77, chronology78);
        int int80 = duration59.compareTo((org.joda.time.ReadableDuration) duration69);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardSeconds(1644572125205L);
        org.joda.time.Duration duration84 = duration83.toDuration();
        org.joda.time.Duration duration85 = duration83.toDuration();
        org.joda.time.Duration duration86 = duration83.toDuration();
        org.joda.time.Duration duration87 = duration69.plus((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:43:07.639Z" + "'", str46, "2022-02-11T09:43:07.639Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(period50);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1644572587639L + "'", long51 == 1644572587639L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration87);
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod3.addHours(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration9, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        long long31 = chronology23.add(1644572162472L, 1644572191262L, 1);
        org.joda.time.DateTimeField dateTimeField32 = chronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(169390931561965L, 2100002L, chronology23);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3289144353734L + "'", long31 == 3289144353734L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        java.util.Locale locale5 = null;
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter2.withLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod8 = periodFormatter6.parseMutablePeriod("2022-02-11T09:36:02.606Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodFormatter6);
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        int int12 = mutablePeriod11.getYears();
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod11.copy();
        mutablePeriod13.setYears((int) (short) 10);
        mutablePeriod13.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        org.joda.time.Interval interval37 = interval36.toInterval();
        mutablePeriod13.setPeriod((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Period period51 = interval50.toPeriod();
        mutablePeriod13.add((org.joda.time.ReadableInterval) interval50);
        mutablePeriod13.clear();
        org.joda.time.PeriodType periodType54 = mutablePeriod13.getPeriodType();
        org.joda.time.PeriodType periodType55 = periodType54.withMonthsRemoved();
        org.joda.time.PeriodType periodType56 = periodType54.withSecondsRemoved();
        org.joda.time.PeriodType periodType57 = periodType56.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((-28), (-19), 59, 49, (-18), 56, 16, 918, periodType56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-51), (int) (short) 1, 0, (int) (short) 10);
        mutablePeriod4.addMillis(302);
        mutablePeriod4.addHours((-124));
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:39:26.660Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:39:26.660Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.Object obj26 = mutablePeriod24.clone();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval32);
        int int36 = mutablePeriod5.getHours();
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod5.copy();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod37);
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Interval interval17 = interval15.toInterval();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        java.lang.String str19 = periodType18.getName();
        org.joda.time.PeriodType periodType20 = periodType18.withSecondsRemoved();
        org.joda.time.PeriodType periodType21 = periodType18.withMonthsRemoved();
        org.joda.time.Period period22 = interval17.toPeriod(periodType21);
        java.lang.String str23 = interval17.toString();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Days" + "'", str19, "Days");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-11T09:42:07.854Z/2022-02-11T09:43:07.854Z" + "'", str23, "2022-02-11T09:42:07.854Z/2022-02-11T09:43:07.854Z");
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        java.lang.String str12 = duration7.toString();
        org.joda.time.Period period13 = duration7.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        int int22 = duration7.compareTo((org.joda.time.ReadableDuration) duration21);
        long long23 = duration21.getStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(261L, 5184456299723L, chronology26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        java.lang.String str40 = duration35.toString();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((java.lang.Object) duration42, chronology43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        boolean boolean57 = duration46.isLongerThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration58 = duration42.minus((org.joda.time.ReadableDuration) duration46);
        boolean boolean59 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        boolean boolean62 = duration35.isEqual((org.joda.time.ReadableDuration) duration61);
        mutablePeriod27.setPeriod((org.joda.time.ReadableDuration) duration35);
        boolean boolean64 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration65 = duration21.toDuration();
        org.joda.time.Duration duration68 = duration21.withDurationAdded(1644698499417L, 48);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT1260100S" + "'", str12, "PT1260100S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 350L + "'", long23 == 350L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT1260100S" + "'", str40, "PT1260100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration68);
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.days();
        java.lang.String str22 = periodType21.getName();
        org.joda.time.PeriodType periodType23 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((java.lang.Object) readableInstant19, periodType23, chronology24);
        org.joda.time.PeriodType periodType26 = periodType23.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType28 = periodType26.getFieldType((-20));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Days" + "'", str22, "Days");
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType24 = mutablePeriod1.getFieldType(34);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1644572277972L);
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1644572129538L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Seconds seconds14 = duration9.toStandardSeconds();
        long long15 = duration9.getMillis();
        org.joda.time.Duration duration17 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration9, 102);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.DateTime dateTime58 = interval56.getEnd();
        boolean boolean59 = interval44.contains((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getEnd();
        java.lang.String str74 = dateTime73.toString();
        boolean boolean75 = dateTime58.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Interval interval77 = duration9.toIntervalFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, readableDuration78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int81 = dateTime31.get(dateTimeFieldType80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1260100000L + "'", long15 == 1260100000L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-11T09:43:07.962Z" + "'", str74, "2022-02-11T09:43:07.962Z");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(interval77);
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfMonth();
        org.joda.time.Chronology chronology22 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 1644572278423L, chronology17);
        org.joda.time.DurationField durationField26 = chronology17.seconds();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.add((int) (short) 1, 32, 2, (int) (byte) 100, (int) (byte) 1, 3, 4, 10);
        mutablePeriod3.addDays(2);
        java.lang.Object obj21 = mutablePeriod3.clone();
        mutablePeriod3.setMillis((-27409536));
        org.joda.time.DurationFieldType durationFieldType25 = mutablePeriod3.getFieldType(0);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = mutablePeriod3.toDurationFrom(readableInstant26);
        int int28 = mutablePeriod3.getDays();
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "P1Y33M2W102DT1H4M-27405.536S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "P1Y33M2W102DT1H4M-27405.536S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "P1Y33M2W102DT1H4M-27405.536S");
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 102 + "'", int28 == 102);
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        mutablePeriod4.addDays(10);
        mutablePeriod4.setWeeks((int) (byte) -1);
        mutablePeriod4.addWeeks(8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((java.lang.Object) period28, chronology44);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod4, chronology44);
        long long58 = chronology44.getDateTimeMillis((int) (short) 1, 3, (int) (byte) 1, 0, (int) '#', (int) (short) 10, 0);
        org.joda.time.DateTimeField dateTimeField59 = chronology44.halfdayOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        mutablePeriod63.clear();
        org.joda.time.MutablePeriod mutablePeriod70 = mutablePeriod63.copy();
        int[] intArray72 = chronology44.get((org.joda.time.ReadablePeriod) mutablePeriod63, 1644572122254L);
        org.joda.time.DurationField durationField73 = chronology44.months();
        org.joda.time.DurationField durationField74 = chronology44.days();
        org.joda.time.DateTimeField dateTimeField75 = chronology44.secondOfDay();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-62130497090000L) + "'", long58 == (-62130497090000L));
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 2719, 1, 9, 35, 22, 254]");
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addYears(1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        boolean boolean18 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration15);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object) duration21, chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = mutablePeriod23.toDurationFrom(readableInstant24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Hours hours30 = duration29.toStandardHours();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, (org.joda.time.ReadableDuration) duration32, periodType33);
        org.joda.time.Duration duration36 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration32, 10);
        org.joda.time.Duration duration37 = duration25.plus((org.joda.time.ReadableDuration) duration29);
        boolean boolean38 = mutablePeriod3.equals((java.lang.Object) duration37);
        java.lang.String str39 = duration37.toString();
        long long40 = duration37.getStandardHours();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT126060S" + "'", str39, "PT126060S");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 35L + "'", long40 == 35L);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod7.setMillis((int) ' ');
        mutablePeriod7.addMonths(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod30.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod30.copy();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Duration duration43 = mutablePeriod30.toDurationTo(readableInstant42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology46 = null;
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration45, chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        java.lang.Object obj57 = mutablePeriod55.clone();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((java.lang.Object) duration59, chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        mutablePeriod55.add((org.joda.time.ReadableInterval) interval63);
        org.joda.time.DateTime dateTime65 = interval63.getStart();
        org.joda.time.Chronology chronology66 = interval63.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.secondOfDay();
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration45, chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology66.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField73 = chronology66.era();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.hourOfHalfday();
        mutablePeriod4.setPeriod((long) '#', chronology23);
        mutablePeriod4.setYears((-18));
        org.joda.time.PeriodType periodType30 = mutablePeriod4.getPeriodType();
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod36.setMillis((int) (short) 0);
        mutablePeriod36.addMonths((int) (short) 1);
        mutablePeriod36.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutablePeriod47.setPeriod(readablePeriod48);
        mutablePeriod47.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.days();
        int int53 = mutablePeriod47.get(durationFieldType52);
        mutablePeriod36.add(durationFieldType52, (int) '#');
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod36.copy();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.weeks();
        int int68 = mutablePeriod66.get(durationFieldType67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration76.toPeriod(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        org.joda.time.Period period81 = interval80.toPeriod();
        org.joda.time.Chronology chronology82 = interval80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.hourOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.dayOfYear();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.secondOfMinute();
        org.joda.time.DurationField durationField87 = chronology82.weekyears();
        org.joda.time.DurationField durationField88 = chronology82.millis();
        boolean boolean89 = durationFieldType67.isSupported(chronology82);
        org.joda.time.DateTimeField dateTimeField90 = chronology82.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField91 = chronology82.millisOfDay();
        mutablePeriod7.add(1644572258064L, chronology82);
        org.joda.time.DateTimeField dateTimeField93 = chronology82.millisOfDay();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod3.copy();
        int int11 = mutablePeriod3.getHours();
        mutablePeriod3.addHours((int) (short) 1);
        mutablePeriod3.addSeconds(340);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod3.toMutablePeriod();
        int int17 = mutablePeriod16.size();
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.forFields(durationFieldTypeArray10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray10);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray10);
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(periodType14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getEnd();
        boolean boolean41 = interval26.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        java.lang.String str56 = dateTime55.toString();
        boolean boolean57 = dateTime40.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime40);
        int int59 = mutablePeriod58.getMonths();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:43:08.201Z" + "'", str56, "2022-02-11T09:43:08.201Z");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        mutablePeriod1.setPeriod(33, 33, 5, 2784, (-27409536), 70, (int) 'a', 1);
        mutablePeriod1.addWeeks(107);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod18.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withDaysRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType20.withYearsRemoved();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getEnd();
        boolean boolean37 = interval22.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration38 = mutablePeriod9.toDurationTo((org.joda.time.ReadableInstant) dateTime36);
        java.lang.String str39 = dateTime36.toString();
        org.joda.time.Instant instant40 = dateTime36.toInstant();
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.Duration duration42 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T09:43:08.248Z" + "'", str39, "2022-02-11T09:43:08.248Z");
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(duration42);
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        int int4 = periodType3.size();
        org.joda.time.PeriodType periodType5 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        int int7 = periodType6.size();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1644572145972L, periodType6);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1644572184981L, (long) 1, periodType6);
        mutablePeriod9.setMinutes(35);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.setMinutes((int) (short) 0);
        mutablePeriod3.addDays(2);
        mutablePeriod3.addMinutes(21);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod6.setPeriod((int) '4', 100, 10, (int) (byte) 10, 0, (int) (short) 1, (int) '#', 0);
        int int16 = mutablePeriod6.getSeconds();
        mutablePeriod6.setSeconds((int) ' ');
        mutablePeriod6.clear();
        org.joda.time.Period period20 = mutablePeriod6.toPeriod();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1644572328920L);
        org.joda.time.Duration duration3 = duration1.plus(1644572483863L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getEnd();
        org.joda.time.Duration duration26 = interval23.toDuration();
        boolean boolean27 = interval11.overlaps((org.joda.time.ReadableInterval) interval23);
        long long28 = interval23.getStartMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        boolean boolean41 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        org.joda.time.Interval interval56 = duration34.toIntervalFrom((org.joda.time.ReadableInstant) dateTime55);
        java.lang.String str57 = dateTime55.toString();
        boolean boolean58 = interval23.contains((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadableInstant readableInstant59 = null;
        boolean boolean60 = dateTime55.isAfter(readableInstant59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int62 = dateTime55.get(dateTimeFieldType61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1643312488327L + "'", long28 == 1643312488327L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:43:08.327Z" + "'", str57, "2022-02-11T09:43:08.327Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod13.addHours(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration19, chronology33);
        java.lang.String str35 = chronology33.toString();
        mutablePeriod3.add((long) 2, chronology33);
        mutablePeriod3.addSeconds(3);
        mutablePeriod3.addMonths(3);
        mutablePeriod3.setPeriod(0, (-20), 48, 48, 52, (int) (byte) 10, 10, 45);
        int int50 = mutablePeriod3.getMonths();
        int int51 = mutablePeriod3.size();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-20) + "'", int50 == (-20));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod6.setPeriod((int) '4', 100, 10, (int) (byte) 10, 0, (int) (short) 1, (int) '#', 0);
        java.lang.String str16 = mutablePeriod6.toString();
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = mutablePeriod6.getFieldTypes();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        int int22 = mutablePeriod21.getYears();
        java.lang.String str23 = mutablePeriod21.toString();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant34, readableInstant35);
        boolean boolean37 = mutablePeriod28.equals((java.lang.Object) readableInstant34);
        org.joda.time.Period period38 = mutablePeriod28.toPeriod();
        org.joda.time.PeriodType periodType39 = mutablePeriod28.getPeriodType();
        mutablePeriod6.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        mutablePeriod6.setDays(80);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P52Y100M10W10DT1M35S" + "'", str16, "P52Y100M10W10DT1M35S");
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.052S" + "'", str23, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, periodType1, chronology17);
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod18.toMutablePeriod();
        mutablePeriod19.setDays(2784);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod19.setSeconds((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutablePeriod19);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1644572262112L, 1644572518266L);
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) ' ');
        long long2 = duration1.getStandardDays();
        org.joda.time.Duration duration3 = new org.joda.time.Duration((java.lang.Object) long2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = mutablePeriod13.toDurationTo(readableInstant25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology29 = null;
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration28, chronology29);
        boolean boolean31 = duration5.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        boolean boolean61 = interval46.contains((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getEnd();
        java.lang.String str76 = dateTime75.toString();
        boolean boolean77 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Duration duration78 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime60.getZone();
        org.joda.time.Period period80 = duration5.toPeriodTo((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean81 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((java.lang.Object) duration3);
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType84 = periodType83.withYearsRemoved();
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((java.lang.Object) duration86, chronology87);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Interval interval90 = duration86.toIntervalTo(readableInstant89);
        long long91 = interval90.toDurationMillis();
        org.joda.time.Period period92 = interval90.toPeriod();
        boolean boolean93 = periodType84.equals((java.lang.Object) interval90);
        org.joda.time.DateTime dateTime94 = interval90.getEnd();
        org.joda.time.DateTime dateTime95 = interval90.getEnd();
        org.joda.time.Period period96 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime95);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-11T09:43:08.404Z" + "'", str76, "2022-02-11T09:43:08.404Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 60000L + "'", long91 == 60000L);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        int int35 = mutablePeriod33.get(durationFieldType34);
        int int36 = mutablePeriod33.size();
        mutablePeriod33.addSeconds(7);
        mutablePeriod33.setMinutes(1250);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        mutablePeriod20.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod20.toMutablePeriod();
        int[] intArray24 = mutablePeriod20.getValues();
        mutablePeriod20.addHours(0);
        mutablePeriod20.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray29 = mutablePeriod20.getFieldTypes();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.forFields(durationFieldTypeArray29);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1643312162874L, periodType30);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(5438, 102, (-52), (-9), (-9), 45, (int) (short) 1, 0, periodType30);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0, 431, 5, 54, 1250, 35, (-27409536), (-35), periodType30);
        org.joda.time.PeriodType periodType34 = periodType30.withWeeksRemoved();
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(100, (int) (short) 1, (int) '4', (int) (short) 10);
        mutablePeriod4.addYears(0);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Interval interval19 = interval18.toInterval();
        long long20 = interval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        java.lang.String str35 = dateTime34.toString();
        boolean boolean36 = interval19.isAfter((org.joda.time.ReadableInstant) dateTime34);
        long long37 = dateTime34.getMillis();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        boolean boolean71 = interval56.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration72 = mutablePeriod43.toDurationTo((org.joda.time.ReadableInstant) dateTime70);
        java.lang.String str73 = dateTime70.toString();
        org.joda.time.Instant instant74 = dateTime70.toInstant();
        org.joda.time.DateTimeZone dateTimeZone75 = instant74.getZone();
        org.joda.time.Period period76 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) instant74);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) instant74);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1260100000L + "'", long20 == 1260100000L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-11T09:43:08.486Z" + "'", str35, "2022-02-11T09:43:08.486Z");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644572588486L + "'", long37 == 1644572588486L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:43:08.486Z" + "'", str73, "2022-02-11T09:43:08.486Z");
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1644572125205L, 1644572174829L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration13 = duration4.plus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        boolean boolean43 = interval28.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        java.lang.String str58 = dateTime57.toString();
        boolean boolean59 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateTime42);
        long long61 = dateTime42.getMillis();
        org.joda.time.Interval interval62 = duration4.toIntervalFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType65 = periodType64.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1644572119917L, periodType64);
        org.joda.time.PeriodType periodType67 = periodType64.withMinutesRemoved();
        org.joda.time.Period period68 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42, periodType64);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-11T09:43:08.524Z" + "'", str58, "2022-02-11T09:43:08.524Z");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1644572588524L + "'", long61 == 1644572588524L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        java.lang.String str14 = duration12.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        java.lang.Object obj24 = mutablePeriod22.clone();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) duration26, chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        mutablePeriod22.add((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.Chronology chronology33 = interval30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((java.lang.Object) duration12, chronology33);
        org.joda.time.DurationField durationField36 = chronology33.weeks();
        org.joda.time.DurationField durationField37 = chronology33.years();
        org.joda.time.DurationField durationField38 = chronology33.centuries();
        org.joda.time.DurationField durationField39 = chronology33.weeks();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT6000S" + "'", str14, "PT6000S");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.millisOfDay();
        java.lang.String str23 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(0);
        mutablePeriod28.setMonths(10);
        java.lang.String str35 = mutablePeriod28.toString();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod38.addHours(0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        mutablePeriod38.setPeriod((org.joda.time.ReadableDuration) duration44, chronology58);
        java.lang.String str60 = chronology58.toString();
        mutablePeriod28.add((long) 2, chronology58);
        mutablePeriod28.setPeriod(100L, (long) 2);
        org.joda.time.MutablePeriod mutablePeriod65 = mutablePeriod28.toMutablePeriod();
        long long68 = chronology18.add((org.joda.time.ReadablePeriod) mutablePeriod65, 1644572125205L, 20);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str23, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "P10MT0.020S" + "'", str35, "P10MT0.020S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str60, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1644572123245L + "'", long68 == 1644572123245L);
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        boolean boolean5 = periodFormatter3.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter3.getPrinter();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter3.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        boolean boolean12 = periodFormatter8.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = org.joda.time.MutablePeriod.parse("2022-02-11T09:41:54.436Z", periodFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod13.addHours(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration19, chronology33);
        java.lang.String str35 = chronology33.toString();
        mutablePeriod3.add((long) 2, chronology33);
        mutablePeriod3.setPeriod(100L, (long) 2);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.clear();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(mutablePeriod40);
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        boolean boolean35 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration28.toPeriod(periodType36, chronology37);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutablePeriod43.setPeriod(readablePeriod44);
        mutablePeriod43.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.days();
        int int49 = mutablePeriod43.get(durationFieldType48);
        boolean boolean50 = periodType36.isSupported(durationFieldType48);
        mutablePeriod7.set(durationFieldType48, (int) '4');
        int int53 = mutablePeriod7.getDays();
        mutablePeriod7.addHours(5);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.add((long) ' ');
        mutablePeriod14.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod14.isSupported(durationFieldType28);
        boolean boolean31 = mutablePeriod3.isSupported(durationFieldType28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = mutablePeriod3.toDurationTo(readableInstant32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.millis();
        int int35 = mutablePeriod3.get(durationFieldType34);
        mutablePeriod3.setMillis(34);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-19) + "'", int35 == (-19));
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Days days10 = duration9.toStandardDays();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (short) -1, periodType12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.Period period28 = duration9.toPeriod(periodType12, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(98674326527820L, 0L, chronology27);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter2.withParseType(periodType7);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        int int14 = mutablePeriod13.getMinutes();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        mutablePeriod18.setMillis((int) (short) 0);
        mutablePeriod18.addMonths((int) (short) 1);
        mutablePeriod18.setMinutes((int) (byte) 1);
        mutablePeriod18.addYears(1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        boolean boolean33 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int38 = duration28.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        org.joda.time.Period period53 = duration37.toPeriodTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = mutablePeriod13.toDurationTo((org.joda.time.ReadableInstant) dateTime52);
        java.lang.String str55 = dateTime52.toString();
        long long56 = dateTime52.getMillis();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) 10);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        boolean boolean75 = duration62.isShorterThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration68.toPeriod(periodType76, chronology77);
        org.joda.time.PeriodType periodType79 = periodType76.withYearsRemoved();
        org.joda.time.PeriodType periodType80 = periodType76.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType81 = null;
        int int82 = periodType80.indexOf(durationFieldType81);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableDuration) duration58, periodType80);
        int int84 = mutablePeriod83.getSeconds();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod83);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:43:08.708Z" + "'", str55, "2022-02-11T09:43:08.708Z");
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1644572588708L + "'", long56 == 1644572588708L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType14, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.halfdayOfDay();
        org.joda.time.DurationField durationField41 = chronology36.months();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) (-51), 1644572120402L, chronology36);
        java.lang.String str44 = mutablePeriod43.toString();
        int int45 = mutablePeriod43.getMonths();
        int int46 = mutablePeriod43.size();
        java.lang.String str47 = mutablePeriod43.toString();
        int int48 = mutablePeriod43.size();
        mutablePeriod43.setYears((int) (short) 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "P52Y1M1W3DT9H35M20.453S" + "'", str44, "P52Y1M1W3DT9H35M20.453S");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "P52Y1M1W3DT9H35M20.453S" + "'", str47, "P52Y1M1W3DT9H35M20.453S");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod19.toMutablePeriod();
        mutablePeriod19.addYears((int) (short) -1);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Duration duration39 = duration33.minus(1643312110613L);
        boolean boolean40 = mutablePeriod3.equals((java.lang.Object) duration39);
        mutablePeriod3.add(117, (int) (short) 0, (-3), (int) (short) 10, 34, 671, 2719, 21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-01-27T19:34:07.205Z/2022-02-11T09:35:47.205Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-27T19:34:07.205Z/2022-02...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.PeriodType periodType23 = periodType20.withYearsRemoved();
        org.joda.time.PeriodType periodType24 = periodType20.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean26 = periodType20.isSupported(durationFieldType25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = mutablePeriod36.getFieldTypes();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod41.addHours(0);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        mutablePeriod41.setPeriod((org.joda.time.ReadableDuration) duration47, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType39, chronology61);
        org.joda.time.DateTimeField dateTimeField65 = chronology61.halfdayOfDay();
        org.joda.time.DurationField durationField66 = chronology61.weekyears();
        org.joda.time.DurationField durationField67 = chronology61.weeks();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(600L, periodType20, chronology61);
        org.joda.time.PeriodType periodType69 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1644572475508L, 0L, periodType70);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        java.lang.String str35 = chronology29.toString();
        org.joda.time.DurationField durationField36 = chronology29.seconds();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        mutablePeriod40.add((long) ' ');
        int int43 = mutablePeriod40.getDays();
        mutablePeriod40.setMillis((int) (byte) -1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        boolean boolean73 = interval58.contains((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        java.lang.String str88 = dateTime87.toString();
        boolean boolean89 = dateTime72.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Duration duration90 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Chronology chronology91 = dateTime87.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        boolean boolean93 = dateTime87.isSupported(dateTimeFieldType92);
        org.joda.time.DateTimeZone dateTimeZone94 = dateTime87.getZone();
        org.joda.time.Chronology chronology95 = chronology29.withZone(dateTimeZone94);
        org.joda.time.DurationField durationField96 = chronology95.years();
        org.joda.time.DateTimeField dateTimeField97 = chronology95.weekyear();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-11T09:43:08.842Z" + "'", str88, "2022-02-11T09:43:08.842Z");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter40.getLocale();
        java.util.Locale locale42 = periodFormatter40.getLocale();
        boolean boolean43 = periodFormatter40.isPrinter();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(38, (int) '#', 87, (int) 'a');
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        boolean boolean21 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration14.toPeriod(periodType22, chronology23);
        org.joda.time.PeriodType periodType25 = periodType22.withYearsRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.eras();
        int int28 = periodType25.indexOf(durationFieldType27);
        java.lang.String str29 = durationFieldType27.toString();
        int int30 = mutablePeriod4.get(durationFieldType27);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "eras" + "'", str29, "eras");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withHoursRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withMonthsRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.PeriodType periodType5 = periodType2.withMonthsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.Duration duration14 = interval11.toDuration();
        java.lang.String str15 = interval11.toString();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        boolean boolean34 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration27.toPeriod(periodType35, chronology36);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutablePeriod42.setPeriod(readablePeriod43);
        mutablePeriod42.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.days();
        int int48 = mutablePeriod42.get(durationFieldType47);
        boolean boolean49 = periodType35.isSupported(durationFieldType47);
        java.lang.String str50 = periodType35.getName();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType35, chronology51);
        boolean boolean53 = interval11.equals((java.lang.Object) 100);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        boolean boolean66 = interval11.isBefore((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Chronology chronology67 = interval65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.yearOfCentury();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-01-27T19:41:28.922Z/2022-02-11T09:43:08.922Z" + "'", str15, "2022-01-27T19:41:28.922Z/2022-02-11T09:43:08.922Z");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Years" + "'", str50, "Years");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((-53L));
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = mutablePeriod5.toDurationFrom(readableInstant6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Hours hours12 = duration11.toStandardHours();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant13, (org.joda.time.ReadableDuration) duration14, periodType15);
        org.joda.time.Duration duration18 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration14, 10);
        org.joda.time.Duration duration19 = duration7.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration23 = duration21.withMillis(126000000L);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod25.addHours(0);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration31, chronology45);
        org.joda.time.Duration duration49 = duration31.withDurationAdded((long) 3, (int) '4');
        boolean boolean50 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        mutablePeriod54.setMillis((int) (short) 0);
        mutablePeriod54.addMonths((int) (short) 1);
        mutablePeriod54.setMinutes((int) (byte) 1);
        mutablePeriod54.setYears((int) (short) 100);
        mutablePeriod54.addDays(1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology71);
        mutablePeriod68.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        java.lang.Object obj74 = mutablePeriod72.clone();
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((java.lang.Object) duration76, chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        mutablePeriod72.add((org.joda.time.ReadableInterval) interval80);
        org.joda.time.DateTime dateTime82 = interval80.getStart();
        org.joda.time.Duration duration83 = mutablePeriod54.toDurationFrom((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration85 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) -1);
        org.joda.time.Duration duration86 = duration7.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration87 = duration7.toDuration();
        boolean boolean88 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration87);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval12.getStart();
        long long29 = interval12.getEndMillis();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        java.lang.Object obj39 = mutablePeriod37.clone();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((java.lang.Object) duration41, chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        mutablePeriod37.add((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Interval interval47 = interval45.toInterval();
        org.joda.time.MutableInterval mutableInterval48 = interval45.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = mutableInterval48.overlaps(readableInterval49);
        boolean boolean51 = interval12.contains(readableInterval49);
        org.joda.time.DateTime dateTime52 = interval12.getStart();
        java.lang.Object obj53 = null;
        boolean boolean54 = interval12.equals(obj53);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644572589008L + "'", long29 == 1644572589008L);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        int int11 = mutablePeriod10.getYears();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod10.copy();
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        int int14 = mutablePeriod10.size();
        mutablePeriod10.setMinutes(10);
        mutablePeriod10.add(3, 712, (-23), 45, 80, 658, 0, 38);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        java.lang.String str30 = duration27.toString();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean33 = periodType31.equals((java.lang.Object) false);
        org.joda.time.Period period34 = duration27.toPeriod(periodType31);
        org.joda.time.PeriodType periodType35 = periodType31.withMillisRemoved();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.days();
        boolean boolean37 = periodType31.equals((java.lang.Object) periodType36);
        java.lang.String str38 = periodType31.toString();
        org.joda.time.PeriodType periodType39 = periodType31.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod41.addHours(0);
        mutablePeriod41.addYears(2);
        org.joda.time.PeriodType periodType46 = mutablePeriod41.getPeriodType();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean50 = periodType48.equals((java.lang.Object) false);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Period period63 = interval62.toPeriod();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, periodType48, chronology64);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod65.toMutablePeriod();
        mutablePeriod41.add((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutablePeriod72.setPeriod(readablePeriod73);
        mutablePeriod72.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.days();
        int int78 = mutablePeriod72.get(durationFieldType77);
        boolean boolean79 = mutablePeriod41.isSupported(durationFieldType77);
        boolean boolean80 = periodType39.isSupported(durationFieldType77);
        int int81 = mutablePeriod10.get(durationFieldType77);
        int int82 = mutablePeriod10.getMonths();
        mutablePeriod10.addHours(34);
        mutablePeriod10.addMinutes(1250);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT126000S" + "'", str30, "PT126000S");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PeriodType[YearWeekDay]" + "'", str38, "PeriodType[YearWeekDay]");
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 45 + "'", int81 == 45);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 712 + "'", int82 == 712);
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withDaysRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        java.lang.String str24 = periodType23.toString();
        org.joda.time.PeriodType periodType25 = periodType23.withWeeksRemoved();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.dayOfYear();
        org.joda.time.Chronology chronology43 = chronology39.withUTC();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1644572269273L, periodType25, chronology39);
        org.joda.time.DateTimeField dateTimeField45 = chronology39.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.clockhourOfHalfday();
        java.lang.Class<?> wildcardClass47 = chronology39.getClass();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PeriodType[YearsNoYears]" + "'", str24, "PeriodType[YearsNoYears]");
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod24.addHours(0);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        boolean boolean28 = mutablePeriod24.isSupported(durationFieldType27);
        mutablePeriod1.set(durationFieldType27, (-1));
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod1.toMutablePeriod();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        boolean boolean48 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration41.toPeriod(periodType49, chronology50);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutablePeriod56.setPeriod(readablePeriod57);
        mutablePeriod56.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.days();
        int int62 = mutablePeriod56.get(durationFieldType61);
        boolean boolean63 = periodType49.isSupported(durationFieldType61);
        int int64 = periodType49.size();
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.weeks();
        int int66 = periodType49.indexOf(durationFieldType65);
        mutablePeriod31.set(durationFieldType65, 51);
        mutablePeriod31.setPeriod(1644572232634L);
        int int71 = mutablePeriod31.size();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType12 = mutablePeriod3.getPeriodType();
        int int13 = mutablePeriod3.getMinutes();
        mutablePeriod3.addMinutes((int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = mutablePeriod19.get(durationFieldType22);
        int int24 = mutablePeriod19.size();
        mutablePeriod19.addWeeks((int) (short) 0);
        mutablePeriod19.add(0L);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod19.indexOf(durationFieldType29);
        mutablePeriod19.addHours((int) (short) 1);
        mutablePeriod19.setPeriod(1644572117941L, 1260100L);
        int int36 = mutablePeriod19.getDays();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((java.lang.Object) duration38, chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        boolean boolean56 = interval42.overlaps((org.joda.time.ReadableInterval) interval54);
        java.lang.String str57 = interval54.toString();
        org.joda.time.MutableInterval mutableInterval58 = interval54.toMutableInterval();
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.DateTime dateTime60 = mutableInterval58.getEnd();
        mutablePeriod3.add((org.joda.time.ReadableInterval) mutableInterval58);
        mutablePeriod3.setSeconds((-53));
        org.joda.time.Period period64 = mutablePeriod3.toPeriod();
        mutablePeriod3.addWeeks((-3));
        mutablePeriod3.setYears(18);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-01-27T19:41:29.105Z/2022-02-11T09:43:09.105Z" + "'", str57, "2022-01-27T19:41:29.105Z/2022-02-11T09:43:09.105Z");
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(period64);
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 8);
        org.joda.time.Duration duration4 = duration1.minus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration4.plus(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration17 = duration8.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean20 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod22.addHours(0);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration28, chronology42);
        long long44 = duration28.getStandardSeconds();
        boolean boolean45 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration47 = duration28.minus(1644572120450L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Hours hours52 = duration51.toStandardHours();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        boolean boolean57 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod65.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod76 = mutablePeriod65.copy();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Duration duration78 = mutablePeriod65.toDurationTo(readableInstant77);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology81 = null;
        mutablePeriod65.setPeriod((org.joda.time.ReadableDuration) duration80, chronology81);
        boolean boolean83 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration80);
        boolean boolean84 = duration28.equals((java.lang.Object) boolean83);
        boolean boolean85 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration28);
        java.lang.String str86 = duration28.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 126000L + "'", long44 == 126000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT126000S" + "'", str86, "PT126000S");
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology59);
        org.joda.time.DateTimeField dateTimeField78 = chronology59.halfdayOfDay();
        org.joda.time.DurationField durationField79 = chronology59.seconds();
        org.joda.time.DurationField durationField80 = chronology59.days();
        org.joda.time.DateTimeField dateTimeField81 = chronology59.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField82 = chronology59.yearOfCentury();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology17);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology17);
        mutablePeriod24.setMillis((int) (byte) -1);
        mutablePeriod24.setDays(4);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod24.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod24.toMutablePeriod();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        int int14 = mutablePeriod13.size();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        boolean boolean16 = mutablePeriod13.isSupported(durationFieldType15);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        boolean boolean24 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Seconds seconds25 = duration19.toStandardSeconds();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) '#');
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getEnd();
        boolean boolean70 = interval55.contains((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = interval55.getStart();
        java.lang.String str72 = dateTime71.toString();
        boolean boolean73 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Interval interval74 = duration27.toIntervalFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period76 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41, periodType75);
        org.joda.time.Duration duration77 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        mutablePeriod3.setMinutes((-124));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:43:09.297Z" + "'", str42, "2022-02-11T09:43:09.297Z");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-01-27T19:41:29.297Z" + "'", str72, "2022-01-27T19:41:29.297Z");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(duration77);
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = mutablePeriod63.getFieldTypes();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.forFields(durationFieldTypeArray65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod68.addHours(0);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = duration76.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Period period84 = duration82.toPeriod(chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        org.joda.time.Period period87 = interval86.toPeriod();
        org.joda.time.Chronology chronology88 = interval86.getChronology();
        mutablePeriod68.setPeriod((org.joda.time.ReadableDuration) duration74, chronology88);
        org.joda.time.DateTimeField dateTimeField90 = chronology88.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType66, chronology88);
        org.joda.time.DateTimeField dateTimeField92 = chronology88.halfdayOfDay();
        org.joda.time.DurationField durationField93 = chronology88.months();
        org.joda.time.DateTimeField dateTimeField94 = chronology88.clockhourOfHalfday();
        org.joda.time.Period period95 = duration53.toPeriod(chronology88);
        org.joda.time.PeriodType periodType96 = period95.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod(periodType96);
        mutablePeriod97.setMinutes((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:43:09.321Z" + "'", str51, "2022-02-11T09:43:09.321Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(periodType96);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 2, (long) ' ');
        org.joda.time.Duration duration4 = duration2.withMillis(21001L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.Object obj14 = mutablePeriod12.clone();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((java.lang.Object) duration16, chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        mutablePeriod12.add((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime22, periodType24);
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        boolean boolean42 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.withMillis(126000000L);
        org.joda.time.Duration duration5 = duration1.minus(1644572125280L);
        java.lang.String str6 = duration5.toString();
        org.joda.time.Duration duration9 = new org.joda.time.Duration((long) 2, (long) ' ');
        int int10 = duration5.compareTo((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(1644572125205L);
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration17 = duration15.withMillis(126000000L);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod19.addHours(0);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration25, chronology39);
        org.joda.time.Duration duration43 = duration25.withDurationAdded((long) 3, (int) '4');
        boolean boolean44 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period45 = duration15.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod55.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod55.copy();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Duration duration68 = mutablePeriod55.toDurationTo(readableInstant67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology71 = null;
        mutablePeriod55.setPeriod((org.joda.time.ReadableDuration) duration70, chronology71);
        boolean boolean73 = duration47.isEqual((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration74 = duration15.minus((org.joda.time.ReadableDuration) duration70);
        boolean boolean75 = duration12.isEqual((org.joda.time.ReadableDuration) duration15);
        boolean boolean76 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT-1644212125.280S" + "'", str6, "PT-1644212125.280S");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = mutablePeriod7.getFieldTypes();
        mutablePeriod7.addHours((int) (short) 0);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod22.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod22.copy();
        org.joda.time.PeriodType periodType34 = mutablePeriod22.getPeriodType();
        org.joda.time.PeriodType periodType35 = periodType34.withWeeksRemoved();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod39.add((long) ' ');
        mutablePeriod39.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutablePeriod48.setPeriod(readablePeriod49);
        mutablePeriod48.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.days();
        int int54 = mutablePeriod48.get(durationFieldType53);
        boolean boolean55 = mutablePeriod39.isSupported(durationFieldType53);
        int int56 = periodType35.indexOf(durationFieldType53);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Period period69 = interval68.toPeriod();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((java.lang.Object) duration14, periodType35, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.hourOfDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology79);
        mutablePeriod76.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.DurationFieldType[] durationFieldTypeArray82 = mutablePeriod80.getFieldTypes();
        int[] intArray85 = chronology70.get((org.joda.time.ReadablePeriod) mutablePeriod80, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField86 = chronology70.minuteOfDay();
        org.joda.time.DurationField durationField87 = chronology70.months();
        mutablePeriod7.add(1644572168146L, chronology70);
        org.joda.time.DateTimeField dateTimeField89 = chronology70.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField90 = chronology70.secondOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology70.year();
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationFieldTypeArray82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 100);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration5 = duration3.withMillis(126000000L);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod7.addHours(0);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration13, chronology27);
        org.joda.time.Duration duration31 = duration13.withDurationAdded((long) 3, (int) '4');
        boolean boolean32 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period33 = duration3.toPeriod();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod43.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod54 = mutablePeriod43.copy();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Duration duration56 = mutablePeriod43.toDurationTo(readableInstant55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology59 = null;
        mutablePeriod43.setPeriod((org.joda.time.ReadableDuration) duration58, chronology59);
        boolean boolean61 = duration35.isEqual((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration62 = duration3.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration64 = duration58.minus((-52L));
        int int65 = duration1.compareTo((org.joda.time.ReadableDuration) duration64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        boolean boolean67 = duration64.isLongerThan(readableDuration66);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.toMutablePeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Hours hours17 = duration16.toStandardHours();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant18, (org.joda.time.ReadableDuration) duration19, periodType20);
        org.joda.time.Duration duration23 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration19, 10);
        org.joda.time.Duration duration24 = duration19.toDuration();
        mutablePeriod11.add((org.joda.time.ReadableDuration) duration24);
        int int26 = mutablePeriod11.getHours();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.setMillis(56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) period12, chronology28);
        org.joda.time.DurationField durationField34 = chronology28.days();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 8, (long) '4');
        int[] intArray40 = chronology28.get((org.joda.time.ReadablePeriod) mutablePeriod37, 1644572118532L, (long) 2);
        org.joda.time.DateTimeField dateTimeField41 = chronology28.weekyear();
        org.joda.time.DurationField durationField42 = chronology28.millis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-52, -1, -1, -3, -9, -35, -18, -530]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod7 = mutablePeriod4.toMutablePeriod();
        mutablePeriod4.addDays((int) (byte) 1);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        boolean boolean26 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration19.toPeriod(chronology27);
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        mutablePeriod37.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod48 = mutablePeriod37.copy();
        org.joda.time.PeriodType periodType49 = mutablePeriod37.getPeriodType();
        org.joda.time.PeriodType periodType50 = periodType49.withWeeksRemoved();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        mutablePeriod54.add((long) ' ');
        mutablePeriod54.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutablePeriod63.setPeriod(readablePeriod64);
        mutablePeriod63.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.days();
        int int69 = mutablePeriod63.get(durationFieldType68);
        boolean boolean70 = mutablePeriod54.isSupported(durationFieldType68);
        int int71 = periodType50.indexOf(durationFieldType68);
        boolean boolean72 = mutablePeriod4.isSupported(durationFieldType68);
        org.joda.time.PeriodType periodType73 = mutablePeriod4.getPeriodType();
        org.joda.time.PeriodType periodType74 = periodType73.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(0L, periodType73);
        org.joda.time.MutablePeriod mutablePeriod76 = mutablePeriod75.toMutablePeriod();
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(mutablePeriod76);
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) '4', 340, 6, 3, (-35), (int) (short) -1, (int) (byte) -1, (-1));
        mutablePeriod8.addDays((-9));
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.setYears((-1));
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod33.addHours(0);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.days();
        boolean boolean37 = mutablePeriod33.isSupported(durationFieldType36);
        mutablePeriod33.addMonths(0);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.days();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.millisOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology58);
        org.joda.time.DurationField durationField64 = chronology58.centuries();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology58);
        org.joda.time.DateTimeField dateTimeField66 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField67 = chronology58.dayOfMonth();
        java.lang.String str68 = chronology58.toString();
        mutablePeriod33.add((long) (-1), chronology58);
        mutablePeriod5.setPeriod(1643312029818L, 1644572138663L, chronology58);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        mutablePeriod75.setPeriod(readablePeriod76);
        org.joda.time.MutablePeriod mutablePeriod78 = mutablePeriod75.toMutablePeriod();
        mutablePeriod78.addHours((int) '4');
        long long83 = chronology58.add((org.joda.time.ReadablePeriod) mutablePeriod78, 1644572294255L, (int) ' ');
        mutablePeriod78.addHours((-1));
        org.joda.time.DurationFieldType durationFieldType86 = null;
        int int87 = mutablePeriod78.indexOf(durationFieldType86);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str68, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1650562694255L + "'", long83 == 1650562694255L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod4.clear();
        mutablePeriod4.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = mutablePeriod4.isSupported(durationFieldType14);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyearOfCentury();
        mutablePeriod4.add((long) (short) 100, chronology30);
        org.joda.time.DurationField durationField34 = chronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.hourOfHalfday();
        org.joda.time.DurationField durationField36 = chronology30.days();
        long long40 = chronology30.add((long) (byte) 0, (long) '4', (int) '4');
        org.joda.time.DurationField durationField41 = chronology30.days();
        org.joda.time.DurationField durationField42 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField43 = chronology30.year();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.dayOfYear();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        mutablePeriod66.setPeriod(readablePeriod67);
        mutablePeriod66.addWeeks((int) (byte) 10);
        int[] intArray73 = chronology57.get((org.joda.time.ReadablePeriod) mutablePeriod66, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField74 = chronology57.clockhourOfHalfday();
        java.lang.String str75 = chronology57.toString();
        org.joda.time.DateTimeZone dateTimeZone76 = chronology57.getZone();
        org.joda.time.Chronology chronology77 = chronology30.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology30.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1644572185574L, chronology30);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2704L + "'", long40 == 2704L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str75, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology16);
        org.joda.time.DurationField durationField22 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.millisOfSecond();
        org.joda.time.DurationField durationField24 = chronology16.days();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1644572123305L, chronology16);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology16.hourOfDay();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setDays((int) (byte) 0);
        mutablePeriod5.setSeconds(8);
        mutablePeriod5.setSeconds(14);
        mutablePeriod5.setPeriod(102, 0, (-52), 7, 52, 340, (-52), 8);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getEnd();
        boolean boolean48 = interval33.contains((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Period period61 = interval60.toPeriod();
        boolean boolean62 = interval33.isBefore((org.joda.time.ReadableInterval) interval60);
        long long63 = interval33.getEndMillis();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval33);
        java.lang.Object obj65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(obj65);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod66);
        mutablePeriod66.addSeconds(117);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1644572589639L + "'", long63 == 1644572589639L);
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        java.lang.String str14 = duration12.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        java.lang.Object obj24 = mutablePeriod22.clone();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) duration26, chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        mutablePeriod22.add((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.Chronology chronology33 = interval30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((java.lang.Object) duration12, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = chronology33.minutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT6000S" + "'", str14, "PT6000S");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration32 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime30);
        int int33 = mutablePeriod3.getDays();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod37.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod37.toMutablePeriod();
        mutablePeriod40.setSeconds((int) (short) 10);
        mutablePeriod40.addDays(100);
        mutablePeriod40.addHours((int) '4');
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutablePeriod51.setPeriod(readablePeriod52);
        mutablePeriod51.addWeeks((int) (byte) 10);
        int int56 = mutablePeriod51.getMonths();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology59);
        mutablePeriod60.add((long) ' ');
        int int63 = mutablePeriod60.getDays();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.millis();
        mutablePeriod60.add(durationFieldType64, (int) (byte) 1);
        boolean boolean67 = mutablePeriod51.equals((java.lang.Object) durationFieldType64);
        mutablePeriod40.set(durationFieldType64, 340);
        mutablePeriod3.set(durationFieldType64, 0);
        mutablePeriod3.setHours(36);
        mutablePeriod3.setSeconds(117);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        mutablePeriod7.setMillis((int) ' ');
        mutablePeriod7.addDays(0);
        mutablePeriod7.add(7, (-51), (-19), 340, 340, (int) '#', 51, (int) (byte) 0);
        mutablePeriod7.addWeeks(7);
        org.junit.Assert.assertNotNull(mutablePeriod18);
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-53), (int) (byte) 1, (int) '#', 5, (int) ' ', 52, 671, 8);
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        java.util.Locale locale12 = periodFormatter11.getLocale();
        java.util.Locale locale13 = periodFormatter11.getLocale();
        org.joda.time.format.PeriodParser periodParser14 = periodFormatter11.getParser();
        org.joda.time.PeriodType periodType15 = periodFormatter11.getParseType();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        java.lang.String str20 = duration17.toString();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean23 = periodType21.equals((java.lang.Object) false);
        org.joda.time.Period period24 = duration17.toPeriod(periodType21);
        org.joda.time.PeriodType periodType25 = periodType21.withMillisRemoved();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.days();
        boolean boolean27 = periodType21.equals((java.lang.Object) periodType26);
        org.joda.time.PeriodType periodType28 = periodType21.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        boolean boolean30 = periodType21.isSupported(durationFieldType29);
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter11.withParseType(periodType21);
        java.util.Locale locale32 = periodFormatter11.getLocale();
        boolean boolean33 = periodFormatter11.isParser();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.dayTime();
        java.lang.String str36 = periodType35.getName();
        int int37 = periodType35.size();
        org.joda.time.PeriodType periodType38 = periodType35.withDaysRemoved();
        org.joda.time.PeriodType periodType39 = periodType35.withMonthsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1644572311116L, periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter11.withParseType(periodType42);
        java.util.Locale locale44 = null;
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter43.withLocale(locale44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = mutablePeriod8.toString(periodFormatter45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNull(periodParser14);
        org.junit.Assert.assertNull(periodType15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT126000S" + "'", str20, "PT126000S");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DayTime" + "'", str36, "DayTime");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNotNull(periodFormatter45);
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.centuryOfEra();
        org.joda.time.DurationField durationField19 = chronology13.minutes();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        mutablePeriod27.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod27.copy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        mutablePeriod46.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology63);
        mutablePeriod60.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        mutablePeriod60.clear();
        mutablePeriod60.setValue((int) (byte) 0, (-1));
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod60, chronology71);
        mutablePeriod72.setSeconds((int) '4');
        mutablePeriod72.add((int) '#', (int) ' ', 1, (int) (short) 100, (int) (short) 100, 0, (int) (byte) 100, (int) (byte) -1);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        long long87 = chronology13.add((org.joda.time.ReadablePeriod) mutablePeriod72, 126000000L, (int) '#');
        mutablePeriod72.setWeeks((-3));
        mutablePeriod72.setMinutes((int) (byte) 100);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 40834312119965L + "'", long87 == 40834312119965L);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        boolean boolean23 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration16.toPeriod(periodType24, chronology25);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType24.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter2.withParseType(periodType24);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter29.withParseType(periodType30);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology40);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DurationFieldType[] durationFieldTypeArray43 = mutablePeriod41.getFieldTypes();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.forFields(durationFieldTypeArray43);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod46.addHours(0);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        mutablePeriod46.setPeriod((org.joda.time.ReadableDuration) duration52, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType44, chronology66);
        org.joda.time.PeriodType periodType70 = periodType44.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter29.withParseType(periodType70);
        org.joda.time.PeriodType periodType72 = periodType70.withMillisRemoved();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(durationFieldTypeArray43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertNotNull(periodType72);
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withDaysRemoved();
        org.joda.time.PeriodType periodType30 = periodType29.withYearsRemoved();
        java.lang.String str31 = periodType29.getName();
        java.lang.String str32 = periodType29.getName();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        java.lang.String str37 = duration34.toString();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean40 = periodType38.equals((java.lang.Object) false);
        org.joda.time.Period period41 = duration34.toPeriod(periodType38);
        org.joda.time.PeriodType periodType42 = periodType38.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(periodType42);
        org.joda.time.MutablePeriod mutablePeriod44 = mutablePeriod43.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod44.toMutablePeriod();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod49.add((long) ' ');
        mutablePeriod49.addSeconds((int) (byte) 100);
        mutablePeriod49.addWeeks((int) '#');
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        int int60 = mutablePeriod59.getYears();
        org.joda.time.MutablePeriod mutablePeriod61 = mutablePeriod59.copy();
        mutablePeriod61.setYears((int) (short) 10);
        int int64 = mutablePeriod61.size();
        mutablePeriod61.setMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod61.set(durationFieldType67, 340);
        mutablePeriod49.add(durationFieldType67, 32);
        boolean boolean72 = mutablePeriod44.isSupported(durationFieldType67);
        boolean boolean73 = periodType29.isSupported(durationFieldType67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(350, (int) (short) 0, 77, 20, 112, (int) (byte) 1, (int) (byte) 100, 16, periodType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "YearsNoYears" + "'", str31, "YearsNoYears");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "YearsNoYears" + "'", str32, "YearsNoYears");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT126000S" + "'", str37, "PT126000S");
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType19.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(10000L, 1644572202186L, periodType23);
        int int25 = mutablePeriod24.getYears();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        boolean boolean17 = mutablePeriod3.equals((java.lang.Object) (-1.0f));
        mutablePeriod3.setMinutes((int) (short) 1);
        int int20 = mutablePeriod3.getHours();
        mutablePeriod3.setPeriod(36, (int) '4', 3, 70, 100, 487, 102, 3);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Period period53 = interval52.toPeriod();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.days();
        org.joda.time.DurationField durationField56 = chronology54.centuries();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.hourOfHalfday();
        mutablePeriod35.setPeriod((long) '#', chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.year();
        mutablePeriod3.setPeriod(35L, chronology54);
        org.joda.time.DurationFieldType[] durationFieldTypeArray61 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addSeconds(36);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationFieldTypeArray61);
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addMonths(0);
        mutablePeriod3.setMillis((int) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod22.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod36.clear();
        mutablePeriod36.setValue((int) (byte) 0, (-1));
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int47 = mutablePeriod36.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod55.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod55.copy();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Duration duration68 = mutablePeriod55.toDurationTo(readableInstant67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology71 = null;
        mutablePeriod55.setPeriod((org.joda.time.ReadableDuration) duration70, chronology71);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutablePeriod77.setPeriod(readablePeriod78);
        mutablePeriod77.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.days();
        int int83 = mutablePeriod77.get(durationFieldType82);
        boolean boolean84 = mutablePeriod55.isSupported(durationFieldType82);
        mutablePeriod36.set(durationFieldType82, (int) (byte) 1);
        boolean boolean87 = mutablePeriod3.isSupported(durationFieldType82);
        mutablePeriod3.addYears(38);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(261L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.add((long) ' ');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod4.setPeriod((long) (short) 0, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = chronology21.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-11T09:36:44.839Z", chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:36:44.839Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.Duration duration14 = interval11.toDuration();
        java.lang.String str15 = interval11.toString();
        org.joda.time.Period period16 = interval11.toPeriod();
        java.lang.String str17 = period16.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-01-27T19:41:30.017Z/2022-02-11T09:43:10.017Z" + "'", str15, "2022-01-27T19:41:30.017Z/2022-02-11T09:43:10.017Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P2WT14H1M40S" + "'", str17, "P2WT14H1M40S");
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21);
        mutablePeriod22.addWeeks((int) 'a');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.seconds();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        boolean boolean43 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration36.toPeriod(periodType44, chronology45);
        org.joda.time.PeriodType periodType47 = periodType44.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.months();
        int int49 = periodType47.indexOf(durationFieldType48);
        int int50 = periodType26.indexOf(durationFieldType48);
        mutablePeriod3.add(durationFieldType48, (int) (byte) -1);
        mutablePeriod3.setMillis((-51));
        mutablePeriod3.setPeriod(671, 487, (-3), 2719, 3, (int) '#', 97, 712);
        org.joda.time.PeriodType periodType64 = mutablePeriod3.getPeriodType();
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(periodType64);
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter40.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter42 = periodFormatter40.getPrinter();
        org.joda.time.PeriodType periodType43 = periodFormatter40.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter44 = periodFormatter40.getPrinter();
        org.joda.time.PeriodType periodType45 = periodFormatter40.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter46 = periodFormatter40.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod48 = periodFormatter40.parseMutablePeriod("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNull(periodPrinter42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNull(periodPrinter44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNull(periodPrinter46);
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        mutablePeriod7.clear();
        int int11 = mutablePeriod7.getWeeks();
        mutablePeriod7.addMonths(943);
        int int14 = mutablePeriod7.size();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = mutablePeriod7.getValue(431);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 431");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "P943M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "P943M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "P943M");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        mutablePeriod4.setHours(3);
        mutablePeriod4.setHours(456825);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod39.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod50 = mutablePeriod39.copy();
        org.joda.time.PeriodType periodType51 = mutablePeriod39.getPeriodType();
        boolean boolean52 = periodType31.equals((java.lang.Object) mutablePeriod39);
        org.joda.time.PeriodType periodType53 = periodType31.withHoursRemoved();
        org.joda.time.PeriodType periodType54 = periodType31.withSecondsRemoved();
        boolean boolean55 = dateTime30.equals((java.lang.Object) periodType31);
        org.joda.time.Chronology chronology56 = dateTime30.getChronology();
        org.joda.time.Duration duration57 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        mutablePeriod4.addMinutes((-53));
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(duration57);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfMinute();
        boolean boolean40 = mutablePeriod3.equals((java.lang.Object) chronology35);
        mutablePeriod3.setMillis((int) (byte) 10);
        int[] intArray43 = mutablePeriod3.getValues();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, periodType46);
        org.joda.time.PeriodType periodType48 = periodType46.withMonthsRemoved();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Period period61 = interval60.toPeriod();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.hourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        mutablePeriod71.setPeriod(readablePeriod72);
        mutablePeriod71.addWeeks((int) (byte) 10);
        int[] intArray78 = chronology62.get((org.joda.time.ReadablePeriod) mutablePeriod71, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField79 = chronology62.weekOfWeekyear();
        boolean boolean80 = periodType46.equals((java.lang.Object) chronology62);
        mutablePeriod3.add(1643312400993L, chronology62);
        int int82 = mutablePeriod3.getMillis();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1003 + "'", int82 == 1003);
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        java.lang.String str15 = duration10.toString();
        org.joda.time.Period period16 = duration10.toPeriod();
        org.joda.time.Days days17 = duration10.toStandardDays();
        long long18 = duration10.getMillis();
        int int19 = duration1.compareTo((org.joda.time.ReadableDuration) duration10);
        long long20 = duration1.getStandardHours();
        java.lang.String str21 = duration1.toString();
        org.joda.time.Duration duration23 = duration1.plus(1644572254430L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36000000L + "'", long2 == 36000000L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT1260100S" + "'", str15, "PT1260100S");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1260100000L + "'", long18 == 1260100000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT36000S" + "'", str21, "PT36000S");
        org.junit.Assert.assertNotNull(duration23);
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((java.lang.Object) duration46, chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Period period63 = interval62.toPeriod();
        boolean boolean64 = interval50.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology67);
        mutablePeriod68.setMillis((int) (short) 0);
        mutablePeriod68.addMonths((int) (short) 1);
        int int73 = mutablePeriod68.size();
        int int74 = mutablePeriod68.getWeeks();
        mutablePeriod68.setYears(8);
        mutablePeriod68.addSeconds(1);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Duration duration84 = duration82.plus(readableDuration83);
        org.joda.time.Duration duration86 = duration80.withDurationAdded((org.joda.time.ReadableDuration) duration82, (int) (byte) 10);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Period period88 = duration86.toPeriod(chronology87);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Interval interval90 = duration86.toIntervalTo(readableInstant89);
        org.joda.time.Period period91 = interval90.toPeriod();
        org.joda.time.Chronology chronology92 = interval90.getChronology();
        mutablePeriod68.add((org.joda.time.ReadableInterval) interval90);
        boolean boolean94 = interval50.isBefore((org.joda.time.ReadableInterval) interval90);
        java.lang.String str95 = interval50.toString();
        boolean boolean96 = interval42.contains((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration97 = interval50.toDuration();
        org.joda.time.Period period98 = interval50.toPeriod();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-02-11T09:42:10.188Z/2022-02-11T09:43:10.188Z" + "'", str95, "2022-02-11T09:42:10.188Z/2022-02-11T09:43:10.188Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = mutablePeriod32.getFieldTypes();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod37.addHours(0);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        mutablePeriod37.setPeriod((org.joda.time.ReadableDuration) duration43, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType35, chronology57);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) (short) 1, (long) (short) 100, periodType22, chronology57);
        org.joda.time.PeriodType periodType62 = periodType22.withMinutesRemoved();
        org.joda.time.PeriodType periodType63 = periodType62.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(periodType63);
        org.joda.time.PeriodType periodType65 = periodType63.withSecondsRemoved();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType65);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 0, (long) ' ');
        org.joda.time.Duration duration4 = duration2.plus(2L);
        java.lang.String str5 = duration2.toString();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.032S" + "'", str5, "PT0.032S");
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration13 = interval11.toDuration();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod17.setMillis((int) (short) 0);
        mutablePeriod17.addMonths((int) (short) 1);
        mutablePeriod17.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        mutablePeriod17.add(durationFieldType33, (int) '#');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.format.PeriodFormatter periodFormatter47 = null;
        java.lang.String str48 = mutablePeriod40.toString(periodFormatter47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getEnd();
        org.joda.time.Duration duration75 = interval72.toDuration();
        boolean boolean76 = interval60.overlaps((org.joda.time.ReadableInterval) interval72);
        mutablePeriod40.setPeriod((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration85.toPeriod(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Interval interval89 = duration85.toIntervalTo(readableInstant88);
        org.joda.time.Period period90 = interval89.toPeriod();
        org.joda.time.Period period91 = interval89.toPeriod();
        boolean boolean92 = interval72.isBefore((org.joda.time.ReadableInterval) interval89);
        boolean boolean93 = interval11.overlaps((org.joda.time.ReadableInterval) interval72);
        org.joda.time.MutableInterval mutableInterval94 = interval11.toMutableInterval();
        org.joda.time.Chronology chronology95 = mutableInterval94.getChronology();
        org.joda.time.DurationField durationField96 = chronology95.millis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.052S" + "'", str48, "PT0.052S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(mutableInterval94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(durationField96);
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        java.lang.String str11 = duration8.toString();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean14 = periodType12.equals((java.lang.Object) false);
        org.joda.time.Period period15 = duration8.toPeriod(periodType12);
        org.joda.time.PeriodType periodType16 = periodType12.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        boolean boolean18 = periodType12.equals((java.lang.Object) periodType17);
        org.joda.time.PeriodType periodType19 = periodType12.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        boolean boolean21 = periodType12.isSupported(durationFieldType20);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withParseType(periodType12);
        org.joda.time.format.PeriodParser periodParser23 = periodFormatter2.getParser();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT126000S" + "'", str11, "PT126000S");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNull(periodParser23);
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getEnd();
        boolean boolean41 = interval26.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        java.lang.String str56 = dateTime55.toString();
        boolean boolean57 = dateTime40.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = dateTime13.isSupported(dateTimeFieldType59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int62 = dateTime13.get(dateTimeFieldType61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:43:10.334Z" + "'", str56, "2022-02-11T09:43:10.334Z");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = interval29.isBefore(readableInterval32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval32);
        int int35 = mutablePeriod34.getHours();
        mutablePeriod34.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray47 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 1, (long) 3);
        org.joda.time.DateTimeField dateTimeField48 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField49 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = chronology17.dayOfMonth();
        org.joda.time.DurationField durationField53 = chronology17.eras();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) '4', (-51), 35, (int) (byte) 1, (int) '#', 0, 2, 32);
        mutablePeriod8.addHours(5438);
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        java.lang.String str11 = duration1.toString();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getEnd();
        org.joda.time.Duration duration38 = interval35.toDuration();
        boolean boolean39 = interval23.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTime dateTime40 = interval35.getStart();
        org.joda.time.Duration duration42 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        org.joda.time.Duration duration57 = interval54.toDuration();
        org.joda.time.DateTime dateTime58 = interval54.getStart();
        org.joda.time.Period period59 = duration42.toPeriodTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        boolean boolean72 = duration61.isShorterThan((org.joda.time.ReadableDuration) duration69);
        long long73 = duration69.getStandardSeconds();
        int int74 = duration42.compareTo((org.joda.time.ReadableDuration) duration69);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration77 = new org.joda.time.Duration((-124L));
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        boolean boolean80 = dateTime40.isSupported(dateTimeFieldType79);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period82 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime40, periodType81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = null;
        boolean boolean84 = dateTime40.isSupported(dateTimeFieldType83);
        long long85 = dateTime40.getMillis();
        java.lang.String str86 = dateTime40.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT100S" + "'", str11, "PT100S");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1260100L + "'", long73 == 1260100L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1643312490424L + "'", long85 == 1643312490424L);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022-01-27T19:41:30.424Z" + "'", str86, "2022-01-27T19:41:30.424Z");
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572236048L);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        java.lang.String str46 = dateTime45.toString();
        boolean boolean47 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime30.getZone();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes(1644572108797L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        java.lang.String str56 = duration53.toString();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean59 = periodType57.equals((java.lang.Object) false);
        org.joda.time.Period period60 = duration53.toPeriod(periodType57);
        org.joda.time.PeriodType periodType61 = periodType57.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(periodType61);
        org.joda.time.PeriodType periodType63 = periodType61.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration51, periodType63);
        boolean boolean65 = duration1.isEqual((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration67 = duration51.plus(350L);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(126000000L);
        org.joda.time.Duration duration71 = duration69.plus(1644572139204L);
        long long72 = duration71.getStandardDays();
        org.joda.time.Duration duration73 = duration51.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration76 = duration73.withDurationAdded((long) 1250, 7);
        org.joda.time.Days days77 = duration73.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:43:10.478Z" + "'", str46, "2022-02-11T09:43:10.478Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT126000S" + "'", str56, "PT126000S");
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 20492L + "'", long72 == 20492L);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(days77);
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType(1);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1644572151088L);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod29.addHours(0);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration35, chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.halfdayOfDay();
        org.joda.time.DurationField durationField52 = durationFieldType27.getField(chronology49);
        org.joda.time.DateTimeField dateTimeField53 = chronology49.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.year();
        org.joda.time.DurationField durationField55 = chronology49.seconds();
        mutablePeriod24.setPeriod(1644572280187L, 1644572266085L, chronology49);
        org.joda.time.DurationField durationField57 = durationFieldType22.getField(chronology49);
        org.joda.time.DateTimeField dateTimeField58 = chronology49.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = chronology49.getZone();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        boolean boolean14 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration15 = duration1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration17 = duration3.withMillis((long) (short) 100);
        long long18 = duration3.getStandardDays();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours(1644572229213L);
        org.joda.time.Duration duration21 = duration3.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (-20));
        boolean boolean24 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Seconds seconds14 = duration10.toStandardSeconds();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        java.lang.String str33 = duration30.toString();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean36 = periodType34.equals((java.lang.Object) false);
        org.joda.time.Period period37 = duration30.toPeriod(periodType34);
        org.joda.time.PeriodType periodType38 = periodType34.withMillisRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withDaysRemoved();
        org.joda.time.PeriodType periodType40 = periodType38.withYearsRemoved();
        org.joda.time.Period period41 = duration10.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28, periodType40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(1644572258064L);
        boolean boolean44 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.minus(1644572396329L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT126000S" + "'", str33, "PT126000S");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        boolean boolean14 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration15 = duration1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration17 = duration3.withMillis((long) (short) 100);
        long long18 = duration3.getStandardDays();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours(1644572229213L);
        org.joda.time.Duration duration21 = duration3.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration22 = duration3.toDuration();
        long long23 = duration22.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 126000000L + "'", long23 == 126000000L);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572406417L);
        mutablePeriod1.addWeeks(4);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod10.copy();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = mutablePeriod10.toDurationTo(readableInstant22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration25, chronology26);
        boolean boolean28 = duration2.isEqual((org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        java.lang.String str73 = dateTime72.toString();
        boolean boolean74 = dateTime57.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime57.getZone();
        boolean boolean78 = dateTime57.equals((java.lang.Object) "PT60S");
        org.joda.time.Period period79 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration81 = duration25.plus((long) '#');
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration25);
        mutablePeriod82.clear();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:43:10.630Z" + "'", str73, "2022-02-11T09:43:10.630Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(duration81);
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572151088L);
        mutablePeriod1.setSeconds(658);
        org.joda.time.Period period4 = mutablePeriod1.toPeriod();
        mutablePeriod1.setPeriod((long) (-19));
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572302091L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572302091 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        long long21 = duration20.getStandardSeconds();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        boolean boolean53 = interval38.contains((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Interval interval65 = duration61.toIntervalTo(readableInstant64);
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.DateTime dateTime67 = interval65.getEnd();
        java.lang.String str68 = dateTime67.toString();
        boolean boolean69 = dateTime52.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration70 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTime52.getZone();
        org.joda.time.Period period72 = duration23.toPeriodTo((org.joda.time.ReadableInstant) dateTime52);
        long long73 = dateTime52.getMillis();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        java.lang.String str78 = duration75.toString();
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean81 = periodType79.equals((java.lang.Object) false);
        org.joda.time.Period period82 = duration75.toPeriod(periodType79);
        org.joda.time.PeriodType periodType83 = periodType79.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(periodType79);
        org.joda.time.Period period85 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52, periodType79);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean89 = periodType87.equals((java.lang.Object) false);
        org.joda.time.PeriodType periodType90 = periodType87.withMillisRemoved();
        org.joda.time.PeriodType periodType91 = periodType87.withYearsRemoved();
        org.joda.time.PeriodType periodType92 = periodType87.withMonthsRemoved();
        org.joda.time.PeriodType periodType93 = periodType92.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime52, readableInstant86, periodType92);
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime52.getZone();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 28083659L + "'", long21 == 28083659L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-11T09:43:10.700Z" + "'", str68, "2022-02-11T09:43:10.700Z");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(period72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644572590700L + "'", long73 == 1644572590700L);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT126000S" + "'", str78, "PT126000S");
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertNotNull(dateTimeZone95);
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        boolean boolean46 = mutablePeriod30.isSupported(durationFieldType44);
        int int47 = periodType26.indexOf(durationFieldType44);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, periodType26, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.hourOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = mutablePeriod71.getFieldTypes();
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePeriod) mutablePeriod71, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField77 = chronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = chronology61.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology61);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(100L, (-124L), chronology61);
        org.joda.time.DateTimeField dateTimeField81 = chronology61.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField82 = chronology61.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField83 = chronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField84 = chronology61.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField85 = chronology61.year();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.minuteOfDay();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        java.lang.String str11 = mutablePeriod4.toString();
        mutablePeriod4.addMonths((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod4.toMutablePeriod();
        mutablePeriod4.setDays(4);
        int[] intArray17 = mutablePeriod4.getValues();
        mutablePeriod4.add(100, (-20), 51, (-1), 80, 10, (-3), (-1));
        mutablePeriod4.setMonths((int) (byte) 1);
        mutablePeriod4.setMinutes(0);
        java.lang.Object obj31 = mutablePeriod4.clone();
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P10W" + "'", str11, "P10W");
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 10, 4, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "P100Y1M61W3DT80H-3.001S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "P100Y1M61W3DT80H-3.001S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "P100Y1M61W3DT80H-3.001S");
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.setPeriod((long) '#');
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        int int49 = mutablePeriod48.getYears();
        java.lang.String str50 = mutablePeriod48.toString();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        mutablePeriod48.add((org.joda.time.ReadablePeriod) mutablePeriod55);
        boolean boolean62 = mutablePeriod48.equals((java.lang.Object) (-1.0f));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int[] intArray64 = mutablePeriod48.getValues();
        mutablePeriod48.addSeconds((-35));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType68 = mutablePeriod48.getFieldType(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.052S" + "'", str50, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 10, 0, 0, 0, 0, -52]");
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        long long37 = duration32.getStandardHours();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology40);
        int int42 = mutablePeriod41.getMinutes();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod46.setMillis((int) (short) 0);
        mutablePeriod46.addMonths((int) (short) 1);
        mutablePeriod46.setMinutes((int) (byte) 1);
        mutablePeriod46.addYears(1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        boolean boolean61 = duration56.isLongerThan((org.joda.time.ReadableDuration) duration58);
        mutablePeriod46.add((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int66 = duration56.compareTo((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration74.toPeriod(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        org.joda.time.Interval interval79 = interval78.toInterval();
        org.joda.time.DateTime dateTime80 = interval78.getEnd();
        org.joda.time.Period period81 = duration65.toPeriodTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Duration duration82 = mutablePeriod41.toDurationTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Duration duration83 = duration32.plus((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration84 = duration22.plus((org.joda.time.ReadableDuration) duration32);
        long long85 = duration22.getMillis();
        org.joda.time.Duration duration87 = duration22.minus(1644572387431L);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 350L + "'", long37 == 350L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 100000L + "'", long85 == 100000L);
        org.junit.Assert.assertNotNull(duration87);
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1644572294819L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Days days10 = duration9.toStandardDays();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (short) -1, periodType12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.Period period28 = duration9.toPeriod(periodType12, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology27.getZone();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Period period46 = interval45.toPeriod();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.hourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology47.getZone();
        org.joda.time.Chronology chronology52 = chronology27.withZone(dateTimeZone51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period53 = duration1.toPeriod(chronology52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 9789120802");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology15);
        org.joda.time.DurationField durationField21 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.hourOfHalfday();
        mutablePeriod4.setPeriod((long) '#', chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.monthOfYear();
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getEnd();
        boolean boolean33 = interval18.contains((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        boolean boolean50 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Minutes minutes51 = duration37.toStandardMinutes();
        org.joda.time.Duration duration53 = duration37.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.DateTime dateTime68 = interval66.getEnd();
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Duration duration75 = duration73.plus(readableDuration74);
        org.joda.time.Duration duration77 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) (byte) 10);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        boolean boolean86 = duration73.isShorterThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration79.toPeriod(periodType87, chronology88);
        org.joda.time.PeriodType periodType90 = periodType87.withYearsRemoved();
        org.joda.time.PeriodType periodType91 = periodType90.withDaysRemoved();
        org.joda.time.PeriodType periodType92 = periodType91.withSecondsRemoved();
        org.joda.time.PeriodType periodType93 = periodType92.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime68, periodType92);
        org.joda.time.Duration duration95 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = null;
        boolean boolean97 = dateTime68.isSupported(dateTimeFieldType96);
        long long98 = dateTime68.getMillis();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-11T09:43:11.022Z" + "'", str69, "2022-02-11T09:43:11.022Z");
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1644572591022L + "'", long98 == 1644572591022L);
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addYears(1);
        mutablePeriod3.setHours(100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod17.setMillis((int) (short) 0);
        mutablePeriod17.addMonths((int) (short) 1);
        mutablePeriod17.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = mutablePeriod17.getFieldTypes();
        mutablePeriod17.addMonths(0);
        mutablePeriod17.setMillis((int) (byte) 1);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        int int30 = mutablePeriod3.getDays();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.dayTime();
        java.lang.String str35 = periodType34.getName();
        int int36 = periodType34.size();
        org.joda.time.PeriodType periodType37 = periodType34.withDaysRemoved();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.hourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.dayOfYear();
        org.joda.time.DurationField durationField55 = chronology51.centuries();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(6000L, 1644572145972L, periodType37, chronology51);
        mutablePeriod3.setPeriod(35L, chronology51);
        org.joda.time.DurationField durationField58 = chronology51.months();
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DayTime" + "'", str35, "DayTime");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        mutablePeriod5.addMinutes((int) (short) 0);
        mutablePeriod5.addDays((int) (byte) 10);
        mutablePeriod5.addSeconds(7);
        mutablePeriod5.addYears((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1643312180476L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean15 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        boolean boolean28 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration30 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) 'a');
        boolean boolean31 = duration1.isEqual((org.joda.time.ReadableDuration) duration30);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        mutablePeriod18.setSeconds(1);
        mutablePeriod18.addSeconds((int) (byte) 100);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        int int51 = duration30.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod53.addHours(0);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Period period72 = interval71.toPeriod();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        mutablePeriod53.setPeriod((org.joda.time.ReadableDuration) duration59, chronology73);
        java.lang.String str75 = chronology73.toString();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.weekOfWeekyear();
        org.joda.time.Period period77 = duration40.toPeriod(chronology73);
        org.joda.time.Duration duration79 = duration40.withMillis(0L);
        long long80 = duration79.getStandardMinutes();
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Days days82 = duration79.toStandardDays();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str75, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(days82);
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) '#');
        boolean boolean4 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration8.withMillis((long) (-1));
        org.joda.time.Duration duration13 = duration10.withDurationAdded(0L, (int) (short) 10);
        org.joda.time.Duration duration14 = duration1.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        long long27 = duration22.getStandardHours();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        int int32 = mutablePeriod31.getMinutes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod36.setMillis((int) (short) 0);
        mutablePeriod36.addMonths((int) (short) 1);
        mutablePeriod36.setMinutes((int) (byte) 1);
        mutablePeriod36.addYears(1);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        boolean boolean51 = duration46.isLongerThan((org.joda.time.ReadableDuration) duration48);
        mutablePeriod36.add((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int56 = duration46.compareTo((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        org.joda.time.Period period71 = duration55.toPeriodTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration72 = mutablePeriod31.toDurationTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = duration22.plus((org.joda.time.ReadableDuration) duration72);
        long long74 = duration72.getStandardMinutes();
        org.joda.time.Duration duration75 = duration1.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(10L);
        boolean boolean78 = duration75.isLongerThan((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Period period79 = duration75.toPeriod();
        int[] intArray80 = period79.getValues();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 350L + "'", long27 == 350L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 0, 1, 40, 0, 52]");
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withMonthsRemoved();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod27.clear();
        mutablePeriod27.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType37 = null;
        boolean boolean38 = mutablePeriod27.isSupported(durationFieldType37);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekyearOfCentury();
        mutablePeriod27.add((long) (short) 100, chronology53);
        org.joda.time.DateTimeField dateTimeField57 = chronology53.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) 1644572300006L, periodType22, chronology53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 59);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = interval29.isBefore(readableInterval32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval32);
        int int35 = mutablePeriod34.getHours();
        mutablePeriod34.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray47 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 1, (long) 3);
        org.joda.time.DateTimeField dateTimeField48 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = chronology17.millisOfDay();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        org.joda.time.Duration duration64 = interval61.toDuration();
        org.joda.time.DateTime dateTime65 = interval61.getStart();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Duration duration71 = duration69.plus(readableDuration70);
        boolean boolean72 = duration67.isLongerThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Seconds seconds73 = duration67.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableDuration) duration67);
        mutablePeriod74.addMinutes(5);
        int[] intArray78 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod74, 1644572170972L);
        org.joda.time.DateTimeField dateTimeField79 = chronology17.secondOfMinute();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(seconds73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 2719, 1, 9, 36, 10, 972]");
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 340);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean15 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration14);
        java.lang.String str16 = duration14.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.millis((long) 100);
        boolean boolean19 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration18);
        boolean boolean20 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration18);
        long long21 = duration1.getMillis();
        org.joda.time.Duration duration23 = duration1.minus(1644572184661L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        int int26 = duration23.compareTo((org.joda.time.ReadableDuration) duration25);
        long long27 = duration23.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT6000S" + "'", str16, "PT6000S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 29376000000L + "'", long21 == 29376000000L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-448665L) + "'", long27 == (-448665L));
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutablePeriod6.setPeriod(readablePeriod7);
        mutablePeriod6.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        int int12 = mutablePeriod6.get(durationFieldType11);
        mutablePeriod6.setMinutes((-1));
        mutablePeriod6.addDays((int) (short) -1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        java.lang.Object obj28 = mutablePeriod26.clone();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((java.lang.Object) duration30, chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        mutablePeriod26.add((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.Chronology chronology37 = interval34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        mutablePeriod6.setPeriod((long) 100, (long) 3, chronology37);
        org.joda.time.PeriodType periodType40 = mutablePeriod6.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1643312038686L, 13156577230478L, periodType41);
        org.joda.time.PeriodType periodType43 = mutablePeriod42.getPeriodType();
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType43);
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addHours((int) (short) 1);
        int int45 = mutablePeriod15.getMinutes();
        mutablePeriod15.setYears(32);
        mutablePeriod15.setMinutes((int) (short) 10);
        org.joda.time.PeriodType periodType50 = mutablePeriod15.getPeriodType();
        mutablePeriod15.setMillis(33);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology59);
        mutablePeriod56.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        java.lang.Object obj62 = mutablePeriod60.clone();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) duration64, chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        mutablePeriod60.add((org.joda.time.ReadableInterval) interval68);
        mutablePeriod15.setPeriod((org.joda.time.ReadableInterval) interval68);
        mutablePeriod15.setMillis(48);
        mutablePeriod15.setYears(111);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(interval68);
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = periodType18.isSupported(durationFieldType30);
        org.joda.time.PeriodType periodType33 = periodType18.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(60000L, periodType18);
        org.joda.time.PeriodType periodType35 = periodType18.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(periodType35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        int int41 = mutablePeriod40.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod40.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod45.addHours(0);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Period period64 = interval63.toPeriod();
        org.joda.time.Chronology chronology65 = interval63.getChronology();
        mutablePeriod45.setPeriod((org.joda.time.ReadableDuration) duration51, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.halfdayOfDay();
        org.joda.time.DurationField durationField68 = durationFieldType43.getField(chronology65);
        int int69 = mutablePeriod40.get(durationFieldType43);
        boolean boolean70 = periodType35.isSupported(durationFieldType43);
        org.joda.time.PeriodType periodType71 = periodType35.withMillisRemoved();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(periodType71);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = mutablePeriod1.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod1.copy();
        mutablePeriod1.addMonths(102);
        java.lang.String str9 = mutablePeriod1.toString();
        mutablePeriod1.addMillis((int) (byte) 10);
        mutablePeriod1.addDays(40);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        boolean boolean43 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration36.toPeriod(periodType44, chronology45);
        org.joda.time.PeriodType periodType47 = periodType44.withYearsRemoved();
        org.joda.time.PeriodType periodType48 = periodType44.withHoursRemoved();
        org.joda.time.Period period49 = interval25.toPeriod(periodType48);
        java.lang.String str50 = interval25.toString();
        org.joda.time.Period period51 = interval25.toPeriod();
        boolean boolean52 = mutablePeriod1.equals((java.lang.Object) period51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P102MT0.052S" + "'", str9, "P102MT0.052S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-01-27T19:41:31.431Z/2022-02-11T09:43:11.431Z" + "'", str50, "2022-01-27T19:41:31.431Z/2022-02-11T09:43:11.431Z");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.add((long) ' ');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod4.setPeriod((long) (short) 0, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 52, chronology21);
        org.joda.time.ReadablePartial readablePartial25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology21.set(readablePartial25, 1644572318740L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.addSeconds((int) (byte) 100);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) duration9, chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval13);
        int int15 = mutablePeriod3.size();
        mutablePeriod3.addDays(11);
        mutablePeriod3.setDays((-3126812));
        int int20 = mutablePeriod3.size();
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant11, (org.joda.time.ReadableDuration) duration12, periodType13);
        org.joda.time.Duration duration16 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration12, 10);
        org.joda.time.Duration duration17 = duration5.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Hours hours18 = duration9.toStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(hours18);
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod13.add((long) ' ');
        int int16 = mutablePeriod13.getDays();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.millis();
        mutablePeriod13.add(durationFieldType17, (int) (byte) 1);
        boolean boolean20 = mutablePeriod4.equals((java.lang.Object) durationFieldType17);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod4.copy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod25.setMillis((int) (short) 0);
        mutablePeriod25.addMonths((int) (short) 1);
        int int30 = mutablePeriod25.size();
        int int31 = mutablePeriod25.getWeeks();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod35.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        int int39 = mutablePeriod35.get(durationFieldType38);
        int int40 = mutablePeriod35.size();
        mutablePeriod35.setMinutes((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getEnd();
        mutablePeriod47.setPeriod((org.joda.time.ReadableInterval) interval59);
        mutablePeriod35.setPeriod((org.joda.time.ReadableInterval) interval59);
        long long64 = interval59.getEndMillis();
        mutablePeriod25.add((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Duration duration66 = interval59.toDuration();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval59);
        int int68 = mutablePeriod4.getYears();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1644572591572L + "'", long64 == 1644572591572L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-3), 2, (-1), (int) '4');
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType1 = periodType0.withMinutesRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', chronology1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.setMillis((int) (short) 0);
        mutablePeriod6.addMonths((int) (short) 1);
        int int11 = mutablePeriod6.size();
        int int12 = mutablePeriod6.getWeeks();
        mutablePeriod6.setYears(8);
        mutablePeriod6.addSeconds(1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval28);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutablePeriod6.addYears((-245));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.size();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Period period18 = interval16.toPeriod();
        org.joda.time.ReadableInterval readableInterval19 = null;
        boolean boolean20 = interval16.contains(readableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        java.lang.Object obj30 = mutablePeriod28.clone();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) duration32, chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        mutablePeriod28.add((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        mutablePeriod42.setMillis((int) (short) 0);
        mutablePeriod42.addMonths((int) (short) 1);
        int int47 = mutablePeriod42.size();
        int int48 = mutablePeriod42.getWeeks();
        mutablePeriod42.setYears(8);
        mutablePeriod42.addSeconds(1);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        mutablePeriod42.add((org.joda.time.ReadableInterval) interval64);
        boolean boolean68 = interval36.contains((org.joda.time.ReadableInterval) interval64);
        boolean boolean69 = interval16.isBefore((org.joda.time.ReadableInterval) interval64);
        org.joda.time.DateTime dateTime70 = interval16.getEnd();
        org.joda.time.MutableInterval mutableInterval71 = interval16.toMutableInterval();
        mutablePeriod3.add((org.joda.time.ReadableInterval) mutableInterval71);
        org.joda.time.Interval interval73 = mutableInterval71.toInterval();
        org.joda.time.Interval interval74 = mutableInterval71.toInterval();
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardMinutes((long) ' ');
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        org.joda.time.Duration duration88 = duration82.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = duration88.toPeriod(chronology89);
        boolean boolean91 = duration80.isShorterThan((org.joda.time.ReadableDuration) duration88);
        org.joda.time.Duration duration92 = duration78.plus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration93 = duration76.minus((org.joda.time.ReadableDuration) duration92);
        boolean boolean94 = mutableInterval71.equals((java.lang.Object) duration76);
        org.joda.time.Interval interval95 = mutableInterval71.toInterval();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(interval95);
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.addSeconds((int) (byte) 100);
        mutablePeriod3.addWeeks((int) '#');
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology49);
        org.joda.time.DateTimeField dateTimeField53 = chronology49.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((java.lang.Object) period33, chronology49);
        org.joda.time.DurationField durationField55 = chronology49.days();
        boolean boolean56 = durationFieldType19.isSupported(chronology49);
        int int57 = mutablePeriod3.get(durationFieldType19);
        mutablePeriod3.setMillis(32);
        mutablePeriod3.setSeconds((int) (byte) -1);
        mutablePeriod3.setPeriod(1644572193502L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.millis((long) 38);
        org.joda.time.Duration duration67 = new org.joda.time.Duration((long) (-1));
        org.joda.time.Seconds seconds68 = duration67.toStandardSeconds();
        java.lang.String str69 = duration67.toString();
        int int70 = duration65.compareTo((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology77);
        mutablePeriod74.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod78);
        java.lang.Object obj80 = mutablePeriod78.clone();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((java.lang.Object) duration82, chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        mutablePeriod78.add((org.joda.time.ReadableInterval) interval86);
        org.joda.time.DateTime dateTime88 = interval86.getStart();
        org.joda.time.Chronology chronology89 = interval86.getChronology();
        org.joda.time.Duration duration90 = interval86.toDuration();
        org.joda.time.Interval interval91 = interval86.toInterval();
        org.joda.time.Period period92 = interval86.toPeriod();
        org.joda.time.DateTime dateTime93 = interval86.getStart();
        org.joda.time.Interval interval94 = duration65.toIntervalTo((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.Duration duration96 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime93, (org.joda.time.ReadableDuration) duration96);
        org.joda.time.Duration duration98 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime93);
        java.lang.String str99 = duration98.toString();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(seconds68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT-0.001S" + "'", str69, "PT-0.001S");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertNotNull(duration98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "PT1644572193.502S" + "'", str99, "PT1644572193.502S");
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withMonthsRemoved();
        int int3 = periodType2.size();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        long long28 = interval12.toDurationMillis();
        org.joda.time.Interval interval29 = interval12.toInterval();
        org.joda.time.Duration duration31 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration42 = duration33.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.DateTime dateTime71 = interval69.getEnd();
        boolean boolean72 = interval57.contains((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Duration duration78 = duration76.plus(readableDuration77);
        org.joda.time.Duration duration80 = duration74.withDurationAdded((org.joda.time.ReadableDuration) duration76, (int) (byte) 10);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = duration80.toPeriod(chronology81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Interval interval84 = duration80.toIntervalTo(readableInstant83);
        org.joda.time.Interval interval85 = interval84.toInterval();
        org.joda.time.DateTime dateTime86 = interval84.getEnd();
        java.lang.String str87 = dateTime86.toString();
        boolean boolean88 = dateTime71.isBefore((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Duration duration89 = mutablePeriod44.toDurationFrom((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime71.getZone();
        org.joda.time.Period period91 = duration41.toPeriodTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Period period92 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone93 = dateTime71.getZone();
        boolean boolean94 = interval12.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval95 = interval12.toMutableInterval();
        java.lang.String str96 = mutableInterval95.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1260100000L + "'", long28 == 1260100000L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022-02-11T09:43:11.782Z" + "'", str87, "2022-02-11T09:43:11.782Z");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(mutableInterval95);
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2022-01-27T19:41:31.782Z/2022-02-11T09:43:11.782Z" + "'", str96, "2022-01-27T19:41:31.782Z/2022-02-11T09:43:11.782Z");
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        boolean boolean46 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Minutes minutes47 = duration33.toStandardMinutes();
        org.joda.time.Duration duration49 = duration33.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod54.clear();
        mutablePeriod54.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType64 = null;
        boolean boolean65 = mutablePeriod54.isSupported(durationFieldType64);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration74.toPeriod(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        org.joda.time.Period period79 = interval78.toPeriod();
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.hourOfDay();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.weekyearOfCentury();
        mutablePeriod54.add((long) (short) 100, chronology80);
        org.joda.time.DurationField durationField84 = chronology80.halfdays();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((java.lang.Object) duration33, chronology80);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 51, (long) (byte) -1, chronology80);
        org.joda.time.DateTimeField dateTimeField87 = chronology80.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField88 = chronology80.dayOfMonth();
        java.lang.String str89 = chronology80.toString();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str89, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes(1644572108797L);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration25);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.addMonths(1003);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(duration25);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1644572216188L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        boolean boolean4 = periodFormatter2.isPrinter();
        boolean boolean5 = periodFormatter2.isParser();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addYears((int) '#');
        mutablePeriod3.addMillis(39);
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration1, periodType2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration14 = duration5.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean17 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration16);
        java.lang.String str18 = duration16.toString();
        int int19 = duration1.compareTo((org.joda.time.ReadableDuration) duration16);
        long long20 = duration1.getStandardSeconds();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant21);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT6000S" + "'", str18, "PT6000S");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutablePeriod44.setPeriod(readablePeriod45);
        mutablePeriod44.addWeeks((int) (byte) 10);
        int int49 = mutablePeriod44.getMonths();
        int int50 = mutablePeriod44.size();
        mutablePeriod44.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod44.toMutablePeriod();
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod44.setMinutes(0);
        mutablePeriod44.addHours(184);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod53);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.setWeeks(100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        mutablePeriod17.setMillis((int) (short) 0);
        mutablePeriod17.addMonths((int) (short) 1);
        mutablePeriod17.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        mutablePeriod17.add(durationFieldType33, (int) '#');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod17.copy();
        mutablePeriod47.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod47.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod62.addHours(0);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration76.toPeriod(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        org.joda.time.Period period81 = interval80.toPeriod();
        org.joda.time.Chronology chronology82 = interval80.getChronology();
        mutablePeriod62.setPeriod((org.joda.time.ReadableDuration) duration68, chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology82.hourOfHalfday();
        mutablePeriod47.setPeriod(1644572126356L, (long) (short) 1, chronology82);
        java.lang.String str86 = chronology82.toString();
        org.joda.time.DateTimeField dateTimeField87 = chronology82.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField88 = chronology82.halfdayOfDay();
        mutablePeriod3.setPeriod(1644572243441L, chronology82);
        org.joda.time.DurationField durationField90 = chronology82.hours();
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str86, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField90);
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = mutablePeriod11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.addHours(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration22, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType14, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = chronology36.minuteOfDay();
        org.joda.time.DurationField durationField44 = chronology36.halfdays();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 10, chronology36);
        mutablePeriod45.addDays(100);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        mutablePeriod51.setMillis((int) (short) 0);
        mutablePeriod51.addMonths((int) (short) 1);
        mutablePeriod51.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutablePeriod62.setPeriod(readablePeriod63);
        mutablePeriod62.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.days();
        int int68 = mutablePeriod62.get(durationFieldType67);
        mutablePeriod51.add(durationFieldType67, (int) '#');
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology77);
        mutablePeriod74.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod78);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod74);
        org.joda.time.MutablePeriod mutablePeriod81 = mutablePeriod51.copy();
        mutablePeriod81.setPeriod((long) (short) 10, (long) 100);
        mutablePeriod81.clear();
        int int86 = mutablePeriod81.getSeconds();
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod81);
        mutablePeriod45.setPeriod((-54779L));
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setYears((int) '4');
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getEnd();
        boolean boolean37 = interval22.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        boolean boolean54 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Minutes minutes55 = duration41.toStandardMinutes();
        org.joda.time.Duration duration57 = duration41.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Minutes minutes59 = duration41.toStandardMinutes();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration41);
        org.joda.time.PeriodType periodType61 = mutablePeriod3.getPeriodType();
        org.joda.time.PeriodType periodType62 = periodType61.withYearsRemoved();
        org.joda.time.PeriodType periodType63 = periodType62.withMonthsRemoved();
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        int int5 = mutablePeriod4.getYears();
        java.lang.String str6 = mutablePeriod4.toString();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutablePeriod11.setPeriod(readablePeriod12);
        mutablePeriod11.addWeeks((int) (byte) 10);
        mutablePeriod4.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18);
        boolean boolean20 = mutablePeriod11.equals((java.lang.Object) readableInstant17);
        org.joda.time.Period period21 = mutablePeriod11.toPeriod();
        org.joda.time.Period period22 = mutablePeriod11.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod23 = period22.toMutablePeriod();
        mutablePeriod23.setHours(51);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        mutablePeriod29.setMillis((int) (short) 0);
        mutablePeriod29.addMonths((int) (short) 1);
        mutablePeriod29.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutablePeriod40.setPeriod(readablePeriod41);
        mutablePeriod40.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.days();
        int int46 = mutablePeriod40.get(durationFieldType45);
        mutablePeriod29.add(durationFieldType45, (int) '#');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.MutablePeriod mutablePeriod59 = mutablePeriod29.copy();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.weeks();
        int int61 = mutablePeriod59.get(durationFieldType60);
        org.joda.time.PeriodType periodType62 = mutablePeriod59.getPeriodType();
        mutablePeriod23.add((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DurationFieldType[] durationFieldTypeArray64 = mutablePeriod23.getFieldTypes();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.forFields(durationFieldTypeArray64);
        org.joda.time.PeriodType periodType66 = periodType65.withYearsRemoved();
        org.joda.time.PeriodType periodType67 = periodType66.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(169390931561965L, periodType67);
        mutablePeriod68.addMinutes((int) '4');
        mutablePeriod68.setMinutes(49);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.052S" + "'", str6, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldTypeArray64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(160000L);
        long long2 = duration1.getMillis();
        long long3 = duration1.getMillis();
        org.joda.time.Hours hours4 = duration1.toStandardHours();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        boolean boolean32 = interval17.contains((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getEnd();
        java.lang.String str47 = dateTime46.toString();
        boolean boolean48 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Period period62 = interval61.toPeriod();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.hourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.dayOfYear();
        org.joda.time.Chronology chronology67 = chronology63.withUTC();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(100000L, chronology63);
        java.lang.String str69 = mutablePeriod68.toString();
        mutablePeriod68.setYears(0);
        mutablePeriod68.setSeconds(1);
        boolean boolean74 = dateTime31.equals((java.lang.Object) mutablePeriod68);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime31);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 13824000000000L + "'", long2 == 13824000000000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 13824000000000L + "'", long3 == 13824000000000L);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T09:43:12.126Z" + "'", str47, "2022-02-11T09:43:12.126Z");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT1M40S" + "'", str69, "PT1M40S");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        java.lang.Object obj3 = mutablePeriod2.clone();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str5 = durationFieldType4.toString();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.secondOfMinute();
        org.joda.time.DurationField durationField24 = chronology19.months();
        boolean boolean25 = durationFieldType4.isSupported(chronology19);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutablePeriod30.setPeriod(readablePeriod31);
        mutablePeriod30.addWeeks((int) (byte) 10);
        int int35 = mutablePeriod30.getMonths();
        mutablePeriod30.addDays(10);
        mutablePeriod30.setWeeks((int) (byte) -1);
        mutablePeriod30.addWeeks(8);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Period period54 = interval53.toPeriod();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Period period69 = interval68.toPeriod();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.hourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology70);
        org.joda.time.DateTimeField dateTimeField74 = chronology70.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((java.lang.Object) period54, chronology70);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod30, chronology70);
        long long84 = chronology70.getDateTimeMillis((int) (short) 1, 3, (int) (byte) 1, 0, (int) '#', (int) (short) 10, 0);
        org.joda.time.DateTimeField dateTimeField85 = chronology70.dayOfWeek();
        org.joda.time.DurationField durationField86 = durationFieldType4.getField(chronology70);
        int int87 = mutablePeriod2.get(durationFieldType4);
        mutablePeriod2.setPeriod(1644572149231L);
        mutablePeriod2.setDays((-3));
        int int92 = mutablePeriod2.size();
        mutablePeriod2.setWeeks((int) (short) 0);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "P-3DT9H35M49.231S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "P-3DT9H35M49.231S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "P-3DT9H35M49.231S");
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyears" + "'", str5, "weekyears");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-62130497090000L) + "'", long84 == (-62130497090000L));
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfYear();
        org.joda.time.Chronology chronology38 = chronology34.withUTC();
        mutablePeriod3.setPeriod(0L, chronology34);
        int int40 = mutablePeriod3.getMillis();
        int[] intArray41 = mutablePeriod3.getValues();
        int int42 = mutablePeriod3.getMinutes();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod46.add((long) ' ');
        int int49 = mutablePeriod46.getDays();
        mutablePeriod46.setMillis((int) (byte) -1);
        mutablePeriod46.setYears(4);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((java.lang.Object) duration55, chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Period period72 = interval71.toPeriod();
        boolean boolean73 = interval59.overlaps((org.joda.time.ReadableInterval) interval71);
        java.lang.String str74 = interval71.toString();
        org.joda.time.MutableInterval mutableInterval75 = interval71.toMutableInterval();
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Interval interval88 = interval87.toInterval();
        org.joda.time.Chronology chronology89 = interval87.getChronology();
        org.joda.time.Period period90 = interval87.toPeriod();
        boolean boolean91 = interval71.isAfter((org.joda.time.ReadableInterval) interval87);
        mutablePeriod46.add((org.joda.time.ReadableInterval) interval87);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval87);
        mutablePeriod3.add(1644572502703L);
        mutablePeriod3.setMonths((-9));
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-01-27T19:41:32.302Z/2022-02-11T09:43:12.302Z" + "'", str74, "2022-01-27T19:41:32.302Z/2022-02-11T09:43:12.302Z");
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        boolean boolean9 = periodFormatter2.isPrinter();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter2.withLocale(locale10);
        boolean boolean12 = periodFormatter11.isParser();
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter11.withLocale(locale13);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((java.lang.Object) locale13);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodFormatter14);
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration18.toPeriod(periodType26, chronology27);
        int int29 = duration8.compareTo((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod31.addHours(0);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration37, chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.Period period55 = duration18.toPeriod(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(350L, chronology51);
        org.joda.time.DateTimeField dateTimeField59 = chronology51.monthOfYear();
        org.joda.time.DateTimeField dateTimeField60 = chronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField61 = chronology51.millisOfSecond();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str53, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        mutablePeriod5.addMinutes((int) (short) 0);
        mutablePeriod5.addDays((int) (short) 100);
        mutablePeriod5.setPeriod((int) (byte) 10, 0, (int) (byte) 100, (int) (short) 100, (int) '#', 10, (int) 'a', (int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod78 = mutablePeriod5.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod79 = mutablePeriod78.copy();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertNotNull(mutablePeriod79);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        mutablePeriod3.setYears(8);
        mutablePeriod3.addSeconds(1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        java.lang.String str63 = periodType48.getName();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType48, chronology64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        long long72 = interval71.toDurationMillis();
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval71);
        boolean boolean74 = interval25.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime75 = interval71.getStart();
        org.joda.time.Duration duration76 = new org.joda.time.Duration((java.lang.Object) interval71);
        org.joda.time.Duration duration78 = duration76.minus(0L);
        org.joda.time.Hours hours79 = duration78.toStandardHours();
        org.joda.time.Duration duration81 = duration78.minus(0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Years" + "'", str63, "Years");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(hours79);
        org.junit.Assert.assertNotNull(duration81);
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(3289144353734L, 456475L);
        int int3 = mutablePeriod2.size();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfMonth();
        org.joda.time.Chronology chronology29 = chronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 1, 28083659L, chronology24);
        java.lang.String str32 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField33 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1644572255589L, 1644572123305L, chronology24);
        org.joda.time.DurationField durationField35 = chronology24.halfdays();
        org.joda.time.DurationField durationField36 = chronology24.centuries();
        mutablePeriod2.add(1644572350326L, chronology24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str32, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.setWeeks((int) (short) 100);
        java.lang.String str23 = mutablePeriod18.toString();
        java.lang.String str24 = mutablePeriod18.toString();
        mutablePeriod18.add((long) 'a');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.addSeconds((int) (byte) 100);
        mutablePeriod30.addWeeks((int) '#');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        int int41 = mutablePeriod40.getYears();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod40.copy();
        mutablePeriod42.setYears((int) (short) 10);
        int int45 = mutablePeriod42.size();
        mutablePeriod42.setMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod42.set(durationFieldType48, 340);
        mutablePeriod30.add(durationFieldType48, 32);
        boolean boolean53 = mutablePeriod18.isSupported(durationFieldType48);
        mutablePeriod18.addSeconds((int) (byte) 10);
        mutablePeriod18.setYears(918);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P100WT0.087S" + "'", str23, "P100WT0.087S");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P100WT0.087S" + "'", str24, "P100WT0.087S");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        mutablePeriod4.addDays(10);
        mutablePeriod4.setMinutes(0);
        int[] intArray14 = mutablePeriod4.getValues();
        int int15 = mutablePeriod4.getSeconds();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.days();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        mutablePeriod20.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod20.toMutablePeriod();
        mutablePeriod23.setSeconds((int) (short) 10);
        mutablePeriod23.addDays(100);
        mutablePeriod23.addHours((int) '4');
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutablePeriod34.setPeriod(readablePeriod35);
        mutablePeriod34.addWeeks((int) (byte) 10);
        int int39 = mutablePeriod34.getMonths();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        mutablePeriod43.add((long) ' ');
        int int46 = mutablePeriod43.getDays();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.millis();
        mutablePeriod43.add(durationFieldType47, (int) (byte) 1);
        boolean boolean50 = mutablePeriod34.equals((java.lang.Object) durationFieldType47);
        mutablePeriod23.set(durationFieldType47, 340);
        int int53 = periodType16.indexOf(durationFieldType47);
        int int54 = mutablePeriod4.get(durationFieldType47);
        mutablePeriod4.addSeconds((int) (byte) 10);
        int int57 = mutablePeriod4.getWeeks();
        boolean boolean59 = mutablePeriod4.equals((java.lang.Object) "2022-02-11T09:42:19.519Z");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 10, 10, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '#', (long) 2, periodType2);
        mutablePeriod3.setPeriod(0L, (long) 100);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Period period21 = mutablePeriod10.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        boolean boolean29 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        java.lang.String str34 = duration31.toString();
        boolean boolean35 = duration26.equals((java.lang.Object) str34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays(100000L);
        boolean boolean38 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration49 = duration40.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean52 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration51);
        java.lang.String str53 = duration51.toString();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Duration duration61 = duration59.plus(readableDuration60);
        org.joda.time.Duration duration63 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration59, (int) (byte) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration63.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Interval interval67 = duration63.toIntervalTo(readableInstant66);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getEnd();
        java.lang.String str70 = dateTime69.toString();
        org.joda.time.Period period71 = duration55.toPeriodTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period72 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean75 = periodType73.equals((java.lang.Object) false);
        java.lang.String str76 = periodType73.getName();
        boolean boolean78 = periodType73.equals((java.lang.Object) (-3));
        org.joda.time.Period period79 = duration37.toPeriodTo((org.joda.time.ReadableInstant) dateTime69, periodType73);
        org.joda.time.Duration duration80 = period21.toDurationTo((org.joda.time.ReadableInstant) dateTime69);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT126000S" + "'", str34, "PT126000S");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT6000S" + "'", str53, "PT6000S");
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-11T09:43:12.557Z" + "'", str70, "2022-02-11T09:43:12.557Z");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "YearWeekDay" + "'", str76, "YearWeekDay");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(duration80);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.Chronology chronology16 = chronology13.withUTC();
        java.lang.String str17 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str17, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        long long6 = interval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Interval interval19 = interval18.toInterval();
        long long20 = interval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        boolean boolean35 = interval19.isBefore((org.joda.time.ReadableInterval) interval32);
        java.lang.String str36 = interval32.toString();
        boolean boolean37 = interval5.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Interval interval38 = interval32.toInterval();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        boolean boolean55 = duration42.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration48.toPeriod(periodType56, chronology57);
        org.joda.time.PeriodType periodType59 = periodType56.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.months();
        int int61 = periodType59.indexOf(durationFieldType60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology64);
        int int66 = mutablePeriod65.getWeeks();
        java.lang.Object obj67 = mutablePeriod65.clone();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration76.toPeriod(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        org.joda.time.Period period81 = interval80.toPeriod();
        org.joda.time.Chronology chronology82 = interval80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.hourOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.weekyearOfCentury();
        org.joda.time.DurationField durationField85 = chronology82.days();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.yearOfCentury();
        org.joda.time.DurationField durationField87 = chronology82.halfdays();
        mutablePeriod65.add((long) (-52), chronology82);
        org.joda.time.DateTimeField dateTimeField89 = chronology82.yearOfEra();
        org.joda.time.DateTimeField dateTimeField90 = chronology82.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((java.lang.Object) interval32, periodType59, chronology82);
        org.joda.time.Interval interval92 = interval32.toInterval();
        org.joda.time.DateTime dateTime93 = interval92.getStart();
        java.lang.String str94 = dateTime93.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 60000L + "'", long6 == 60000L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1260100000L + "'", long20 == 1260100000L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-01-27T19:41:32.627Z/2022-02-11T09:43:12.627Z" + "'", str36, "2022-01-27T19:41:32.627Z/2022-02-11T09:43:12.627Z");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "PT0.035S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "PT0.035S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "PT0.035S");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2022-01-27T19:41:32.627Z" + "'", str94, "2022-01-27T19:41:32.627Z");
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-01-27T19:35:43.553Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(92, 16, 36, 102);
        mutablePeriod4.setYears(712);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType25.withWeeksRemoved();
        org.joda.time.PeriodType periodType30 = periodType25.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(100L, periodType25);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        boolean boolean48 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration41.toPeriod(periodType49, chronology50);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutablePeriod56.setPeriod(readablePeriod57);
        mutablePeriod56.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.days();
        int int62 = mutablePeriod56.get(durationFieldType61);
        boolean boolean63 = periodType49.isSupported(durationFieldType61);
        boolean boolean64 = mutablePeriod31.isSupported(durationFieldType61);
        java.lang.String str65 = durationFieldType61.getName();
        int int66 = mutablePeriod4.get(durationFieldType61);
        mutablePeriod4.setPeriod(1644572160956L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "days" + "'", str65, "days");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        java.lang.String str23 = chronology21.toString();
        org.joda.time.DurationField durationField24 = chronology21.hours();
        org.joda.time.DurationField durationField25 = chronology21.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.dayOfWeek();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str23, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((int) (byte) 100, 100, 32, (int) (byte) 100, 1, 0, 100, 5);
        mutablePeriod33.setYears(14);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod48.addHours(0);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration54, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.hourOfHalfday();
        mutablePeriod33.setPeriod(1644572126356L, (long) (short) 1, chronology68);
        org.joda.time.DateTimeField dateTimeField72 = chronology68.yearOfCentury();
        org.joda.time.DurationField durationField73 = chronology68.millis();
        org.joda.time.DateTimeField dateTimeField74 = chronology68.minuteOfHour();
        org.joda.time.DurationField durationField75 = chronology68.halfdays();
        org.joda.time.DateTimeField dateTimeField76 = chronology68.clockhourOfDay();
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology28 = interval12.getChronology();
        java.lang.String str29 = interval12.toString();
        org.joda.time.DateTime dateTime30 = interval12.getStart();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-27T19:41:32.780Z/2022-02-11T09:43:12.780Z" + "'", str29, "2022-01-27T19:41:32.780Z/2022-02-11T09:43:12.780Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getEnd();
        org.joda.time.Duration duration26 = interval23.toDuration();
        boolean boolean27 = interval11.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime28 = interval23.getStart();
        org.joda.time.Duration duration30 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        org.joda.time.Duration duration45 = interval42.toDuration();
        org.joda.time.DateTime dateTime46 = interval42.getStart();
        org.joda.time.Period period47 = duration30.toPeriodTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        boolean boolean60 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration57);
        long long61 = duration57.getStandardSeconds();
        int int62 = duration30.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration64 = duration30.toDuration();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.monthOfYear();
        org.joda.time.DurationField durationField81 = chronology78.eras();
        org.joda.time.DateTimeField dateTimeField82 = chronology78.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField83 = chronology78.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((java.lang.Object) duration30, chronology78);
        org.joda.time.Duration duration87 = duration30.withDurationAdded((-1260099992L), 3);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1260100L + "'", long61 == 1260100L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(duration87);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1644572274174L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        mutablePeriod7.setDays(100);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        mutablePeriod31.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod31.toMutablePeriod();
        int[] intArray35 = mutablePeriod31.getValues();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        boolean boolean52 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration45.toPeriod(periodType53, chronology54);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        mutablePeriod60.setPeriod(readablePeriod61);
        mutablePeriod60.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.days();
        int int66 = mutablePeriod60.get(durationFieldType65);
        boolean boolean67 = periodType53.isSupported(durationFieldType65);
        mutablePeriod31.set(durationFieldType65, 8);
        int int70 = mutablePeriod7.indexOf(durationFieldType65);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        java.lang.String str75 = duration72.toString();
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean78 = periodType76.equals((java.lang.Object) false);
        org.joda.time.Period period79 = duration72.toPeriod(periodType76);
        org.joda.time.PeriodType periodType80 = periodType76.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(periodType80);
        org.joda.time.MutablePeriod mutablePeriod82 = mutablePeriod81.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod83 = mutablePeriod82.toMutablePeriod();
        int int84 = mutablePeriod83.getSeconds();
        int[] intArray85 = mutablePeriod83.getValues();
        mutablePeriod83.addWeeks(4);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod83);
        org.joda.time.Period period89 = mutablePeriod7.toPeriod();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT126000S" + "'", str75, "PT126000S");
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(mutablePeriod82);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.Hours hours3 = duration1.toStandardHours();
        long long4 = duration1.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 600L + "'", long2 == 600L);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 36000000L + "'", long4 == 36000000L);
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        boolean boolean43 = interval28.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        java.lang.String str58 = dateTime57.toString();
        boolean boolean59 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime42.getZone();
        org.joda.time.Period period62 = duration13.toPeriodTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Period period63 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        java.lang.Object obj64 = null;
        boolean boolean65 = dateTime42.equals(obj64);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime42.getZone();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-11T09:43:12.986Z" + "'", str58, "2022-02-11T09:43:12.986Z");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1631L), 1644572145724L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod7.setMillis((int) (short) 0);
        mutablePeriod7.addMonths((int) (short) 1);
        mutablePeriod7.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutablePeriod18.setPeriod(readablePeriod19);
        mutablePeriod18.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.days();
        int int24 = mutablePeriod18.get(durationFieldType23);
        mutablePeriod7.add(durationFieldType23, (int) '#');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod7.copy();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.weeks();
        int int39 = mutablePeriod37.get(durationFieldType38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.secondOfMinute();
        org.joda.time.DurationField durationField58 = chronology53.weekyears();
        org.joda.time.DurationField durationField59 = chronology53.millis();
        boolean boolean60 = durationFieldType38.isSupported(chronology53);
        org.joda.time.DateTimeField dateTimeField61 = chronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField62 = chronology53.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = chronology53.era();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, chronology53);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(261L, chronology53);
        mutablePeriod65.setPeriod(98674328890860L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Hours hours64 = duration63.toStandardHours();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Duration duration66 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant65, (org.joda.time.ReadableDuration) duration66, periodType67);
        org.joda.time.Duration duration70 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration66, 10);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration66);
        int[] intArray72 = mutablePeriod71.getValues();
        mutablePeriod71.setPeriod((int) (short) 10, (-53), (int) (short) 0, (int) (byte) 1, (int) '4', 100, (int) (short) 100, (int) 'a');
        mutablePeriod71.setWeeks((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(hours64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(periodType21);
        java.lang.String str23 = periodType21.getName();
        org.joda.time.PeriodType periodType24 = periodType21.withHoursRemoved();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "StandardNoWeeksNoMinutes" + "'", str23, "StandardNoWeeksNoMinutes");
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1644572119917L, periodType1);
        org.joda.time.PeriodType periodType4 = periodType1.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = periodType1.getFieldType(8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = duration31.minus((long) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        int int55 = mutablePeriod54.getYears();
        java.lang.String str56 = mutablePeriod54.toString();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        mutablePeriod61.setPeriod(readablePeriod62);
        mutablePeriod61.addWeeks((int) (byte) 10);
        mutablePeriod54.add((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(readableInstant67, readableInstant68);
        boolean boolean70 = mutablePeriod61.equals((java.lang.Object) readableInstant67);
        org.joda.time.Period period71 = mutablePeriod61.toPeriod();
        org.joda.time.Period period72 = mutablePeriod61.toPeriod();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Duration duration74 = mutablePeriod61.toDurationTo(readableInstant73);
        org.joda.time.Duration duration76 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration74, 3);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology79);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology83);
        mutablePeriod80.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod84);
        mutablePeriod84.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod95 = mutablePeriod84.copy();
        org.joda.time.ReadableInstant readableInstant96 = null;
        org.joda.time.Duration duration97 = mutablePeriod84.toDurationTo(readableInstant96);
        int int98 = duration76.compareTo((org.joda.time.ReadableDuration) duration97);
        org.joda.time.Period period99 = duration76.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.052S" + "'", str56, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(mutablePeriod95);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        mutablePeriod1.add(10, (int) (short) 0, (int) (short) 10, (int) '4', (int) 'a', (-1), 8, 8);
        mutablePeriod1.addHours(712);
        mutablePeriod1.addYears(48);
        mutablePeriod1.setHours((-35));
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter40.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter42 = periodFormatter40.getPrinter();
        org.joda.time.PeriodType periodType43 = periodFormatter40.getParseType();
        org.joda.time.PeriodType periodType44 = periodType43.withYearsRemoved();
        org.joda.time.PeriodType periodType45 = periodType43.withYearsRemoved();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNull(periodPrinter42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Days days6 = duration5.toStandardDays();
        boolean boolean8 = duration5.equals((java.lang.Object) (short) 100);
        org.joda.time.Period period9 = duration5.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = interval29.isBefore(readableInterval32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval32);
        int int35 = mutablePeriod34.getHours();
        mutablePeriod34.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray47 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 1, (long) 3);
        org.joda.time.DateTimeField dateTimeField48 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField49 = chronology17.millis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.withMillis(126000000L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        int int8 = duration3.compareTo((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) duration10, chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod18.addHours(0);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        org.joda.time.Period period37 = interval36.toPeriod();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration24, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.halfdayOfDay();
        org.joda.time.DurationField durationField41 = durationFieldType16.getField(chronology38);
        org.joda.time.Period period42 = duration10.toPeriod(periodType15, chronology38);
        org.joda.time.Duration duration45 = duration10.withDurationAdded(1644572121340L, (int) (byte) 10);
        boolean boolean46 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = duration3.plus(137L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        boolean boolean65 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Minutes minutes66 = duration52.toStandardMinutes();
        long long67 = duration52.getStandardMinutes();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(0L);
        long long70 = duration69.getMillis();
        boolean boolean71 = duration52.isEqual((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration72 = duration52.toDuration();
        long long73 = duration72.getStandardDays();
        int int74 = duration48.compareTo((org.joda.time.ReadableDuration) duration72);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2100L + "'", long67 == 2100L);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration13 = interval11.toDuration();
        long long14 = interval11.toDurationMillis();
        org.joda.time.Period period15 = interval11.toPeriod();
        org.joda.time.DateTime dateTime16 = interval11.getEnd();
        org.joda.time.Period period17 = interval11.toPeriod();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((java.lang.Object) duration19, chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        long long24 = interval23.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = interval23.contains(readableInstant25);
        boolean boolean27 = interval11.contains((org.joda.time.ReadableInterval) interval23);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, periodType29);
        org.joda.time.PeriodType periodType31 = periodType29.withMonthsRemoved();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        int[] intArray61 = chronology45.get((org.joda.time.ReadablePeriod) mutablePeriod54, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField62 = chronology45.weekOfWeekyear();
        boolean boolean63 = periodType29.equals((java.lang.Object) chronology45);
        org.joda.time.Period period64 = interval23.toPeriod(periodType29);
        org.joda.time.Duration duration65 = interval23.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1260100000L + "'", long14 == 1260100000L);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration65);
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology15.halfdays();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1644572120402L, (long) (byte) 10, chronology15);
        org.joda.time.DateTimeField dateTimeField22 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = chronology15.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.yearOfCentury();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.format.PeriodParser periodParser41 = periodFormatter40.getParser();
        java.util.Locale locale42 = periodFormatter40.getLocale();
        java.util.Locale locale43 = periodFormatter40.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter44 = periodFormatter40.getPrinter();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(periodParser41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNull(periodPrinter44);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getEnd();
        org.joda.time.Duration duration26 = interval23.toDuration();
        boolean boolean27 = interval11.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology28 = interval23.getChronology();
        org.joda.time.DateTime dateTime29 = interval23.getEnd();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        org.joda.time.Duration duration56 = interval53.toDuration();
        boolean boolean57 = interval41.overlaps((org.joda.time.ReadableInterval) interval53);
        long long58 = interval53.getStartMillis();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        boolean boolean71 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration79.toPeriod(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Interval interval83 = duration79.toIntervalTo(readableInstant82);
        org.joda.time.Interval interval84 = interval83.toInterval();
        org.joda.time.DateTime dateTime85 = interval83.getEnd();
        org.joda.time.Interval interval86 = duration64.toIntervalFrom((org.joda.time.ReadableInstant) dateTime85);
        java.lang.String str87 = dateTime85.toString();
        boolean boolean88 = interval53.contains((org.joda.time.ReadableInstant) dateTime85);
        int int89 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int91 = dateTime29.get(dateTimeFieldType90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1643312493433L + "'", long58 == 1643312493433L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval86);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022-02-11T09:43:13.433Z" + "'", str87, "2022-02-11T09:43:13.433Z");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology15.getZone();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.add((long) ' ');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod4.setPeriod((long) (short) 0, chronology21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Period period35 = interval34.toPeriod();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.secondOfMinute();
        boolean boolean41 = mutablePeriod4.equals((java.lang.Object) chronology36);
        org.joda.time.DurationField durationField42 = durationFieldType0.getField(chronology36);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(60000L, 0L);
        int int46 = mutablePeriod45.getHours();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        boolean boolean63 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration56.toPeriod(periodType64, chronology65);
        org.joda.time.PeriodType periodType67 = periodType64.withYearsRemoved();
        org.joda.time.PeriodType periodType68 = periodType64.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean70 = periodType64.isSupported(durationFieldType69);
        mutablePeriod45.set(durationFieldType69, (int) (byte) 0);
        mutablePeriod45.add((int) (short) 1, 0, 102, 456825, 80, 2, 3, 6);
        mutablePeriod45.setYears(456825);
        mutablePeriod45.setMonths((int) 'a');
        int[] intArray87 = chronology36.get((org.joda.time.ReadablePeriod) mutablePeriod45, 1644572140601L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 2719, 1, 9, 35, 40, 601]");
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572119917L);
        mutablePeriod1.addHours((int) (short) 0);
        org.joda.time.Period period4 = mutablePeriod1.toPeriod();
        org.joda.time.PeriodType periodType5 = period4.getPeriodType();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getEnd();
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        boolean boolean80 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration73.toPeriod(periodType81, chronology82);
        org.joda.time.PeriodType periodType84 = periodType81.withYearsRemoved();
        org.joda.time.PeriodType periodType85 = periodType84.withDaysRemoved();
        org.joda.time.PeriodType periodType86 = periodType85.withSecondsRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime62, periodType86);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod88.addMinutes((-42));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-11T09:43:13.541Z" + "'", str63, "2022-02-11T09:43:13.541Z");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        boolean boolean5 = periodFormatter3.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter3.getPrinter();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter3.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.format.PeriodParser periodParser12 = periodFormatter11.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:45.862Z", periodFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNull(periodParser12);
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) duration7, chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        boolean boolean12 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) duration14, chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = mutablePeriod16.toDurationFrom(readableInstant17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        boolean boolean25 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getEnd();
        org.joda.time.Duration duration40 = interval37.toDuration();
        boolean boolean41 = duration18.isEqual((org.joda.time.ReadableDuration) duration40);
        boolean boolean42 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration46 = duration44.plus(126000L);
        org.joda.time.Duration duration48 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) -1);
        long long49 = duration46.getStandardSeconds();
        org.joda.time.Days days50 = duration46.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 6126L + "'", long49 == 6126L);
        org.junit.Assert.assertNotNull(days50);
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod18.toMutablePeriod();
        mutablePeriod18.setPeriod((int) (byte) 0, 100, (-3), 5, 52, 3, (int) (byte) 0, 0);
        mutablePeriod18.setValue(7, (int) (short) 100);
        int int32 = mutablePeriod18.getSeconds();
        mutablePeriod18.addHours((int) (byte) 10);
        mutablePeriod18.addWeeks(117);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.year();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(6126L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod22.setMillis((int) (short) 0);
        mutablePeriod22.addMonths((int) (short) 1);
        mutablePeriod22.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        int int39 = mutablePeriod33.get(durationFieldType38);
        mutablePeriod22.add(durationFieldType38, (int) '#');
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.MutablePeriod mutablePeriod52 = mutablePeriod22.copy();
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        mutablePeriod18.setPeriod(100, (int) (byte) 10, (int) '#', 5, 10, (int) '4', 1, (int) (byte) 1);
        mutablePeriod18.setMonths(56);
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = mutablePeriod18.getFieldTypes();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.setMinutes((int) (short) 0);
        mutablePeriod3.addYears(0);
        java.lang.String str13 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod3.copy();
        int int15 = mutablePeriod14.getDays();
        mutablePeriod14.addYears(34);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0.042S" + "'", str13, "PT0.042S");
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology15);
        org.joda.time.DurationField durationField21 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology15.days();
        org.joda.time.DurationField durationField24 = chronology15.days();
        org.joda.time.DurationField durationField25 = chronology15.weekyears();
        java.lang.String str26 = chronology15.toString();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str26, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 8);
        org.joda.time.Duration duration4 = duration1.minus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod14.copy();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = mutablePeriod14.toDurationTo(readableInstant26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology30 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration29, chronology30);
        boolean boolean32 = duration6.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getEnd();
        boolean boolean62 = interval47.contains((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.DateTime dateTime76 = interval74.getEnd();
        java.lang.String str77 = dateTime76.toString();
        boolean boolean78 = dateTime61.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration79 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime61.getZone();
        boolean boolean82 = dateTime61.equals((java.lang.Object) "PT60S");
        org.joda.time.Period period83 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration85 = duration29.plus((long) '#');
        org.joda.time.Duration duration87 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration29, 0);
        org.joda.time.Hours hours88 = duration29.toStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-11T09:43:13.797Z" + "'", str77, "2022-02-11T09:43:13.797Z");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(hours88);
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        int int13 = mutablePeriod12.getYears();
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod12.copy();
        mutablePeriod14.setYears((int) (short) 10);
        mutablePeriod14.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        mutablePeriod14.setPeriod((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.DateTime dateTime66 = interval64.getEnd();
        boolean boolean67 = interval52.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval38);
        org.joda.time.MutablePeriod mutablePeriod70 = mutablePeriod3.copy();
        org.joda.time.MutablePeriod mutablePeriod71 = mutablePeriod3.toMutablePeriod();
        mutablePeriod71.setPeriod(32, 92, 112, 52, (int) '4', 18, 92, 51);
        mutablePeriod71.addMillis(18);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(mutablePeriod71);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) '4', 0, (int) (byte) 10, 1, (int) (short) 0, (int) (short) 0, (int) (short) 10, 4);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod8.add(durationFieldType9, 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.Object obj21 = mutablePeriod19.clone();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((java.lang.Object) duration23, chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        mutablePeriod19.add((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Interval interval29 = interval27.toInterval();
        long long30 = interval29.getEndMillis();
        boolean boolean32 = interval29.equals((java.lang.Object) 34L);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTime dateTime34 = interval29.getEnd();
        org.joda.time.Duration duration35 = interval29.toDuration();
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572593878L + "'", long30 == 1644572593878L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        boolean boolean32 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration25.toPeriod(periodType33, chronology34);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutablePeriod40.setPeriod(readablePeriod41);
        mutablePeriod40.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.days();
        int int46 = mutablePeriod40.get(durationFieldType45);
        boolean boolean47 = periodType33.isSupported(durationFieldType45);
        java.lang.String str48 = periodType33.getName();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType33, chronology49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((java.lang.Object) duration52, chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        long long57 = interval56.toDurationMillis();
        mutablePeriod50.setPeriod((org.joda.time.ReadableInterval) interval56);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Period period60 = mutablePeriod3.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod61 = mutablePeriod3.copy();
        org.joda.time.PeriodType periodType62 = mutablePeriod61.getPeriodType();
        mutablePeriod61.add(1644572359794L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Years" + "'", str48, "Years");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(periodType62);
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.PeriodType periodType2 = periodType0.withWeeksRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.Object obj21 = mutablePeriod19.clone();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((java.lang.Object) duration23, chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        mutablePeriod19.add((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        mutablePeriod11.setPeriod((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        int int63 = periodType48.size();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.weeks();
        int int65 = periodType48.indexOf(durationFieldType64);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod67.addHours(0);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Period period86 = interval85.toPeriod();
        org.joda.time.Chronology chronology87 = interval85.getChronology();
        mutablePeriod67.setPeriod((org.joda.time.ReadableDuration) duration73, chronology87);
        org.joda.time.DurationField durationField89 = durationFieldType64.getField(chronology87);
        boolean boolean90 = mutablePeriod11.isSupported(durationFieldType64);
        mutablePeriod11.setWeeks(0);
        mutablePeriod11.setWeeks(943);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((-42), 49, 92, (-1), (-3), (-3), 658, (int) (byte) 1, periodType8);
        mutablePeriod9.addMonths(0);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter38.getLocale();
        boolean boolean42 = periodFormatter38.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter43 = periodFormatter38.getPrinter();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod47.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod50 = mutablePeriod47.toMutablePeriod();
        int[] intArray51 = mutablePeriod47.getValues();
        mutablePeriod47.addHours(0);
        mutablePeriod47.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray56 = mutablePeriod47.getFieldTypes();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.forFields(durationFieldTypeArray56);
        org.joda.time.DurationFieldType durationFieldType59 = periodType57.getFieldType(4);
        org.joda.time.format.PeriodFormatter periodFormatter60 = periodFormatter38.withParseType(periodType57);
        java.util.Locale locale61 = periodFormatter38.getLocale();
        org.joda.time.format.PeriodParser periodParser62 = periodFormatter38.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter63 = periodFormatter38.getPrinter();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(periodPrinter43);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(periodFormatter60);
        org.junit.Assert.assertNull(locale61);
        org.junit.Assert.assertNull(periodParser62);
        org.junit.Assert.assertNull(periodPrinter63);
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.add((long) ' ');
        mutablePeriod14.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod14.isSupported(durationFieldType28);
        boolean boolean31 = mutablePeriod3.isSupported(durationFieldType28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = mutablePeriod3.toDurationTo(readableInstant32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        boolean boolean61 = interval46.contains((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        org.joda.time.Duration duration88 = interval85.toDuration();
        boolean boolean89 = interval73.overlaps((org.joda.time.ReadableInterval) interval85);
        boolean boolean90 = interval46.isBefore((org.joda.time.ReadableInterval) interval73);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration92 = interval46.toDuration();
        org.joda.time.DateTime dateTime93 = interval46.getStart();
        long long94 = interval46.getStartMillis();
        java.lang.String str95 = interval46.toString();
        org.joda.time.Period period96 = interval46.toPeriod();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(dateTime93);
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1643312494037L + "'", long94 == 1643312494037L);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-01-27T19:41:34.037Z/2022-02-11T09:43:14.037Z" + "'", str95, "2022-01-27T19:41:34.037Z/2022-02-11T09:43:14.037Z");
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.setMinutes((int) ' ');
        mutablePeriod4.setPeriod((long) (short) -1, (long) (short) 1);
        java.lang.String str12 = mutablePeriod4.toString();
        mutablePeriod4.addMonths(18);
        mutablePeriod4.addDays((-35));
        mutablePeriod4.add(1644572221777L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.002S" + "'", str12, "PT0.002S");
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.minuteOfDay();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:37:24.548Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:37:24.548Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '#', periodType1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        boolean boolean11 = duration4.isEqual((org.joda.time.ReadableDuration) duration8);
        boolean boolean12 = mutablePeriod2.equals((java.lang.Object) duration8);
        mutablePeriod2.addMinutes((int) (short) 100);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = periodType18.isSupported(durationFieldType30);
        org.joda.time.PeriodType periodType33 = periodType18.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(60000L, periodType18);
        int int35 = mutablePeriod34.getDays();
        mutablePeriod34.clear();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        long long6 = interval5.getEndMillis();
        org.joda.time.Interval interval7 = interval5.toInterval();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) duration9, chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        long long14 = interval13.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = interval13.contains(readableInstant15);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.Period period30 = interval28.toPeriod();
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = interval28.contains(readableInterval31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        java.lang.Object obj42 = mutablePeriod40.clone();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((java.lang.Object) duration44, chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        mutablePeriod40.add((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        mutablePeriod54.setMillis((int) (short) 0);
        mutablePeriod54.addMonths((int) (short) 1);
        int int59 = mutablePeriod54.size();
        int int60 = mutablePeriod54.getWeeks();
        mutablePeriod54.setYears(8);
        mutablePeriod54.addSeconds(1);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        mutablePeriod54.add((org.joda.time.ReadableInterval) interval76);
        boolean boolean80 = interval48.contains((org.joda.time.ReadableInterval) interval76);
        boolean boolean81 = interval28.isBefore((org.joda.time.ReadableInterval) interval76);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.time();
        int int83 = periodType82.size();
        org.joda.time.Period period84 = interval76.toPeriod(periodType82);
        org.joda.time.Period period85 = interval13.toPeriod(periodType82);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(periodType82);
        org.joda.time.Period period87 = interval5.toPeriod(periodType82);
        int int88 = period87.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572594191L + "'", long6 == 1644572594191L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 60000L + "'", long14 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        boolean boolean22 = duration20.isLongerThan(readableDuration21);
        long long23 = duration20.getStandardHours();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 7801L + "'", long23 == 7801L);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        mutablePeriod4.addDays(10);
        mutablePeriod4.setMinutes(0);
        int[] intArray14 = mutablePeriod4.getValues();
        int int15 = mutablePeriod4.getSeconds();
        mutablePeriod4.addWeeks((-27409536));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 10, 10, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.setMillis((int) (short) 0);
        mutablePeriod4.addMonths((int) (short) 1);
        mutablePeriod4.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod4.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.centuryOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology40);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        mutablePeriod41.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod52 = mutablePeriod41.copy();
        int[] intArray55 = chronology28.get((org.joda.time.ReadablePeriod) mutablePeriod52, 1644572145972L, (long) 80);
        org.joda.time.DurationField durationField56 = chronology28.hours();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1643312070594L, (long) 1, chronology28);
        org.joda.time.DateTimeField dateTimeField58 = chronology28.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((-6577658349201L), periodType12, chronology28);
        org.joda.time.PeriodType periodType60 = mutablePeriod59.getPeriodType();
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-52, -1, -1, -3, -9, -35, -45, -892]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(periodType60);
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutablePeriod6.setPeriod(readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        int int13 = mutablePeriod12.getYears();
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod12.copy();
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.PeriodType periodType16 = mutablePeriod12.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1644572399619L, 1644572341004L, periodType16);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        boolean boolean4 = mutablePeriod2.equals((java.lang.Object) "PT0S");
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((java.lang.Object) duration6, chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Interval interval10 = duration6.toIntervalTo(readableInstant9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Period period23 = interval22.toPeriod();
        boolean boolean24 = interval10.overlaps((org.joda.time.ReadableInterval) interval22);
        java.lang.String str25 = interval22.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        mutablePeriod29.setMillis((int) (short) 0);
        mutablePeriod29.addMonths((int) (short) 1);
        mutablePeriod29.setMinutes((int) (byte) 1);
        mutablePeriod29.setYears((int) (short) 100);
        mutablePeriod29.addDays(1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        java.lang.Object obj49 = mutablePeriod47.clone();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) duration51, chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        mutablePeriod47.add((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTime dateTime57 = interval55.getStart();
        org.joda.time.Duration duration58 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Interval interval88 = interval87.toInterval();
        org.joda.time.DateTime dateTime89 = interval87.getEnd();
        boolean boolean90 = interval75.contains((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Duration duration91 = mutablePeriod62.toDurationTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Period period92 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean93 = interval22.contains((org.joda.time.ReadableInstant) dateTime89);
        java.lang.String str94 = dateTime89.toString();
        org.joda.time.Duration duration95 = mutablePeriod2.toDurationTo((org.joda.time.ReadableInstant) dateTime89);
        mutablePeriod2.setMonths(0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-01-27T19:41:34.320Z/2022-02-11T09:43:14.320Z" + "'", str25, "2022-01-27T19:41:34.320Z/2022-02-11T09:43:14.320Z");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2022-02-11T09:43:14.320Z" + "'", str94, "2022-02-11T09:43:14.320Z");
        org.junit.Assert.assertNotNull(duration95);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours(10L);
        long long5 = duration4.getMillis();
        org.joda.time.Duration duration6 = duration1.minus((org.joda.time.ReadableDuration) duration4);
        java.lang.String str7 = duration1.toString();
        long long8 = duration1.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36000000L + "'", long2 == 36000000L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 36000000L + "'", long5 == 36000000L);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT36000S" + "'", str7, "PT36000S");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 36000000L + "'", long8 == 36000000L);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(100000L);
        org.joda.time.Duration duration3 = duration1.plus(1644572122254L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration7 = duration5.plus(126000L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutablePeriod30.setPeriod(readablePeriod31);
        mutablePeriod30.addWeeks((int) (byte) 10);
        int[] intArray37 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod30, (long) '#', (-1L));
        org.joda.time.DurationField durationField38 = chronology21.minutes();
        org.joda.time.DurationField durationField39 = chronology21.centuries();
        org.joda.time.DateTimeField dateTimeField40 = chronology21.minuteOfHour();
        org.joda.time.Period period41 = duration7.toPeriod(chronology21);
        org.joda.time.Duration duration42 = duration7.toDuration();
        org.joda.time.Duration duration44 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration42, 137);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours(10L);
        long long5 = duration4.getMillis();
        org.joda.time.Duration duration6 = duration1.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.Duration duration9 = duration7.withMillis(126000053L);
        long long10 = duration9.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36000000L + "'", long2 == 36000000L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 36000000L + "'", long5 == 36000000L);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray40 = mutablePeriod7.getValues();
        org.joda.time.Period period41 = mutablePeriod7.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod7.toMutablePeriod();
        org.joda.time.Duration duration44 = new org.joda.time.Duration(1643312209993L);
        mutablePeriod42.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        mutablePeriod50.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        mutablePeriod50.clear();
        mutablePeriod50.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType60 = null;
        boolean boolean61 = mutablePeriod50.isSupported(durationFieldType60);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Period period75 = interval74.toPeriod();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.hourOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.weekyearOfCentury();
        mutablePeriod50.add((long) (short) 100, chronology76);
        org.joda.time.DurationField durationField80 = chronology76.halfdays();
        org.joda.time.DateTimeField dateTimeField81 = chronology76.hourOfHalfday();
        org.joda.time.DurationField durationField82 = chronology76.days();
        long long86 = chronology76.add((long) (byte) 0, (long) '4', (int) '4');
        org.joda.time.DurationField durationField87 = chronology76.days();
        org.joda.time.DateTimeZone dateTimeZone88 = chronology76.getZone();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(1643312124534L, chronology76);
        org.joda.time.Period period90 = duration44.toPeriod(chronology76);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 42, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 2704L + "'", long86 == 2704L);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(period90);
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, periodType1, chronology17);
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod18.toMutablePeriod();
        mutablePeriod19.addWeeks(10);
        mutablePeriod19.setMillis(0);
        mutablePeriod19.setDays((-20));
        int int26 = mutablePeriod19.getSeconds();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        boolean boolean7 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType8 = periodFormatter2.getParseType();
        java.util.Locale locale9 = periodFormatter2.getLocale();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(periodType8);
        org.junit.Assert.assertNull(locale9);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.setMillis((int) (short) 0);
        mutablePeriod34.addMonths((int) (short) 1);
        mutablePeriod34.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray41 = mutablePeriod34.getFieldTypes();
        mutablePeriod34.addMonths(0);
        org.joda.time.Period period44 = mutablePeriod34.toPeriod();
        int[] intArray46 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod34, 126000L);
        java.lang.String str47 = chronology13.toString();
        org.joda.time.ReadablePartial readablePartial48 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long50 = chronology13.set(readablePartial48, 1644572294255L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 2, 6, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str47, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField20 = chronology15.months();
        boolean boolean21 = durationFieldType0.isSupported(chronology15);
        org.joda.time.DurationField durationField22 = chronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.hourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology15.weekyears();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(184, 48, 34, 7, (-28), 0, 9, 80);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.add((long) ' ');
        int int15 = mutablePeriod12.getDays();
        mutablePeriod12.setMillis((int) (byte) -1);
        mutablePeriod12.setYears(4);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object) duration21, chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Period period38 = interval37.toPeriod();
        boolean boolean39 = interval25.overlaps((org.joda.time.ReadableInterval) interval37);
        java.lang.String str40 = interval37.toString();
        org.joda.time.MutableInterval mutableInterval41 = interval37.toMutableInterval();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.Period period56 = interval53.toPeriod();
        boolean boolean57 = interval37.isAfter((org.joda.time.ReadableInterval) interval53);
        mutablePeriod12.add((org.joda.time.ReadableInterval) interval53);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        org.joda.time.Period period61 = interval53.toPeriod(periodType60);
        boolean boolean62 = mutablePeriod8.equals((java.lang.Object) interval53);
        org.joda.time.Period period63 = interval53.toPeriod();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-01-27T19:41:34.553Z/2022-02-11T09:43:14.553Z" + "'", str40, "2022-01-27T19:41:34.553Z/2022-02-11T09:43:14.553Z");
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period63);
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1644572538063L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        long long13 = interval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getEnd();
        java.lang.String str28 = dateTime27.toString();
        boolean boolean29 = interval12.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval30 = interval12.toMutableInterval();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = mutablePeriod34.get(durationFieldType37);
        int int39 = mutablePeriod34.size();
        mutablePeriod34.addWeeks((int) (short) 0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Duration duration75 = duration73.plus(readableDuration74);
        org.joda.time.Duration duration77 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) (byte) 10);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = duration77.toPeriod(chronology78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Interval interval81 = duration77.toIntervalTo(readableInstant80);
        org.joda.time.Interval interval82 = interval81.toInterval();
        org.joda.time.DateTime dateTime83 = interval81.getEnd();
        boolean boolean84 = interval69.contains((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = interval69.getStart();
        java.lang.String str86 = dateTime85.toString();
        boolean boolean87 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Duration duration88 = mutablePeriod34.toDurationTo((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Chronology chronology89 = dateTime85.getChronology();
        boolean boolean90 = interval12.isBefore((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval91 = interval12.toMutableInterval();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1260100000L + "'", long13 == 1260100000L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:43:14.638Z" + "'", str28, "2022-02-11T09:43:14.638Z");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:43:14.638Z" + "'", str56, "2022-02-11T09:43:14.638Z");
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022-01-27T19:41:34.638Z" + "'", str86, "2022-01-27T19:41:34.638Z");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(mutableInterval91);
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        mutablePeriod4.addDays((int) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.Object obj26 = mutablePeriod24.clone();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.Chronology chronology35 = interval32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        mutablePeriod4.setPeriod((long) 100, (long) 3, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutablePeriod20.setPeriod(readablePeriod21);
        mutablePeriod20.addWeeks((int) (byte) 10);
        int int25 = mutablePeriod20.getMonths();
        mutablePeriod20.addDays(10);
        mutablePeriod20.setWeeks((int) (byte) -1);
        int[] intArray32 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod20, (long) 100, 10L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        int int37 = mutablePeriod36.getMinutes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology40);
        mutablePeriod41.setMillis((int) (short) 0);
        mutablePeriod41.addMonths((int) (short) 1);
        mutablePeriod41.setMinutes((int) (byte) 1);
        mutablePeriod41.addYears(1);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        boolean boolean56 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration53);
        mutablePeriod41.add((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int61 = duration51.compareTo((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getEnd();
        org.joda.time.Period period76 = duration60.toPeriodTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Duration duration77 = mutablePeriod36.toDurationTo((org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str78 = dateTime75.toString();
        org.joda.time.Duration duration79 = mutablePeriod20.toDurationTo((org.joda.time.ReadableInstant) dateTime75);
        mutablePeriod20.setDays(18);
        int int82 = mutablePeriod20.getWeeks();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, -90]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(duration77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-11T09:43:14.693Z" + "'", str78, "2022-02-11T09:43:14.693Z");
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.weekyearOfCentury();
        org.joda.time.DurationField durationField25 = chronology20.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology20.eras();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (-42), (-52), (-19));
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        int int9 = mutablePeriod8.getYears();
        java.lang.String str10 = mutablePeriod8.toString();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutablePeriod15.setPeriod(readablePeriod16);
        mutablePeriod15.addWeeks((int) (byte) 10);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod15);
        boolean boolean22 = mutablePeriod8.equals((java.lang.Object) (-1.0f));
        mutablePeriod8.setMinutes((int) (short) 1);
        int int25 = mutablePeriod8.getHours();
        org.joda.time.Period period26 = mutablePeriod8.toPeriod();
        mutablePeriod8.setMonths(1);
        mutablePeriod8.addMonths((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod8.copy();
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.052S" + "'", str10, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod31);
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.addSeconds((int) (byte) 100);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) duration9, chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval13);
        java.lang.String str15 = interval13.toString();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getEnd();
        boolean boolean43 = interval28.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Instant instant44 = dateTime42.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = instant44.isSupported(dateTimeFieldType45);
        org.joda.time.Chronology chronology47 = instant44.getChronology();
        boolean boolean48 = interval13.contains((org.joda.time.ReadableInstant) instant44);
        org.joda.time.DateTimeZone dateTimeZone49 = instant44.getZone();
        java.lang.String str50 = instant44.toString();
        org.joda.time.Duration duration52 = org.joda.time.Duration.millis(100L);
        java.lang.String str53 = duration52.toString();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.days();
        java.lang.String str56 = periodType55.getName();
        org.joda.time.PeriodType periodType57 = periodType55.withSecondsRemoved();
        org.joda.time.PeriodType periodType58 = periodType57.withHoursRemoved();
        org.joda.time.PeriodType periodType59 = periodType57.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0L, periodType57);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Period period73 = interval72.toPeriod();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.days();
        org.joda.time.DurationField durationField76 = chronology74.centuries();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.hourOfHalfday();
        org.joda.time.DurationField durationField78 = chronology74.seconds();
        org.joda.time.Period period79 = duration52.toPeriod(periodType57, chronology74);
        org.joda.time.Duration duration81 = new org.joda.time.Duration(10L);
        org.joda.time.Seconds seconds82 = duration81.toStandardSeconds();
        org.joda.time.Duration duration83 = duration81.toDuration();
        long long84 = duration83.getMillis();
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardSeconds(1644572154267L);
        int int87 = duration83.compareTo((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Duration duration88 = duration52.minus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType90 = periodType89.withMinutesRemoved();
        org.joda.time.PeriodType periodType91 = periodType89.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant44, (org.joda.time.ReadableDuration) duration52, periodType91);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(interval13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:42:14.799Z/2022-02-11T09:43:14.799Z" + "'", str15, "2022-02-11T09:42:14.799Z/2022-02-11T09:43:14.799Z");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-11T09:43:14.800Z" + "'", str50, "2022-02-11T09:43:14.800Z");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0.100S" + "'", str53, "PT0.100S");
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Days" + "'", str56, "Days");
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(seconds82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10L + "'", long84 == 10L);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType91);
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter2.withLocale(locale8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        java.lang.String str14 = duration11.toString();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean17 = periodType15.equals((java.lang.Object) false);
        org.joda.time.Period period18 = duration11.toPeriod(periodType15);
        org.joda.time.PeriodType periodType19 = periodType15.withMillisRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withDaysRemoved();
        org.joda.time.PeriodType periodType21 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter9.withParseType(periodType21);
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT126000S" + "'", str14, "PT126000S");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (byte) 0, (int) (byte) 0, 0, (int) '#', (int) (short) -1, 3, (int) (short) 1, (int) ' ');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod24.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod24.copy();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = mutablePeriod24.toDurationTo(readableInstant36);
        long long38 = duration37.getStandardSeconds();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod5.add(readablePeriod40);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((-124L));
        long long44 = duration43.getMillis();
        long long45 = duration43.getStandardSeconds();
        mutablePeriod5.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = interval60.isAfter(readableInterval61);
        org.joda.time.Chronology chronology63 = interval60.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.weekyears();
        mutablePeriod5.setPeriod(1643312133763L, 1644572286581L, chronology63);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.dayOfYear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 28083659L + "'", long38 == 28083659L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-124L) + "'", long44 == (-124L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod7.add((int) '#', 0, (int) (short) 10, (int) (short) 100, (int) '#', (int) (short) 100, 0, (-1));
        mutablePeriod7.setMillis(38);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.add((int) (byte) 0, 8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4');
        mutablePeriod3.clear();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        boolean boolean33 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration20.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration36 = duration22.withMillis((long) (short) 100);
        boolean boolean37 = mutablePeriod3.equals((java.lang.Object) (short) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = mutablePeriod3.getFieldTypes();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = periodType39.withMinutesRemoved();
        org.joda.time.PeriodType periodType41 = periodType40.withMillisRemoved();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getEnd();
        org.joda.time.Duration duration26 = interval23.toDuration();
        boolean boolean27 = interval11.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime28 = interval23.getStart();
        java.lang.String str29 = interval23.toString();
        java.lang.String str30 = interval23.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-27T19:41:34.948Z/2022-02-11T09:43:14.948Z" + "'", str29, "2022-01-27T19:41:34.948Z/2022-02-11T09:43:14.948Z");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-01-27T19:41:34.948Z/2022-02-11T09:43:14.948Z" + "'", str30, "2022-01-27T19:41:34.948Z/2022-02-11T09:43:14.948Z");
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        mutablePeriod33.setSeconds((int) '4');
        mutablePeriod33.addDays(35);
        mutablePeriod33.setMinutes(100);
        org.joda.time.Period period40 = mutablePeriod33.toPeriod();
        mutablePeriod33.add((-62130497090000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType44 = mutablePeriod33.getFieldType(93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period40);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        org.joda.time.PeriodType periodType35 = periodType20.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(60000L, periodType20);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod39.addHours(0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration45, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.halfdayOfDay();
        org.joda.time.DurationField durationField62 = durationFieldType37.getField(chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = chronology59.yearOfEra();
        org.joda.time.DurationField durationField66 = chronology59.halfdays();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(1644572213266L, 1644572145724L, periodType20, chronology59);
        int int68 = mutablePeriod67.getDays();
        org.joda.time.MutablePeriod mutablePeriod69 = mutablePeriod67.toMutablePeriod();
        int int70 = mutablePeriod69.getSeconds();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addHours((int) (short) 1);
        org.joda.time.Period period45 = mutablePeriod15.toPeriod();
        mutablePeriod15.add(52, 0, 0, (int) (short) 0, (int) (byte) 10, 1, 456825, (int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod55 = mutablePeriod15.copy();
        mutablePeriod15.addSeconds((-42));
        org.joda.time.PeriodType periodType58 = mutablePeriod15.getPeriodType();
        org.joda.time.PeriodType periodType59 = periodType58.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withMinutesRemoved();
        org.joda.time.PeriodType periodType22 = periodType20.withSecondsRemoved();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1644572123588L, 10L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration13 = duration4.plus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean16 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration15);
        java.lang.String str17 = duration15.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod21.add((long) ' ');
        int int24 = mutablePeriod21.getDays();
        mutablePeriod21.setMillis((int) (byte) -1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getEnd();
        boolean boolean54 = interval39.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.DateTime dateTime68 = interval66.getEnd();
        java.lang.String str69 = dateTime68.toString();
        boolean boolean70 = dateTime53.isBefore((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration71 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology72 = dateTime68.getChronology();
        org.joda.time.Period period73 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime68, periodType74);
        long long76 = duration2.getMillis();
        long long77 = duration2.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT6000S" + "'", str17, "PT6000S");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-11T09:43:15.143Z" + "'", str69, "2022-02-11T09:43:15.143Z");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1644572123578L) + "'", long76 == (-1644572123578L));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-27409535L) + "'", long77 == (-27409535L));
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1644572207737L, 1644572235541L, periodType2);
        java.lang.String str4 = mutablePeriod3.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = mutablePeriod3.getFieldType((-3));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT27.804S" + "'", str4, "PT27.804S");
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.weekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        mutablePeriod27.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = mutablePeriod27.get(durationFieldType30);
        int int32 = mutablePeriod27.size();
        mutablePeriod27.add((long) 14);
        long long37 = chronology15.add((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 4, 456825);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology15.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.halfdayOfDay();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-12791096L) + "'", long37 == (-12791096L));
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod33.setPeriod((long) (short) 10, (long) 100);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Duration duration52 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology59);
        mutablePeriod56.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = mutablePeriod60.getFieldTypes();
        boolean boolean63 = dateTime50.equals((java.lang.Object) durationFieldTypeArray62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int65 = dateTime50.get(dateTimeFieldType64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:43:15.205Z" + "'", str51, "2022-02-11T09:43:15.205Z");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutablePeriod20.setPeriod(readablePeriod21);
        mutablePeriod20.addWeeks((int) (byte) 10);
        int int25 = mutablePeriod20.getMonths();
        mutablePeriod20.addDays(10);
        mutablePeriod20.setWeeks((int) (byte) -1);
        int[] intArray32 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod20, (long) 100, 10L);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod20.copy();
        int int34 = mutablePeriod20.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, -90]");
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1644572296221L);
        java.lang.String str2 = duration1.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT5920460266395600S" + "'", str2, "PT5920460266395600S");
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addYears(1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        boolean boolean18 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration15);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int23 = duration13.compareTo((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration34 = duration25.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean37 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration36);
        java.lang.String str38 = duration34.toString();
        boolean boolean39 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Days days40 = duration34.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod41 = days40.toMutablePeriod();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Period period54 = interval53.toPeriod();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfYear();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.secondOfMinute();
        org.joda.time.DurationField durationField60 = chronology55.seconds();
        java.lang.String str61 = chronology55.toString();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Interval interval74 = interval73.toInterval();
        long long75 = interval74.toDurationMillis();
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration79.plus(readableDuration80);
        org.joda.time.Duration duration83 = duration77.withDurationAdded((org.joda.time.ReadableDuration) duration79, (int) (byte) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = duration83.toPeriod(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = duration83.toIntervalTo(readableInstant86);
        org.joda.time.Interval interval88 = interval87.toInterval();
        org.joda.time.DateTime dateTime89 = interval87.getEnd();
        java.lang.String str90 = dateTime89.toString();
        boolean boolean91 = interval74.isAfter((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Period period92 = interval74.toPeriod();
        int[] intArray94 = chronology55.get((org.joda.time.ReadablePeriod) period92, 1L);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) period92);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT160S" + "'", str38, "PT160S");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str61, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1260100000L + "'", long75 == 1260100000L);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "2022-02-11T09:43:15.266Z" + "'", str90, "2022-02-11T09:43:15.266Z");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter2.getParser();
        boolean boolean8 = periodFormatter2.isParser();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration18.toPeriod(periodType26, chronology27);
        org.joda.time.PeriodType periodType29 = periodType26.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        int int31 = periodType29.indexOf(durationFieldType30);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(periodType29);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod41.addHours(10);
        mutablePeriod41.setWeeks(0);
        mutablePeriod41.setYears((int) (byte) 100);
        mutablePeriod41.clear();
        boolean boolean49 = periodType29.equals((java.lang.Object) mutablePeriod41);
        int int50 = periodType29.size();
        org.joda.time.format.PeriodFormatter periodFormatter51 = periodFormatter2.withParseType(periodType29);
        java.util.Locale locale52 = null;
        org.joda.time.format.PeriodFormatter periodFormatter53 = periodFormatter2.withLocale(locale52);
        org.joda.time.format.PeriodParser periodParser54 = periodFormatter53.getParser();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(periodFormatter51);
        org.junit.Assert.assertNotNull(periodFormatter53);
        org.junit.Assert.assertNull(periodParser54);
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1142063965L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology15);
        mutablePeriod20.setPeriod(2, (int) (byte) 0, (int) (byte) 10, 1, 4, 2, 2, 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod34.setPeriod((long) (short) 0, chronology51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.secondOfMinute();
        boolean boolean71 = mutablePeriod34.equals((java.lang.Object) chronology66);
        org.joda.time.Chronology chronology72 = chronology66.withUTC();
        mutablePeriod20.setPeriod((long) 100, chronology72);
        org.joda.time.MutablePeriod mutablePeriod74 = mutablePeriod20.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod75 = mutablePeriod74.toMutablePeriod();
        mutablePeriod74.addSeconds(1003);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(mutablePeriod75);
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Period period30 = interval29.toPeriod();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DurationField durationField33 = chronology31.centuries();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutablePeriod38.setPeriod(readablePeriod39);
        mutablePeriod38.addWeeks((int) (byte) 10);
        int int43 = mutablePeriod38.getMonths();
        mutablePeriod38.addDays(10);
        mutablePeriod38.setWeeks((int) (byte) -1);
        int[] intArray50 = chronology31.get((org.joda.time.ReadablePeriod) mutablePeriod38, (long) 100, 10L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        int int55 = mutablePeriod54.getMinutes();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        mutablePeriod59.setMillis((int) (short) 0);
        mutablePeriod59.addMonths((int) (short) 1);
        mutablePeriod59.setMinutes((int) (byte) 1);
        mutablePeriod59.addYears(1);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        boolean boolean74 = duration69.isLongerThan((org.joda.time.ReadableDuration) duration71);
        mutablePeriod59.add((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int79 = duration69.compareTo((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration87.toPeriod(chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Interval interval91 = duration87.toIntervalTo(readableInstant90);
        org.joda.time.Interval interval92 = interval91.toInterval();
        org.joda.time.DateTime dateTime93 = interval91.getEnd();
        org.joda.time.Period period94 = duration78.toPeriodTo((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.Duration duration95 = mutablePeriod54.toDurationTo((org.joda.time.ReadableInstant) dateTime93);
        java.lang.String str96 = dateTime93.toString();
        org.joda.time.Duration duration97 = mutablePeriod38.toDurationTo((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.Duration duration98 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTimeZone dateTimeZone99 = dateTime17.getZone();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, -90]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(duration95);
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2022-02-11T09:43:15.361Z" + "'", str96, "2022-02-11T09:43:15.361Z");
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertNotNull(dateTimeZone99);
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 2, (long) ' ');
        org.joda.time.Duration duration4 = duration2.withMillis(21001L);
        org.joda.time.Hours hours5 = duration2.toStandardHours();
        org.joda.time.Duration duration7 = new org.joda.time.Duration(1644572263109L);
        org.joda.time.Duration duration8 = duration2.minus((org.joda.time.ReadableDuration) duration7);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) ' ');
        long long2 = duration1.getStandardDays();
        org.joda.time.Duration duration3 = new org.joda.time.Duration((java.lang.Object) long2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = mutablePeriod7.toDurationFrom(readableInstant8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        boolean boolean16 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((java.lang.Object) duration18, chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = mutablePeriod20.toDurationFrom(readableInstant21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) duration24, chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        boolean boolean29 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        org.joda.time.Duration duration44 = interval41.toDuration();
        boolean boolean45 = duration22.isEqual((org.joda.time.ReadableDuration) duration44);
        boolean boolean46 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration50 = duration48.plus(126000L);
        org.joda.time.Duration duration52 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) -1);
        org.joda.time.Duration duration53 = duration50.toDuration();
        boolean boolean54 = duration3.isEqual((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.DurationFieldType[] durationFieldTypeArray64 = mutablePeriod62.getFieldTypes();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.forFields(durationFieldTypeArray64);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.forFields(durationFieldTypeArray64);
        org.joda.time.PeriodType periodType67 = periodType66.withWeeksRemoved();
        org.joda.time.Period period68 = duration50.toPeriod(periodType66);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter2.withParseType(periodType24);
        org.joda.time.PeriodType periodType26 = periodFormatter25.getParseType();
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21);
        mutablePeriod22.addWeeks((int) 'a');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        mutablePeriod29.add((long) ' ');
        mutablePeriod29.setMonths(0);
        mutablePeriod29.setMonths(10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology38);
        mutablePeriod39.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod39.toMutablePeriod();
        int[] intArray43 = mutablePeriod39.getValues();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        boolean boolean60 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration53.toPeriod(periodType61, chronology62);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutablePeriod68.setPeriod(readablePeriod69);
        mutablePeriod68.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.days();
        int int74 = mutablePeriod68.get(durationFieldType73);
        boolean boolean75 = periodType61.isSupported(durationFieldType73);
        mutablePeriod39.set(durationFieldType73, 8);
        int int78 = mutablePeriod29.get(durationFieldType73);
        boolean boolean79 = mutablePeriod3.isSupported(durationFieldType73);
        mutablePeriod3.setMonths((int) (byte) 1);
        mutablePeriod3.add(48, 299, 488, (-3), 33, 31116, (-392), 9);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        long long12 = duration7.getStandardHours();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        int int17 = mutablePeriod16.getMinutes();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod21.setMillis((int) (short) 0);
        mutablePeriod21.addMonths((int) (short) 1);
        mutablePeriod21.setMinutes((int) (byte) 1);
        mutablePeriod21.addYears(1);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        boolean boolean36 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration33);
        mutablePeriod21.add((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int41 = duration31.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        org.joda.time.Period period56 = duration40.toPeriodTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration57 = mutablePeriod16.toDurationTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = duration7.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration59 = duration57.toDuration();
        long long60 = duration57.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 350L + "'", long12 == 350L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-245), (-3), (-35), 45);
        mutablePeriod4.addYears(56);
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        boolean boolean27 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration20.toPeriod(periodType28, chronology29);
        int int31 = duration10.compareTo((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod33.addHours(0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration39, chronology53);
        java.lang.String str55 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        org.joda.time.Period period57 = duration20.toPeriod(chronology53);
        org.joda.time.DateTimeField dateTimeField58 = chronology53.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology53.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(350L, chronology53);
        org.joda.time.Chronology chronology61 = chronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = chronology53.era();
        org.joda.time.DateTimeField dateTimeField63 = chronology53.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(40834312119965L, 36000000L, chronology53);
        org.joda.time.DurationField durationField65 = chronology53.hours();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology53.getZone();
        org.joda.time.DateTimeField dateTimeField67 = chronology53.era();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str55, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod6.setSeconds((int) (short) 10);
        mutablePeriod6.setYears((int) '#');
        mutablePeriod6.setValue(7, (int) (short) 100);
        mutablePeriod6.addHours(10);
        mutablePeriod6.setWeeks(7);
        mutablePeriod6.setDays((-14));
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(100000L);
        org.joda.time.Duration duration3 = new org.joda.time.Duration(10L);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = duration3.plus((long) (-53));
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod11.add((long) ' ');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        mutablePeriod11.setPeriod((long) (short) 0, chronology28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Period period42 = interval41.toPeriod();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.secondOfMinute();
        boolean boolean48 = mutablePeriod11.equals((java.lang.Object) chronology43);
        org.joda.time.Chronology chronology49 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.monthOfYear();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.year();
        org.joda.time.Period period53 = duration3.toPeriod(chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.yearOfEra();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        mutablePeriod63.clear();
        mutablePeriod63.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType73 = null;
        boolean boolean74 = mutablePeriod63.isSupported(durationFieldType73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology77);
        int int79 = mutablePeriod78.getWeeks();
        mutablePeriod63.add((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        org.joda.time.Duration duration88 = duration82.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = duration88.toPeriod(chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = duration88.toIntervalTo(readableInstant91);
        org.joda.time.Interval interval93 = interval92.toInterval();
        org.joda.time.DateTime dateTime94 = interval92.getEnd();
        mutablePeriod63.setPeriod((org.joda.time.ReadableInterval) interval92);
        boolean boolean96 = interval29.isBefore((org.joda.time.ReadableInterval) interval92);
        long long97 = interval92.toDurationMillis();
        org.joda.time.Duration duration98 = interval92.toDuration();
        org.joda.time.Minutes minutes99 = duration98.toStandardMinutes();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1260100000L + "'", long97 == 1260100000L);
        org.junit.Assert.assertNotNull(duration98);
        org.junit.Assert.assertNotNull(minutes99);
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology28 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology28.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.centuryOfEra();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Interval interval17 = interval15.toInterval();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        org.joda.time.Period period19 = interval15.toPeriod();
        org.joda.time.Duration duration20 = interval15.toDuration();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Hours hours62 = duration61.toStandardHours();
        int int63 = duration53.compareTo((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Hours hours68 = duration67.toStandardHours();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        boolean boolean73 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration70);
        boolean boolean74 = duration61.isShorterThan((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration76 = duration61.withMillis(1644572267143L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:43:15.779Z" + "'", str51, "2022-02-11T09:43:15.779Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(hours62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(hours68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration76);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getEnd();
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        boolean boolean53 = interval38.contains((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = interval38.getStart();
        java.lang.String str55 = dateTime54.toString();
        boolean boolean56 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime54);
        int[] intArray58 = mutablePeriod3.getValues();
        mutablePeriod3.addMinutes((int) (byte) 100);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology63);
        int int65 = mutablePeriod64.getYears();
        java.lang.String str66 = mutablePeriod64.toString();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        mutablePeriod71.setPeriod(readablePeriod72);
        mutablePeriod71.addWeeks((int) (byte) 10);
        mutablePeriod64.add((org.joda.time.ReadablePeriod) mutablePeriod71);
        boolean boolean78 = mutablePeriod64.equals((java.lang.Object) (-1.0f));
        mutablePeriod64.setMinutes((int) (short) 1);
        int int81 = mutablePeriod64.getHours();
        org.joda.time.Period period82 = mutablePeriod64.toPeriod();
        mutablePeriod64.setMonths(1);
        mutablePeriod64.addMonths((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod87 = mutablePeriod64.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType89 = mutablePeriod87.getFieldType(2);
        int int90 = mutablePeriod3.get(durationFieldType89);
        java.lang.String str91 = durationFieldType89.toString();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:43:15.819Z" + "'", str25, "2022-02-11T09:43:15.819Z");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-01-27T19:41:35.819Z" + "'", str55, "2022-01-27T19:41:35.819Z");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT0.052S" + "'", str66, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(mutablePeriod87);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "weeks" + "'", str91, "weeks");
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.add((long) ' ');
        int int15 = mutablePeriod12.getDays();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        mutablePeriod12.add(durationFieldType16, (int) (byte) 1);
        int int19 = mutablePeriod12.getWeeks();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        boolean boolean40 = mutablePeriod12.isSupported(durationFieldType37);
        int int41 = mutablePeriod3.get(durationFieldType37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod48 = mutablePeriod45.toMutablePeriod();
        int[] intArray49 = mutablePeriod45.getValues();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        boolean boolean66 = duration53.isShorterThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration59.toPeriod(periodType67, chronology68);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        mutablePeriod74.setPeriod(readablePeriod75);
        mutablePeriod74.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.days();
        int int80 = mutablePeriod74.get(durationFieldType79);
        boolean boolean81 = periodType67.isSupported(durationFieldType79);
        mutablePeriod45.set(durationFieldType79, 8);
        int int84 = mutablePeriod3.indexOf(durationFieldType79);
        mutablePeriod3.setYears(10);
        int[] intArray87 = mutablePeriod3.getValues();
        mutablePeriod3.setWeeks((int) (byte) 10);
        org.joda.time.PeriodType periodType90 = mutablePeriod3.getPeriodType();
        java.lang.Object obj91 = null;
        boolean boolean92 = mutablePeriod3.equals(obj91);
        mutablePeriod3.clear();
        mutablePeriod3.clear();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 1, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = chronology13.era();
        org.joda.time.DateTimeField dateTimeField35 = chronology13.minuteOfHour();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        boolean boolean52 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration45.toPeriod(periodType53, chronology54);
        org.joda.time.PeriodType periodType56 = periodType53.withYearsRemoved();
        org.joda.time.PeriodType periodType57 = periodType53.withWeeksRemoved();
        org.joda.time.PeriodType periodType58 = periodType53.withWeeksRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withDaysRemoved();
        org.joda.time.PeriodType periodType60 = periodType59.withMinutesRemoved();
        org.joda.time.PeriodType periodType61 = periodType59.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(periodType61);
        org.joda.time.PeriodType periodType63 = periodType61.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) chronology13, periodType61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        long long45 = interval42.getStartMillis();
        long long46 = interval42.toDurationMillis();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = mutablePeriod56.getFieldTypes();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.forFields(durationFieldTypeArray58);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod61.addHours(0);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = duration75.toPeriod(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = duration75.toIntervalTo(readableInstant78);
        org.joda.time.Period period80 = interval79.toPeriod();
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        mutablePeriod61.setPeriod((org.joda.time.ReadableDuration) duration67, chronology81);
        org.joda.time.DateTimeField dateTimeField83 = chronology81.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType59, chronology81);
        org.joda.time.PeriodType periodType85 = periodType59.withHoursRemoved();
        org.joda.time.Period period86 = interval42.toPeriod(periodType85);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1643312495912L + "'", long45 == 1643312495912L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1260100000L + "'", long46 == 1260100000L);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(1L);
        long long11 = duration10.getMillis();
        org.joda.time.Period period12 = duration10.toPeriod();
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) period12);
        mutablePeriod3.add(20, 4, 1250, (int) (short) 100, 4, 11, (-35), (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1000L + "'", long11 == 1000L);
        org.junit.Assert.assertNotNull(period12);
    }
}

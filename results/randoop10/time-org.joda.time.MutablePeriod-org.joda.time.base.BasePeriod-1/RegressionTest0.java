import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test00001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00001");
        org.joda.time.DurationFieldType durationFieldType0 = null;
        org.joda.time.DurationFieldType[] durationFieldTypeArray1 = new org.joda.time.DurationFieldType[] { durationFieldType0 };
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.forFields(durationFieldTypeArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not contain null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray1);
    }

    @Test
    public void test00002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00002");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00003");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) (-1.0d), periodType1, chronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Double");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00004");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.DurationFieldType durationFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.add(durationFieldType6, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00005");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = mutablePeriod3.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00006");
        org.joda.time.Chronology chronology1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((java.lang.Object) 1L, chronology1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00007");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.set(durationFieldType21, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test00008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00008");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        int int10 = mutablePeriod4.size();
        mutablePeriod4.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod4.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.add(durationFieldType14, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weekyears'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(durationFieldType14);
    }

    @Test
    public void test00009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00009");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = mutablePeriod5.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00010");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType7 = mutablePeriod3.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00011");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int2 = mutablePeriod0.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00012");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        java.lang.String str8 = duration5.toString();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean11 = periodType9.equals((java.lang.Object) false);
        org.joda.time.Period period12 = duration5.toPeriod(periodType9);
        org.joda.time.PeriodType periodType13 = periodType9.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(periodType13);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod14, "PT60S", 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT126000S" + "'", str8, "PT126000S");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test00013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00013");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:05.788Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:05.788Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00014");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period4 = periodFormatter2.parsePeriod("PT1260100S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00015");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        java.lang.String str1 = duration0.toString();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0S" + "'", str1, "PT0S");
    }

    @Test
    public void test00016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00016");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = mutablePeriod21.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00017");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addYears((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = mutablePeriod3.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test00018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00018");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod5 = org.joda.time.MutablePeriod.parse("PT1260100S", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
    }

    @Test
    public void test00019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00019");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        mutablePeriod5.addWeeks((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.add((int) '4', 8, (int) (byte) 100, (int) 'a', (int) (short) 100, 0, (int) ' ', 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00020");
        org.joda.time.DurationFieldType[] durationFieldTypeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.forFields(durationFieldTypeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00021");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod7.add((long) ' ');
        mutablePeriod7.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutablePeriod16.setPeriod(readablePeriod17);
        mutablePeriod16.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.days();
        int int22 = mutablePeriod16.get(durationFieldType21);
        boolean boolean23 = mutablePeriod7.isSupported(durationFieldType21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test00022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00022");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod5 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:06.961Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
    }

    @Test
    public void test00023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00023");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00024");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod4 = periodFormatter2.parseMutablePeriod("PT60S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00025");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        org.joda.time.format.PeriodPrinter periodPrinter7 = null;
        org.joda.time.format.PeriodParser periodParser8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = new org.joda.time.format.PeriodFormatter(periodPrinter7, periodParser8);
        java.util.Locale locale10 = periodFormatter9.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = mutablePeriod6.toString(periodFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNull(locale10);
    }

    @Test
    public void test00026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00026");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod4 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:06.242Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00027");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod5 = org.joda.time.MutablePeriod.parse("", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
    }

    @Test
    public void test00028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00028");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.lang.StringBuffer stringBuffer3 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        int int8 = mutablePeriod7.getYears();
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod7.copy();
        mutablePeriod9.setYears((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer3, (org.joda.time.ReadablePeriod) mutablePeriod9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test00029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00029");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:07.772Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:07.772Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00030");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.ReadablePartial readablePartial33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = chronology29.get(readablePartial33, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test00031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00031");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        int int10 = mutablePeriod4.size();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = mutablePeriod4.getValue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test00032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00032");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod6.setSeconds((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test00033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00033");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', (long) (byte) 10);
    }

    @Test
    public void test00034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00034");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Minutes minutes19 = duration5.toStandardMinutes();
        org.joda.time.Duration duration21 = duration5.plus((long) 8);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((java.lang.Object) duration23, chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Period period40 = interval39.toPeriod();
        boolean boolean41 = interval27.overlaps((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        int int48 = mutablePeriod45.getDays();
        mutablePeriod45.setMillis((int) (byte) -1);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Interval interval76 = interval75.toInterval();
        org.joda.time.DateTime dateTime77 = interval75.getEnd();
        boolean boolean78 = interval63.contains((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Duration duration84 = duration82.plus(readableDuration83);
        org.joda.time.Duration duration86 = duration80.withDurationAdded((org.joda.time.ReadableDuration) duration82, (int) (byte) 10);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Period period88 = duration86.toPeriod(chronology87);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Interval interval90 = duration86.toIntervalTo(readableInstant89);
        org.joda.time.Interval interval91 = interval90.toInterval();
        org.joda.time.DateTime dateTime92 = interval90.getEnd();
        java.lang.String str93 = dateTime92.toString();
        boolean boolean94 = dateTime77.isBefore((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Duration duration95 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean96 = interval39.isAfter((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.PeriodType periodType97 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod98 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime92, periodType97);
        org.joda.time.MutablePeriod mutablePeriod99 = new org.joda.time.MutablePeriod((long) 1, (long) (short) 10, periodType97);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2022-02-11T09:35:09.331Z" + "'", str93, "2022-02-11T09:35:09.331Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(periodType97);
    }

    @Test
    public void test00035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00035");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21);
        mutablePeriod22.addWeeks((int) 'a');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        int int26 = mutablePeriod22.getMonths();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        boolean boolean43 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration36.toPeriod(periodType44, chronology45);
        org.joda.time.PeriodType periodType47 = periodType44.withYearsRemoved();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DurationField durationField63 = chronology61.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod22, periodType44, chronology61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test00036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00036");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod5 = org.joda.time.MutablePeriod.parse("2022-02-11T09:34:09.703Z/2022-02-11T09:35:09.703Z", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
    }

    @Test
    public void test00037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00037");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        mutablePeriod7.setSeconds((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod7.setValue((-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00038");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:34:09.703Z/2022-02-11T09:35:09.703Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:34:09.703Z/2022-02-11T09:35:09.703Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00039");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((java.lang.Object) periodType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test00040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00040");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.ReadablePartial readablePartial16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = chronology13.set(readablePartial16, (long) 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test00041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00041");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.weeks();
        org.junit.Assert.assertNotNull(periodType0);
    }

    @Test
    public void test00042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00042");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = chronology13.get(readablePartial18, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00043");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period5 = periodFormatter2.parsePeriod("2022-02-11T09:35:07.703Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00044");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod10.addMinutes((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test00045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00045");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Hours hours64 = duration63.toStandardHours();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Duration duration66 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant65, (org.joda.time.ReadableDuration) duration66, periodType67);
        org.joda.time.Duration duration70 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration66, 10);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration66);
        mutablePeriod71.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(hours64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(duration70);
    }

    @Test
    public void test00046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00046");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        java.lang.String str23 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology21.getDateTimeMillis(0, 3, (int) (short) 1, 8, 8, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str23, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test00047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00047");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology13.getDateTimeMillis((int) (byte) 10, (int) '4', 100, (-1), (int) (byte) 0, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00048");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getEnd();
        boolean boolean40 = interval25.contains((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalTo(readableInstant51);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getEnd();
        java.lang.String str55 = dateTime54.toString();
        boolean boolean56 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime39.getZone();
        org.joda.time.Period period59 = duration9.toPeriodTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Instant instant60 = dateTime39.toInstant();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = duration68.toPeriod(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = duration68.toIntervalTo(readableInstant71);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getEnd();
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.ReadableInstant readableInstant76 = null;
        boolean boolean77 = dateTime74.isEqual(readableInstant76);
        java.lang.Object obj78 = null;
        boolean boolean79 = dateTime74.equals(obj78);
        int int80 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime74);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:35:12.952Z" + "'", str55, "2022-02-11T09:35:12.952Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-11T09:35:12.953Z" + "'", str75, "2022-02-11T09:35:12.953Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test00049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00049");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType2 = periodType0.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
    }

    @Test
    public void test00050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00050");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod3.addDays(4);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = mutablePeriod3.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test00051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00051");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) periodType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test00052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00052");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) (byte) 100, (int) (short) 100, 0, (int) (byte) 1, 0, (int) 'a', (int) (short) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        int int26 = mutablePeriod25.getYears();
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod25.copy();
        mutablePeriod27.setYears((int) (short) 10);
        mutablePeriod27.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        mutablePeriod27.setPeriod((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        mutablePeriod27.add((org.joda.time.ReadableInterval) interval64);
        boolean boolean67 = interval21.contains((org.joda.time.ReadableInterval) interval64);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval64);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = mutablePeriod8.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test00053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00053");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod40 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:07.990Z", periodFormatter39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
    }

    @Test
    public void test00054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00054");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        int int28 = duration7.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod30.addHours(0);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration36, chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.Period period54 = duration17.toPeriod(chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.secondOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str52, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test00055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00055");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Period period21 = mutablePeriod10.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = mutablePeriod22.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
    }

    @Test
    public void test00056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00056");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod6.setPeriod((int) '4', 100, 10, (int) (byte) 10, 0, (int) (short) 1, (int) '#', 0);
        org.joda.time.DurationFieldType durationFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod6.add(durationFieldType16, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test00057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00057");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) 2);
        boolean boolean4 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        java.lang.Class<?> wildcardClass5 = duration1.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test00058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00058");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        boolean boolean42 = interval27.contains((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        java.lang.String str57 = dateTime56.toString();
        boolean boolean58 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime41.getZone();
        org.joda.time.Period period61 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period62 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str63 = period62.toString();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:35:15.710Z" + "'", str57, "2022-02-11T09:35:15.710Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT0.010S" + "'", str63, "PT0.010S");
    }

    @Test
    public void test00059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00059");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isParser();
        java.lang.StringBuffer stringBuffer6 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod10.setMillis((int) (short) 0);
        mutablePeriod10.addMonths((int) (short) 1);
        mutablePeriod10.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutablePeriod21.setPeriod(readablePeriod22);
        mutablePeriod21.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.days();
        int int27 = mutablePeriod21.get(durationFieldType26);
        mutablePeriod10.add(durationFieldType26, (int) '#');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod10.copy();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.weeks();
        int int42 = mutablePeriod40.get(durationFieldType41);
        mutablePeriod40.addYears((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer6, (org.joda.time.ReadablePeriod) mutablePeriod40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test00060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00060");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.addHours((int) (short) 10);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean15 = periodType13.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, periodType13, chronology16);
        mutablePeriod17.addYears((int) 'a');
        mutablePeriod17.addWeeks((int) '#');
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod17.addSeconds((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00061");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = periodFormatter2.parsePeriod("2022-02-11T09:35:10.950Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00062");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        int int34 = periodType17.indexOf(durationFieldType33);
        java.lang.Class<?> wildcardClass35 = durationFieldType33.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test00063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00063");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod10.setMillis(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
    }

    @Test
    public void test00064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00064");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        mutablePeriod42.setMillis((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
    }

    @Test
    public void test00065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00065");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setDays((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = mutablePeriod5.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test00066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00066");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test00067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00067");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        mutablePeriod38.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        int int55 = mutablePeriod49.get(durationFieldType54);
        mutablePeriod38.add(durationFieldType54, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod68 = mutablePeriod38.copy();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = mutablePeriod68.get(durationFieldType69);
        long long73 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) ' ', 3);
        org.joda.time.DurationField durationField74 = chronology29.seconds();
        org.joda.time.DurationField durationField75 = chronology29.days();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-124L) + "'", long73 == (-124L));
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test00068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00068");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        int int28 = duration7.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod30.addHours(0);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration36, chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.Period period54 = duration17.toPeriod(chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.millisOfDay();
        org.joda.time.ReadablePartial readablePartial57 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        mutablePeriod61.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType64 = null;
        int int65 = mutablePeriod61.get(durationFieldType64);
        int int66 = mutablePeriod61.size();
        mutablePeriod61.addWeeks((int) (short) 0);
        int[] intArray69 = mutablePeriod61.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology50.validate(readablePartial57, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str52, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, -42]");
    }

    @Test
    public void test00069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00069");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType17.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean23 = periodType17.isSupported(durationFieldType22);
        java.lang.String str24 = periodType17.getName();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Years" + "'", str24, "Years");
    }

    @Test
    public void test00070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00070");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        java.lang.String str3 = duration2.toString();
        org.joda.time.Duration duration5 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration16 = duration7.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        boolean boolean46 = interval31.contains((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        java.lang.String str61 = dateTime60.toString();
        boolean boolean62 = dateTime45.isBefore((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime45.getZone();
        org.joda.time.Period period65 = duration15.toPeriodTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period66 = duration5.toPeriodTo((org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str67 = dateTime45.toString();
        org.joda.time.Period period68 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration69 = new org.joda.time.Duration((java.lang.Object) dateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0S" + "'", str3, "PT0S");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-11T09:35:17.043Z" + "'", str61, "2022-02-11T09:35:17.043Z");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-11T09:35:17.043Z" + "'", str67, "2022-02-11T09:35:17.043Z");
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test00071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00071");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        org.joda.time.PeriodType periodType39 = periodFormatter38.getParseType();
        boolean boolean40 = periodFormatter38.isPrinter();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        mutablePeriod44.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = mutablePeriod44.get(durationFieldType47);
        int int49 = mutablePeriod44.size();
        mutablePeriod44.setMinutes((int) (short) 0);
        mutablePeriod44.addYears(0);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = periodFormatter38.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod44, "2022-02-11T09:35:07.990Z", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
    }

    @Test
    public void test00072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00072");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod7.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod7.add((long) 4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00073");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        int int7 = mutablePeriod6.getYears();
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod6.copy();
        mutablePeriod8.setYears((int) (short) 10);
        mutablePeriod8.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Interval interval32 = interval31.toInterval();
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod37.add((long) ' ');
        int int40 = mutablePeriod37.getDays();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.millis();
        mutablePeriod37.add(durationFieldType41, (int) (byte) 1);
        int int44 = mutablePeriod37.getWeeks();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod48.add((long) ' ');
        mutablePeriod48.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutablePeriod57.setPeriod(readablePeriod58);
        mutablePeriod57.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.days();
        int int63 = mutablePeriod57.get(durationFieldType62);
        boolean boolean64 = mutablePeriod48.isSupported(durationFieldType62);
        boolean boolean65 = mutablePeriod37.isSupported(durationFieldType62);
        mutablePeriod8.set(durationFieldType62, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod8, "", 3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test00074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00074");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.ReadablePartial readablePartial14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = chronology13.set(readablePartial14, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test00075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00075");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        java.lang.String str7 = periodType6.getName();
        org.joda.time.PeriodType periodType8 = periodType6.withWeeksRemoved();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration5.toPeriod(periodType6, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = periodFormatter2.print((org.joda.time.ReadablePeriod) period10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Days" + "'", str7, "Days");
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test00076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00076");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Duration duration4 = duration2.plus(readableDuration3);
        java.lang.String str5 = duration2.toString();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean8 = periodType6.equals((java.lang.Object) false);
        org.joda.time.Period period9 = duration2.toPeriod(periodType6);
        org.joda.time.PeriodType periodType10 = periodType6.withMillisRemoved();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.days();
        boolean boolean12 = periodType6.equals((java.lang.Object) periodType11);
        org.joda.time.PeriodType periodType13 = periodType11.withWeeksRemoved();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DurationField durationField29 = chronology27.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) "Hours", periodType13, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Hours\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT126000S" + "'", str5, "PT126000S");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test00077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00077");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        mutablePeriod5.addDays((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setMillis((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00078");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.time();
        boolean boolean13 = periodType9.equals((java.lang.Object) periodType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod17.clear();
        mutablePeriod17.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType27 = null;
        boolean boolean28 = mutablePeriod17.isSupported(durationFieldType27);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Period period42 = interval41.toPeriod();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        mutablePeriod17.add((long) (short) 100, chronology43);
        org.joda.time.DurationField durationField47 = chronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((java.lang.Object) periodType12, chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test00079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00079");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.addHours(0);
        mutablePeriod3.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod3.getFieldTypes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType15 = periodType13.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test00080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00080");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        long long28 = interval12.toDurationMillis();
        java.lang.Class<?> wildcardClass29 = interval12.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1260100000L + "'", long28 == 1260100000L);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test00081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00081");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod7.set(durationFieldType26, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'centuries'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
    }

    @Test
    public void test00082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00082");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.io.Writer writer4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(periodType5);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer4, (org.joda.time.ReadablePeriod) mutablePeriod8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00083");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        int int22 = period20.getValue(1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test00084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00084");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        mutablePeriod5.addWeeks((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setMonths((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00085");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.io.Writer writer41 = null;
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((java.lang.Object) duration43, chronology44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        java.lang.Object obj55 = mutablePeriod53.clone();
        boolean boolean56 = duration43.equals((java.lang.Object) mutablePeriod53);
        mutablePeriod53.setDays((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter40.printTo(writer41, (org.joda.time.ReadablePeriod) mutablePeriod53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "P32DT0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "P32DT0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "P32DT0.052S");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00086");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((int) '4', (int) (short) 10, 4, 32, (int) (short) 1, 0, (int) 'a', (int) (byte) -1, periodType28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
    }

    @Test
    public void test00087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00087");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = duration1.toPeriodFrom(readableInstant2);
        int int4 = period3.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
    }

    @Test
    public void test00088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00088");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology21.getDateTimeMillis((int) '#', 10, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test00089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00089");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        boolean boolean17 = mutablePeriod3.equals((java.lang.Object) (-1.0f));
        int int18 = mutablePeriod3.getMinutes();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test00090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00090");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        int int9 = mutablePeriod3.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue((int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00091");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        boolean boolean42 = interval27.contains((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        java.lang.String str57 = dateTime56.toString();
        boolean boolean58 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime41.getZone();
        org.joda.time.Period period61 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period62 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Instant instant63 = dateTime41.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int65 = instant63.get(dateTimeFieldType64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:35:19.039Z" + "'", str57, "2022-02-11T09:35:19.039Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(instant63);
    }

    @Test
    public void test00092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00092");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        java.lang.String str44 = dateTime43.toString();
        boolean boolean45 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime28.getZone();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes(1644572108797L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        java.lang.String str54 = duration51.toString();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean57 = periodType55.equals((java.lang.Object) false);
        org.joda.time.Period period58 = duration51.toPeriod(periodType55);
        org.joda.time.PeriodType periodType59 = periodType55.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(periodType59);
        org.joda.time.PeriodType periodType61 = periodType59.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration49, periodType61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds63 = duration49.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 98674326527820");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:35:19.160Z" + "'", str44, "2022-02-11T09:35:19.160Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT126000S" + "'", str54, "PT126000S");
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType61);
    }

    @Test
    public void test00093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00093");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod6.clear();
        mutablePeriod6.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType16 = null;
        boolean boolean17 = mutablePeriod6.isSupported(durationFieldType16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology20);
        int int22 = mutablePeriod21.getWeeks();
        mutablePeriod6.add((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getEnd();
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval35);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test00094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00094");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getEnd();
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        boolean boolean80 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration73.toPeriod(periodType81, chronology82);
        org.joda.time.PeriodType periodType84 = periodType81.withYearsRemoved();
        org.joda.time.PeriodType periodType85 = periodType84.withDaysRemoved();
        org.joda.time.PeriodType periodType86 = periodType85.withSecondsRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime62, periodType86);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod88.setSeconds(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-11T09:35:19.197Z" + "'", str63, "2022-02-11T09:35:19.197Z");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test00095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00095");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        boolean boolean4 = periodFormatter3.isPrinter();
        org.joda.time.PeriodType periodType5 = periodFormatter3.getParseType();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter3.getParser();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod8 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:17.111Z", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodType5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNull(periodParser7);
    }

    @Test
    public void test00096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00096");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        org.joda.time.PeriodType periodType39 = periodFormatter38.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod41 = periodFormatter38.parseMutablePeriod("2022-01-27T19:33:34.433Z/2022-02-11T09:35:14.433Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodType39);
    }

    @Test
    public void test00097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00097");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutablePeriod26.setPeriod(readablePeriod27);
        mutablePeriod26.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.days();
        int int32 = mutablePeriod26.get(durationFieldType31);
        boolean boolean33 = periodType19.isSupported(durationFieldType31);
        java.lang.String str34 = periodType19.getName();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 100, (long) (byte) 100, periodType19, chronology35);
        int int37 = mutablePeriod36.getYears();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod36.setMonths(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Years" + "'", str34, "Years");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test00098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00098");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.days();
        java.lang.String str12 = periodType11.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod3, periodType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Days" + "'", str12, "Days");
    }

    @Test
    public void test00099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00099");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        boolean boolean53 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((long) (-1), (-1));
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        boolean boolean73 = duration60.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration66.toPeriod(periodType74, chronology75);
        org.joda.time.PeriodType periodType77 = periodType74.withYearsRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withDaysRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration50, periodType79);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod80.addYears(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:35:20.362Z" + "'", str42, "2022-02-11T09:35:20.362Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
    }

    @Test
    public void test00100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00100");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue((int) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00101");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setValue(32, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00102");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod6 = org.joda.time.MutablePeriod.parse("PT0.010S", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(locale5);
    }

    @Test
    public void test00103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00103");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = mutablePeriod6.get(durationFieldType9);
        int int11 = mutablePeriod6.size();
        mutablePeriod6.addWeeks((int) (short) 0);
        mutablePeriod6.setPeriod((long) (-1), 1L);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod6, "2022-02-11T09:35:12.393Z", 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test00104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00104");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = chronology13.getDateTimeMillis((int) (byte) 10, 100, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test00105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00105");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.PeriodType periodType33 = periodType17.withMonthsRemoved();
        java.lang.String str34 = periodType17.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PeriodType[Years]" + "'", str34, "PeriodType[Years]");
    }

    @Test
    public void test00106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00106");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        java.lang.String str44 = dateTime43.toString();
        boolean boolean45 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime28.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration48 = new org.joda.time.Duration((java.lang.Object) dateTimeZone47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:35:21.772Z" + "'", str44, "2022-02-11T09:35:21.772Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
    }

    @Test
    public void test00107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00107");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        java.lang.String str44 = dateTime43.toString();
        boolean boolean45 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime28.getZone();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes(1644572108797L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        java.lang.String str54 = duration51.toString();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean57 = periodType55.equals((java.lang.Object) false);
        org.joda.time.Period period58 = duration51.toPeriod(periodType55);
        org.joda.time.PeriodType periodType59 = periodType55.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(periodType59);
        org.joda.time.PeriodType periodType61 = periodType59.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration49, periodType61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours63 = duration49.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 27409535146");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:35:21.833Z" + "'", str44, "2022-02-11T09:35:21.833Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT126000S" + "'", str54, "PT126000S");
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType61);
    }

    @Test
    public void test00108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00108");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod7 = periodFormatter2.parseMutablePeriod("2022-01-27T19:33:41.087Z/2022-02-11T09:35:21.087Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
    }

    @Test
    public void test00109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00109");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.setHours(0);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = mutablePeriod3.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test00110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00110");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        java.lang.Class<?> wildcardClass17 = chronology13.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00111");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = chronology13.get(readablePartial18, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00112");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod3.addDays(4);
        mutablePeriod3.addMonths((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test00113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00113");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType(1);
        java.lang.Class<?> wildcardClass23 = periodType19.getClass();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00114");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod42 = periodFormatter38.parseMutablePeriod("2022-02-11T09:35:10.317Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
    }

    @Test
    public void test00115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00115");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology13.months();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology13.getDateTimeMillis(4, 8, (int) (short) 1, 100, 3, (int) (short) 100, 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test00116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00116");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:10.568Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:10.568Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00117");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        mutablePeriod3.addMinutes((-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
    }

    @Test
    public void test00118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00118");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        org.joda.time.PeriodType periodType32 = periodType17.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration33 = new org.joda.time.Duration((java.lang.Object) periodType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType32);
    }

    @Test
    public void test00119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00119");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isPrinter();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod9.clear();
        mutablePeriod9.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = mutablePeriod9.isSupported(durationFieldType19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology23);
        int int25 = mutablePeriod24.getWeeks();
        mutablePeriod9.add((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getEnd();
        mutablePeriod9.setPeriod((org.joda.time.ReadableInterval) interval38);
        mutablePeriod9.setMonths((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod9, "PeriodType[YearsNoYears]", 32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test00120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00120");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfMinute();
        boolean boolean40 = mutablePeriod3.equals((java.lang.Object) chronology35);
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfDay();
        org.joda.time.DurationField durationField44 = chronology41.minutes();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test00121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00121");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes(1644572108797L);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period27 = duration25.toPeriod();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 27409535146");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(duration25);
    }

    @Test
    public void test00122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00122");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = chronology13.get(readablePartial18, 1644572108797L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00123");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        mutablePeriod5.addWeeks((int) (short) 0);
        int int10 = mutablePeriod5.getDays();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = mutablePeriod5.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00124");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.format.PeriodParser periodParser41 = periodFormatter40.getParser();
        java.lang.StringBuffer stringBuffer42 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        mutablePeriod50.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod61 = mutablePeriod50.copy();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        int int66 = mutablePeriod65.getYears();
        java.lang.String str67 = mutablePeriod65.toString();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutablePeriod72.setPeriod(readablePeriod73);
        mutablePeriod72.addWeeks((int) (byte) 10);
        mutablePeriod65.add((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(readableInstant78, readableInstant79);
        boolean boolean81 = mutablePeriod72.equals((java.lang.Object) readableInstant78);
        mutablePeriod50.add((org.joda.time.ReadablePeriod) mutablePeriod72);
        mutablePeriod72.setMillis((-1));
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter40.printTo(stringBuffer42, (org.joda.time.ReadablePeriod) mutablePeriod72);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(periodParser41);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PT0.052S" + "'", str67, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test00125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00125");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType40 = periodType36.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
    }

    @Test
    public void test00126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00126");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        mutablePeriod4.addDays(10);
        mutablePeriod4.setWeeks((int) (byte) -1);
        mutablePeriod4.addWeeks(8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((java.lang.Object) period28, chronology44);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod4, chronology44);
        long long58 = chronology44.getDateTimeMillis((int) (short) 1, 3, (int) (byte) 1, 0, (int) '#', (int) (short) 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long64 = chronology44.getDateTimeMillis(1644572119084L, 0, (int) '4', (int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-62130497090000L) + "'", long58 == (-62130497090000L));
    }

    @Test
    public void test00127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00127");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, periodType1, chronology17);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod18.setMinutes(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test00128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00128");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.eras();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test00129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00129");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withDaysRemoved();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.PeriodType periodType31 = periodType29.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((int) '#', 32, (int) (short) -1, 1, (int) (byte) 100, (int) '#', (int) (short) -1, 8, periodType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test00130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00130");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.add((long) ' ');
        mutablePeriod14.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod14.isSupported(durationFieldType28);
        boolean boolean31 = mutablePeriod3.isSupported(durationFieldType28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = mutablePeriod3.toDurationTo(readableInstant32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        boolean boolean61 = interval46.contains((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        org.joda.time.Duration duration88 = interval85.toDuration();
        boolean boolean89 = interval73.overlaps((org.joda.time.ReadableInterval) interval85);
        boolean boolean90 = interval46.isBefore((org.joda.time.ReadableInterval) interval73);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration92 = interval46.toDuration();
        org.joda.time.Period period93 = duration92.toPeriod();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test00131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00131");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter41.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod43 = org.joda.time.MutablePeriod.parse("ISOChronology[Etc/UTC]", periodFormatter41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNull(periodParser42);
    }

    @Test
    public void test00132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00132");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod4 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:06.144Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00133");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime26.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:35:25.503Z" + "'", str42, "2022-02-11T09:35:25.503Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
    }

    @Test
    public void test00134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00134");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572117941L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572117941 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00135");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType11 = mutablePeriod7.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.052S");
    }

    @Test
    public void test00136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00136");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DurationFieldType[] durationFieldTypeArray69 = mutablePeriod67.getFieldTypes();
        int[] intArray72 = chronology57.get((org.joda.time.ReadablePeriod) mutablePeriod67, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField73 = chronology57.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray76 = chronology57.get(readablePartial74, 1644572117941L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test00137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00137");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        int int50 = mutablePeriod49.getYears();
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod49.copy();
        mutablePeriod51.setYears((int) (short) 10);
        mutablePeriod51.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        mutablePeriod51.setPeriod((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Duration duration82 = duration80.plus(readableDuration81);
        org.joda.time.Duration duration84 = duration78.withDurationAdded((org.joda.time.ReadableDuration) duration80, (int) (byte) 10);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Period period86 = duration84.toPeriod(chronology85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Interval interval88 = duration84.toIntervalTo(readableInstant87);
        org.joda.time.Period period89 = interval88.toPeriod();
        mutablePeriod51.add((org.joda.time.ReadableInterval) interval88);
        boolean boolean91 = interval45.contains((org.joda.time.ReadableInterval) interval88);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval45);
        mutablePeriod3.setHours(10);
        mutablePeriod3.addMinutes(0);
        mutablePeriod3.addYears((int) '4');
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test00138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00138");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = mutablePeriod63.getFieldTypes();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.forFields(durationFieldTypeArray65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod68.addHours(0);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = duration76.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Period period84 = duration82.toPeriod(chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        org.joda.time.Period period87 = interval86.toPeriod();
        org.joda.time.Chronology chronology88 = interval86.getChronology();
        mutablePeriod68.setPeriod((org.joda.time.ReadableDuration) duration74, chronology88);
        org.joda.time.DateTimeField dateTimeField90 = chronology88.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType66, chronology88);
        org.joda.time.DateTimeField dateTimeField92 = chronology88.halfdayOfDay();
        org.joda.time.DurationField durationField93 = chronology88.months();
        org.joda.time.DateTimeField dateTimeField94 = chronology88.clockhourOfHalfday();
        org.joda.time.Period period95 = duration53.toPeriod(chronology88);
        org.joda.time.DateTimeField dateTimeField96 = chronology88.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField97 = chronology88.hourOfHalfday();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:35:26.028Z" + "'", str51, "2022-02-11T09:35:26.028Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
    }

    @Test
    public void test00139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00139");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:14.622Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:14.622Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00140");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.io.Writer writer39 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        mutablePeriod47.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod61.clear();
        mutablePeriod61.setValue((int) (byte) 0, (-1));
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod61, chronology72);
        mutablePeriod73.setSeconds((int) '4');
        mutablePeriod73.addHours(100);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer39, (org.joda.time.ReadablePeriod) mutablePeriod73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
    }

    @Test
    public void test00141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00141");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        java.lang.String str3 = duration2.toString();
        org.joda.time.Duration duration5 = new org.joda.time.Duration(10L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration16 = duration7.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        boolean boolean46 = interval31.contains((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        java.lang.String str61 = dateTime60.toString();
        boolean boolean62 = dateTime45.isBefore((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime45.getZone();
        org.joda.time.Period period65 = duration15.toPeriodTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period66 = duration5.toPeriodTo((org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str67 = dateTime45.toString();
        org.joda.time.Period period68 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str69 = duration2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0S" + "'", str3, "PT0S");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-11T09:35:26.518Z" + "'", str61, "2022-02-11T09:35:26.518Z");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-11T09:35:26.518Z" + "'", str67, "2022-02-11T09:35:26.518Z");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT0S" + "'", str69, "PT0S");
    }

    @Test
    public void test00142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00142");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType(51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test00143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00143");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod7.add((long) ' ');
        int int10 = mutablePeriod7.getDays();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.millis();
        mutablePeriod7.add(durationFieldType11, (int) (byte) 1);
        int int14 = mutablePeriod7.getWeeks();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        mutablePeriod18.add((long) ' ');
        mutablePeriod18.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = mutablePeriod18.isSupported(durationFieldType32);
        boolean boolean35 = mutablePeriod7.isSupported(durationFieldType32);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = mutablePeriod7.toDurationTo(readableInstant36);
        int int39 = mutablePeriod7.getValue(1);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod7, "hi!", (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test00144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00144");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        mutablePeriod18.setSeconds(1);
        mutablePeriod18.addDays((int) (short) 10);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00145");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        mutablePeriod63.clear();
        mutablePeriod63.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType73 = null;
        boolean boolean74 = mutablePeriod63.isSupported(durationFieldType73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology77);
        int int79 = mutablePeriod78.getWeeks();
        mutablePeriod63.add((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        org.joda.time.Duration duration88 = duration82.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = duration88.toPeriod(chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = duration88.toIntervalTo(readableInstant91);
        org.joda.time.Interval interval93 = interval92.toInterval();
        org.joda.time.DateTime dateTime94 = interval92.getEnd();
        mutablePeriod63.setPeriod((org.joda.time.ReadableInterval) interval92);
        boolean boolean96 = interval29.isBefore((org.joda.time.ReadableInterval) interval92);
        long long97 = interval29.getStartMillis();
        org.joda.time.Period period98 = interval29.toPeriod();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1643312026949L + "'", long97 == 1643312026949L);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test00146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00146");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        org.joda.time.PeriodType periodType39 = periodFormatter38.getParseType();
        boolean boolean40 = periodFormatter38.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period42 = periodFormatter38.parsePeriod("2022-02-11T09:35:11.225Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00147");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        org.joda.time.PeriodType periodType39 = periodFormatter38.getParseType();
        java.io.Writer writer40 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        mutablePeriod44.clear();
        mutablePeriod44.addHours((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter38.printTo(writer40, (org.joda.time.ReadablePeriod) mutablePeriod44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodType39);
    }

    @Test
    public void test00148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00148");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = mutablePeriod3.getValue(51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00149");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod10.copy();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = mutablePeriod10.toDurationTo(readableInstant22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration25, chronology26);
        boolean boolean28 = duration2.isEqual((org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getEnd();
        java.lang.String str73 = dateTime72.toString();
        boolean boolean74 = dateTime57.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration75 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime57.getZone();
        org.joda.time.Period period77 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime57.getZone();
        org.joda.time.PeriodType periodType80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone79, periodType80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:35:27.379Z" + "'", str73, "2022-02-11T09:35:27.379Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
    }

    @Test
    public void test00150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00150");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.months();
        int int22 = periodType20.indexOf(durationFieldType21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType24 = periodType20.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test00151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00151");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.Duration duration25 = duration7.withDurationAdded((long) 3, (int) '4');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, (org.joda.time.ReadableDuration) duration27, periodType28);
        boolean boolean30 = duration7.isEqual((org.joda.time.ReadableDuration) duration27);
        java.lang.Class<?> wildcardClass31 = duration7.getClass();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test00152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00152");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter38.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod41 = periodFormatter38.parseMutablePeriod("2022-02-11T09:35:27.455Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test00153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00153");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        boolean boolean5 = periodFormatter2.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod7 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:17.660Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00154");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.format.PeriodPrinter periodPrinter6 = null;
        org.joda.time.format.PeriodParser periodParser7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = new org.joda.time.format.PeriodFormatter(periodPrinter6, periodParser7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration18.toPeriod(periodType26, chronology27);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        int int39 = mutablePeriod33.get(durationFieldType38);
        boolean boolean40 = periodType26.isSupported(durationFieldType38);
        int int41 = periodType26.size();
        org.joda.time.PeriodType periodType42 = periodType26.withMonthsRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter8.withParseType(periodType42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = mutablePeriod3.toString(periodFormatter44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
    }

    @Test
    public void test00155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00155");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        boolean boolean5 = periodFormatter2.isParser();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        int int10 = mutablePeriod9.getYears();
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod9.copy();
        mutablePeriod11.setYears((int) (short) 10);
        mutablePeriod11.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        mutablePeriod11.setPeriod((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        mutablePeriod40.add((long) ' ');
        int int43 = mutablePeriod40.getDays();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.millis();
        mutablePeriod40.add(durationFieldType44, (int) (byte) 1);
        int int47 = mutablePeriod40.getWeeks();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        mutablePeriod51.add((long) ' ');
        mutablePeriod51.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        mutablePeriod60.setPeriod(readablePeriod61);
        mutablePeriod60.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.days();
        int int66 = mutablePeriod60.get(durationFieldType65);
        boolean boolean67 = mutablePeriod51.isSupported(durationFieldType65);
        boolean boolean68 = mutablePeriod40.isSupported(durationFieldType65);
        mutablePeriod11.set(durationFieldType65, (int) (short) 1);
        mutablePeriod11.addMinutes((int) (short) 0);
        mutablePeriod11.addDays((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod11, "PT0.010S", (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test00156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00156");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = mutablePeriod32.getFieldTypes();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod37.addHours(0);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        mutablePeriod37.setPeriod((org.joda.time.ReadableDuration) duration43, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType35, chronology57);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) (short) 1, (long) (short) 100, periodType22, chronology57);
        org.joda.time.PeriodType periodType62 = periodType22.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration63 = new org.joda.time.Duration((java.lang.Object) periodType62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(periodType62);
    }

    @Test
    public void test00157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00157");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        mutablePeriod3.setPeriod((int) (short) 0, (int) 'a', (int) (byte) 1, 10, (-1), (int) (short) 0, 4, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType18 = mutablePeriod3.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test00158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00158");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Minutes minutes17 = duration3.toStandardMinutes();
        org.joda.time.Duration duration19 = duration3.plus((long) 8);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getEnd();
        boolean boolean47 = interval32.contains((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Instant instant48 = dateTime46.toInstant();
        org.joda.time.Period period49 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int51 = instant48.get(dateTimeFieldType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test00159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00159");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.addMillis(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00160");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology40);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        mutablePeriod33.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.format.PeriodPrinter periodPrinter44 = null;
        org.joda.time.format.PeriodParser periodParser45 = null;
        org.joda.time.format.PeriodFormatter periodFormatter46 = new org.joda.time.format.PeriodFormatter(periodPrinter44, periodParser45);
        boolean boolean47 = periodFormatter46.isPrinter();
        org.joda.time.PeriodType periodType48 = periodFormatter46.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = mutablePeriod33.toString(periodFormatter46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(periodType48);
    }

    @Test
    public void test00161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00161");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod7 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:09.714Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
    }

    @Test
    public void test00162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00162");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Hours hours4 = duration3.toStandardHours();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        boolean boolean9 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        int int20 = duration6.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod22.addHours(0);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration28, chronology42);
        org.joda.time.Duration duration46 = duration28.withDurationAdded((long) 3, (int) '4');
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant47, (org.joda.time.ReadableDuration) duration48, periodType49);
        boolean boolean51 = duration28.isEqual((org.joda.time.ReadableDuration) duration48);
        boolean boolean52 = duration6.equals((java.lang.Object) boolean51);
        org.joda.time.Period period53 = duration6.toPeriod();
        org.joda.time.Period period54 = period53.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
    }

    @Test
    public void test00163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00163");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00164");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test00165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00165");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType34 = periodType17.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test00166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00166");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant40, readableInstant41);
        mutablePeriod42.addWeeks((int) 'a');
        mutablePeriod23.add((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.seconds();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        boolean boolean63 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration56.toPeriod(periodType64, chronology65);
        org.joda.time.PeriodType periodType67 = periodType64.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.months();
        int int69 = periodType67.indexOf(durationFieldType68);
        int int70 = periodType46.indexOf(durationFieldType68);
        mutablePeriod23.add(durationFieldType68, (int) (byte) -1);
        int int73 = mutablePeriod7.get(durationFieldType68);
        mutablePeriod7.addYears((int) (short) 1);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test00167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00167");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DurationFieldType[] durationFieldTypeArray32 = mutablePeriod21.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod21.setValue((int) '#', 51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray32);
    }

    @Test
    public void test00168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00168");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod10 = periodFormatter8.parseMutablePeriod("2022-02-11T09:35:23.918Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodFormatter8);
    }

    @Test
    public void test00169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00169");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("PeriodType[YearWeekDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[YearWeekDay]\" is malformed at \"eriodType[YearWeekDay]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00170");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.PeriodType periodType23 = periodType21.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = periodType21.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test00171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00171");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        int int15 = mutablePeriod10.getMonths();
        int int16 = mutablePeriod10.size();
        mutablePeriod10.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod10.toMutablePeriod();
        int int20 = mutablePeriod19.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod19, "", (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test00172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00172");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology55);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutablePeriod52.clear();
        mutablePeriod52.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType62 = null;
        boolean boolean63 = mutablePeriod52.isSupported(durationFieldType62);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        org.joda.time.Period period77 = interval76.toPeriod();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekyearOfCentury();
        mutablePeriod52.add((long) (short) 100, chronology78);
        org.joda.time.DurationField durationField82 = chronology78.halfdays();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) duration31, chronology78);
        org.joda.time.ReadablePartial readablePartial84 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long86 = chronology78.set(readablePartial84, 1644572126356L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test00173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00173");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DurationField durationField39 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = chronology34.getDateTimeMillis(1644572123305L, (int) (byte) 100, (int) (short) 10, 100, 32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test00174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00174");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.setMinutes((int) ' ');
        mutablePeriod4.setPeriod((long) (short) -1, (long) (short) 1);
        int int12 = mutablePeriod4.getYears();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test00175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00175");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        java.lang.StringBuffer stringBuffer5 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.hourOfHalfday();
        mutablePeriod10.setPeriod((long) '#', chronology29);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer5, (org.joda.time.ReadablePeriod) mutablePeriod10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test00176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00176");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        int int5 = mutablePeriod1.get(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod1.copy();
        mutablePeriod6.addWeeks(2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test00177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00177");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfMinute();
        boolean boolean40 = mutablePeriod3.equals((java.lang.Object) chronology35);
        int int41 = mutablePeriod3.getYears();
        int int42 = mutablePeriod3.getYears();
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test00178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00178");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("Days");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Days\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00179");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:26.518Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:26.518Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00180");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        int int10 = mutablePeriod9.getYears();
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod9.copy();
        mutablePeriod11.setYears((int) (short) 10);
        mutablePeriod11.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration30.toIntervalTo(readableInstant33);
        org.joda.time.Interval interval35 = interval34.toInterval();
        mutablePeriod11.setPeriod((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        boolean boolean64 = interval49.contains((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = interval35.isBefore((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod69.setMillis((int) (short) 0);
        mutablePeriod69.addMonths((int) (short) 1);
        mutablePeriod69.setMinutes((int) (byte) 1);
        mutablePeriod69.setYears((int) (short) 100);
        mutablePeriod69.addDays(1);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology82);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology86);
        mutablePeriod83.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod87);
        java.lang.Object obj89 = mutablePeriod87.clone();
        org.joda.time.Duration duration91 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology92 = null;
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((java.lang.Object) duration91, chronology92);
        org.joda.time.ReadableInstant readableInstant94 = null;
        org.joda.time.Interval interval95 = duration91.toIntervalTo(readableInstant94);
        mutablePeriod87.add((org.joda.time.ReadableInterval) interval95);
        org.joda.time.DateTime dateTime97 = interval95.getStart();
        org.joda.time.Duration duration98 = mutablePeriod69.toDurationFrom((org.joda.time.ReadableInstant) dateTime97);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(duration98);
    }

    @Test
    public void test00181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00181");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1);
    }

    @Test
    public void test00182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00182");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1, (int) (short) 100, (int) ' ', 10, 2, 0, (int) (byte) 100, (int) (short) 0, periodType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
    }

    @Test
    public void test00183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00183");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = hours8.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
    }

    @Test
    public void test00184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00184");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.add((long) ' ');
        mutablePeriod14.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod14.isSupported(durationFieldType28);
        boolean boolean31 = mutablePeriod3.isSupported(durationFieldType28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = mutablePeriod3.toDurationTo(readableInstant32);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = mutablePeriod3.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration33);
    }

    @Test
    public void test00185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00185");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod3.addWeeks(10);
        mutablePeriod3.setSeconds((int) (short) 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
    }

    @Test
    public void test00186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00186");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalTo(readableInstant11);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(100000L, chronology14);
        org.joda.time.DurationField durationField20 = chronology14.millis();
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = chronology14.get(readablePartial21, 1260100000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test00187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00187");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType22 = periodType17.getFieldType(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test00188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00188");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod12.clear();
        org.joda.time.ReadableInterval readableInterval19 = null;
        mutablePeriod12.setPeriod(readableInterval19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = periodFormatter8.print((org.joda.time.ReadablePeriod) mutablePeriod12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodFormatter8);
    }

    @Test
    public void test00189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00189");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        boolean boolean17 = mutablePeriod3.equals((java.lang.Object) (-1.0f));
        mutablePeriod3.addMillis((int) '#');
        mutablePeriod3.setSeconds((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = mutablePeriod3.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00190");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        boolean boolean6 = periodFormatter3.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod7 = org.joda.time.MutablePeriod.parse("", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00191");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.plus(readableDuration58);
        org.joda.time.Duration duration61 = duration55.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) (byte) 10);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        boolean boolean70 = duration57.isShorterThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration63.toPeriod(periodType71, chronology72);
        org.joda.time.PeriodType periodType74 = periodType71.withYearsRemoved();
        org.joda.time.PeriodType periodType75 = periodType71.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean77 = periodType71.isSupported(durationFieldType76);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.add(durationFieldType76, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:35:32.531Z" + "'", str51, "2022-02-11T09:35:32.531Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test00192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00192");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1);
        org.joda.time.format.PeriodPrinter periodPrinter3 = null;
        org.joda.time.format.PeriodParser periodParser4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = new org.joda.time.format.PeriodFormatter(periodPrinter3, periodParser4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = mutablePeriod2.toString(periodFormatter5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00193");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration1.isEqual(readableDuration8);
        org.joda.time.Minutes minutes10 = duration1.toStandardMinutes();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        java.lang.String str15 = duration12.toString();
        int int16 = duration1.compareTo((org.joda.time.ReadableDuration) duration12);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT126000S" + "'", str15, "PT126000S");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test00194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00194");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration18.toPeriod(chronology26);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        int int30 = mutablePeriod3.indexOf(durationFieldType29);
        mutablePeriod3.addHours((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue(10, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test00195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00195");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getEnd();
        boolean boolean41 = interval26.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        java.lang.String str56 = dateTime55.toString();
        boolean boolean57 = dateTime40.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int60 = dateTime40.get(dateTimeFieldType59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:35:33.549Z" + "'", str56, "2022-02-11T09:35:33.549Z");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test00196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00196");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1644572108797L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00197");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addMonths(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod16.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        java.lang.String str23 = mutablePeriod20.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod20.setValue(32, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.052S" + "'", str23, "PT0.052S");
    }

    @Test
    public void test00198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00198");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = chronology13.get(readablePartial15, 1644572114290L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test00199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00199");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0, (int) (byte) 100, (int) (short) 100, 0, (int) (byte) 1, 0, (int) 'a', (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod17, "2022-02-11T09:35:27.455Z", 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodFormatter8);
    }

    @Test
    public void test00200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00200");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getEnd();
        boolean boolean58 = interval43.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        mutablePeriod63.clear();
        mutablePeriod63.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType73 = null;
        boolean boolean74 = mutablePeriod63.isSupported(durationFieldType73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology77);
        int int79 = mutablePeriod78.getWeeks();
        mutablePeriod63.add((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        org.joda.time.Duration duration88 = duration82.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = duration88.toPeriod(chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = duration88.toIntervalTo(readableInstant91);
        org.joda.time.Interval interval93 = interval92.toInterval();
        org.joda.time.DateTime dateTime94 = interval92.getEnd();
        mutablePeriod63.setPeriod((org.joda.time.ReadableInterval) interval92);
        boolean boolean96 = interval29.isBefore((org.joda.time.ReadableInterval) interval92);
        long long97 = interval29.getStartMillis();
        org.joda.time.ReadableInterval readableInterval98 = null;
        boolean boolean99 = interval29.overlaps(readableInterval98);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1643312034248L + "'", long97 == 1643312034248L);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00201");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutablePeriod44.setPeriod(readablePeriod45);
        mutablePeriod44.addWeeks((int) (byte) 10);
        int int49 = mutablePeriod44.getMonths();
        int int50 = mutablePeriod44.size();
        mutablePeriod44.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod44.toMutablePeriod();
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = mutablePeriod44.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod53);
    }

    @Test
    public void test00202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00202");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) "2022-02-11T09:35:27.110Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:27.110Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00203");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        java.io.Writer writer5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableInstant6, readableDuration7);
        mutablePeriod8.setMillis(0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod8.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer5, (org.joda.time.ReadablePeriod) mutablePeriod8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
    }

    @Test
    public void test00204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00204");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withYearsRemoved();
        int int24 = periodType22.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test00205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00205");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:32.787Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:32.787Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00206");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((java.lang.Object) periodType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test00207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00207");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes(1644572108797L);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration25);
        mutablePeriod23.setYears((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.addSeconds(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(duration25);
    }

    @Test
    public void test00208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00208");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period40 = periodFormatter38.parsePeriod("PT60S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
    }

    @Test
    public void test00209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00209");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology3);
        mutablePeriod4.add((long) ' ');
        mutablePeriod4.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutablePeriod13.setPeriod(readablePeriod14);
        mutablePeriod13.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        int int19 = mutablePeriod13.get(durationFieldType18);
        boolean boolean20 = mutablePeriod4.isSupported(durationFieldType18);
        boolean boolean21 = periodType0.isSupported(durationFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType23 = periodType0.getFieldType((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00210");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572120450L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572120450 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00211");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.setMinutes((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
    }

    @Test
    public void test00212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00212");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        org.joda.time.PeriodType periodType32 = periodType17.withHoursRemoved();
        org.joda.time.PeriodType periodType33 = periodType32.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType35 = periodType33.getFieldType(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test00213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00213");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = chronology29.getDateTimeMillis((long) (short) 0, 51, 8, 2, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test00214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00214");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration3.withMillis((long) (-1));
        org.joda.time.Duration duration8 = duration5.withDurationAdded(0L, (int) (short) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Minutes minutes26 = duration12.toStandardMinutes();
        org.joda.time.Duration duration28 = duration12.plus((long) 8);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        boolean boolean56 = interval41.contains((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Instant instant57 = dateTime55.toInstant();
        org.joda.time.Period period58 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        boolean boolean77 = duration64.isShorterThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration70.toPeriod(periodType78, chronology79);
        org.joda.time.PeriodType periodType81 = periodType78.withYearsRemoved();
        org.joda.time.PeriodType periodType82 = periodType81.withDaysRemoved();
        org.joda.time.PeriodType periodType83 = periodType82.withSecondsRemoved();
        org.joda.time.PeriodType periodType84 = periodType82.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(1643312029209L, 126000000L, periodType84);
        org.joda.time.Period period86 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) instant57, periodType84);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    public void test00215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00215");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        mutablePeriod38.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        int int55 = mutablePeriod49.get(durationFieldType54);
        mutablePeriod38.add(durationFieldType54, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod68 = mutablePeriod38.copy();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = mutablePeriod68.get(durationFieldType69);
        long long73 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) ' ', 3);
        org.joda.time.DateTimeField dateTimeField74 = chronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField75 = chronology29.year();
        org.joda.time.DateTimeField dateTimeField76 = chronology29.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long81 = chronology29.getDateTimeMillis(0, (int) '#', (int) (byte) 100, 51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-124L) + "'", long73 == (-124L));
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test00216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00216");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        mutablePeriod18.setSeconds(1);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod18.set(durationFieldType21, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test00217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00217");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod30.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        mutablePeriod44.clear();
        mutablePeriod44.setValue((int) (byte) 0, (-1));
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod44, chronology55);
        mutablePeriod56.setSeconds((int) '4');
        mutablePeriod56.add((int) '#', (int) ' ', 1, (int) (short) 100, (int) (short) 100, 0, (int) (byte) 100, (int) (byte) -1);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
    }

    @Test
    public void test00218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00218");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.setWeeks((int) (short) 100);
        mutablePeriod18.setMillis((int) (byte) -1);
        org.joda.time.format.PeriodPrinter periodPrinter25 = null;
        org.joda.time.format.PeriodParser periodParser26 = null;
        org.joda.time.format.PeriodFormatter periodFormatter27 = new org.joda.time.format.PeriodFormatter(periodPrinter25, periodParser26);
        boolean boolean28 = periodFormatter27.isPrinter();
        org.joda.time.PeriodType periodType29 = periodFormatter27.getParseType();
        org.joda.time.format.PeriodParser periodParser30 = periodFormatter27.getParser();
        org.joda.time.format.PeriodParser periodParser31 = periodFormatter27.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = mutablePeriod18.toString(periodFormatter27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(periodType29);
        org.junit.Assert.assertNull(periodParser30);
        org.junit.Assert.assertNull(periodParser31);
    }

    @Test
    public void test00219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00219");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.format.PeriodFormatter periodFormatter33 = null;
        java.lang.String str34 = mutablePeriod26.toString(periodFormatter33);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod26.setValue((int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.052S" + "'", str34, "PT0.052S");
    }

    @Test
    public void test00220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00220");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = duration1.compareTo(readableDuration11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
    }

    @Test
    public void test00221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00221");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = interval29.isBefore(readableInterval32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval32);
        int int35 = mutablePeriod34.getHours();
        mutablePeriod34.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray47 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 1, (long) 3);
        org.joda.time.DurationField durationField48 = chronology17.hours();
        long long52 = chronology17.add(1644572122264L, (long) (short) -1, (int) (short) 10);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1644572122254L + "'", long52 == 1644572122254L);
    }

    @Test
    public void test00222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00222");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        boolean boolean12 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration9);
        boolean boolean14 = duration1.equals((java.lang.Object) 0.0d);
        org.joda.time.ReadableDuration readableDuration15 = null;
        boolean boolean16 = duration1.isLongerThan(readableDuration15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        mutablePeriod20.setMillis((int) (short) 0);
        mutablePeriod20.addMonths((int) (short) 1);
        mutablePeriod20.setMinutes((int) (byte) 1);
        mutablePeriod20.addYears(1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        boolean boolean35 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration32);
        mutablePeriod20.add((org.joda.time.ReadableDuration) duration30);
        int int37 = duration1.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        boolean boolean54 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration47.toPeriod(periodType55, chronology56);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutablePeriod62.setPeriod(readablePeriod63);
        mutablePeriod62.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.days();
        int int68 = mutablePeriod62.get(durationFieldType67);
        boolean boolean69 = periodType55.isSupported(durationFieldType67);
        int int70 = periodType55.size();
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.weeks();
        int int72 = periodType55.indexOf(durationFieldType71);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod74.addHours(0);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        org.joda.time.Duration duration88 = duration82.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = duration88.toPeriod(chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = duration88.toIntervalTo(readableInstant91);
        org.joda.time.Period period93 = interval92.toPeriod();
        org.joda.time.Chronology chronology94 = interval92.getChronology();
        mutablePeriod74.setPeriod((org.joda.time.ReadableDuration) duration80, chronology94);
        org.joda.time.DurationField durationField96 = durationFieldType71.getField(chronology94);
        boolean boolean97 = duration1.equals((java.lang.Object) durationFieldType71);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00223");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.days();
        boolean boolean5 = mutablePeriod1.isSupported(durationFieldType4);
        mutablePeriod1.addMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = mutablePeriod1.getValue(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test00224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00224");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Days days10 = duration9.toStandardDays();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (short) -1, periodType12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalTo(readableInstant24);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.Period period28 = duration9.toPeriod(periodType12, chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(160000L, 0L, periodType12);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test00225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00225");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod5);
        int int28 = mutablePeriod5.getMonths();
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test00226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00226");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = mutablePeriod6.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test00227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00227");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = mutablePeriod9.toDurationTo(readableInstant21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology25 = null;
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration24, chronology25);
        boolean boolean27 = duration1.isEqual((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getEnd();
        boolean boolean57 = interval42.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.DateTime dateTime71 = interval69.getEnd();
        java.lang.String str72 = dateTime71.toString();
        boolean boolean73 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration74 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime56.getZone();
        boolean boolean77 = dateTime56.equals((java.lang.Object) "PT60S");
        org.joda.time.Period period78 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime56.getZone();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-11T09:35:36.978Z" + "'", str72, "2022-02-11T09:35:36.978Z");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
    }

    @Test
    public void test00228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00228");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-11T09:35:30.173Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:30.173Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00229");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Minutes minutes26 = duration12.toStandardMinutes();
        org.joda.time.Duration duration28 = duration12.plus((long) 8);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) period41, chronology57);
        org.joda.time.DateTimeField dateTimeField63 = chronology57.halfdayOfDay();
        boolean boolean64 = duration12.equals((java.lang.Object) chronology57);
        org.joda.time.Duration duration65 = duration1.plus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.ReadableDuration readableDuration66 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int67 = duration65.compareTo(readableDuration66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
    }

    @Test
    public void test00230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00230");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        mutablePeriod5.addMinutes((int) (short) 0);
        mutablePeriod5.addDays((int) (short) 100);
        mutablePeriod5.setPeriod((int) (byte) 10, 0, (int) (byte) 100, (int) (short) 100, (int) '#', 10, (int) 'a', (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test00231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00231");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:19.266Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:19.266Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00232");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        org.joda.time.DurationField durationField77 = chronology74.eras();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:35:37.644Z" + "'", str42, "2022-02-11T09:35:37.644Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test00233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00233");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withWeeksRemoved();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(2704L, 10L, periodType4, chronology18);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod22.addMinutes((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Days" + "'", str3, "Days");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test00234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00234");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        java.lang.Object obj49 = null;
        boolean boolean50 = duration31.equals(obj49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        int int55 = mutablePeriod54.getMinutes();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        mutablePeriod59.setMillis((int) (short) 0);
        mutablePeriod59.addMonths((int) (short) 1);
        mutablePeriod59.setMinutes((int) (byte) 1);
        mutablePeriod59.addYears(1);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        boolean boolean74 = duration69.isLongerThan((org.joda.time.ReadableDuration) duration71);
        mutablePeriod59.add((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int79 = duration69.compareTo((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration87.toPeriod(chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Interval interval91 = duration87.toIntervalTo(readableInstant90);
        org.joda.time.Interval interval92 = interval91.toInterval();
        org.joda.time.DateTime dateTime93 = interval91.getEnd();
        org.joda.time.Period period94 = duration78.toPeriodTo((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.Duration duration95 = mutablePeriod54.toDurationTo((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.Period period96 = duration95.toPeriod();
        boolean boolean97 = duration31.equals((java.lang.Object) period96);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00235");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1643312029209L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00236");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((-124L));
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        mutablePeriod5.add((long) ' ');
        int int8 = mutablePeriod5.getDays();
        mutablePeriod5.setMillis((int) (byte) -1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getEnd();
        boolean boolean38 = interval23.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        java.lang.String str53 = dateTime52.toString();
        boolean boolean54 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = mutablePeriod5.toDurationFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology56 = dateTime52.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = dateTime52.isSupported(dateTimeFieldType57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval59 = duration1.toIntervalTo((org.joda.time.ReadableInstant) dateTime52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-11T09:35:38.760Z" + "'", str53, "2022-02-11T09:35:38.760Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test00237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00237");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter38.getLocale();
        java.lang.StringBuffer stringBuffer42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(readableInstant43, (org.joda.time.ReadableDuration) duration44, periodType45);
        org.joda.time.Days days47 = duration44.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter38.printTo(stringBuffer42, (org.joda.time.ReadablePeriod) days47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(days47);
    }

    @Test
    public void test00238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00238");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.Object obj21 = mutablePeriod19.clone();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((java.lang.Object) duration23, chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        mutablePeriod19.add((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        mutablePeriod11.setPeriod((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        boolean boolean47 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration40.toPeriod(periodType48, chronology49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutablePeriod55.setPeriod(readablePeriod56);
        mutablePeriod55.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        int int61 = mutablePeriod55.get(durationFieldType60);
        boolean boolean62 = periodType48.isSupported(durationFieldType60);
        int int63 = periodType48.size();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.weeks();
        int int65 = periodType48.indexOf(durationFieldType64);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod67.addHours(0);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Period period86 = interval85.toPeriod();
        org.joda.time.Chronology chronology87 = interval85.getChronology();
        mutablePeriod67.setPeriod((org.joda.time.ReadableDuration) duration73, chronology87);
        org.joda.time.DurationField durationField89 = durationFieldType64.getField(chronology87);
        boolean boolean90 = mutablePeriod11.isSupported(durationFieldType64);
        java.lang.String str91 = durationFieldType64.getName();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "weeks" + "'", str91, "weeks");
    }

    @Test
    public void test00239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00239");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("YearWeekDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"YearWeekDay\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00240");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addMonths(0);
        mutablePeriod3.setMillis((int) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod22.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod36.clear();
        mutablePeriod36.setValue((int) (byte) 0, (-1));
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int47 = mutablePeriod36.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod55.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod55.copy();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Duration duration68 = mutablePeriod55.toDurationTo(readableInstant67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology71 = null;
        mutablePeriod55.setPeriod((org.joda.time.ReadableDuration) duration70, chronology71);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutablePeriod77.setPeriod(readablePeriod78);
        mutablePeriod77.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.days();
        int int83 = mutablePeriod77.get(durationFieldType82);
        boolean boolean84 = mutablePeriod55.isSupported(durationFieldType82);
        mutablePeriod36.set(durationFieldType82, (int) (byte) 1);
        boolean boolean87 = mutablePeriod3.isSupported(durationFieldType82);
        java.lang.String str88 = durationFieldType82.getName();
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "days" + "'", str88, "days");
    }

    @Test
    public void test00241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00241");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.addDays((int) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration18.toPeriod(chronology26);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        int int30 = mutablePeriod3.indexOf(durationFieldType29);
        mutablePeriod3.setValue((int) (short) 0, 10);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test00242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00242");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("weekyears");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"weekyears\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00243");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfMonth();
        org.joda.time.Chronology chronology22 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, 28083659L, chronology17);
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test00244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00244");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, periodType1, chronology17);
        boolean boolean20 = periodType1.equals((java.lang.Object) 1000L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00245");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DurationField durationField19 = chronology15.days();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = chronology15.get(readablePartial21, 13824000000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test00246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00246");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addMonths(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod16.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod20.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = mutablePeriod20.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(mutablePeriod23);
    }

    @Test
    public void test00247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00247");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        java.lang.Object obj65 = mutablePeriod63.clone();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) duration67, chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        mutablePeriod63.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.Chronology chronology74 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfYear();
        org.joda.time.Period period76 = duration45.toPeriod(chronology74);
        org.joda.time.ReadablePartial readablePartial77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = chronology74.get(readablePartial77, 1644572129879L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:35:39.565Z" + "'", str42, "2022-02-11T09:35:39.565Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test00248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00248");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        long long54 = duration53.getStandardMinutes();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        boolean boolean71 = duration58.isShorterThan((org.joda.time.ReadableDuration) duration64);
        int int72 = duration53.compareTo((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Days days73 = duration64.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            int int75 = days73.getValue(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:35:39.850Z" + "'", str51, "2022-02-11T09:35:39.850Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(days73);
    }

    @Test
    public void test00249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00249");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DurationFieldType[] durationFieldTypeArray48 = mutablePeriod46.getFieldTypes();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.forFields(durationFieldTypeArray48);
        org.joda.time.PeriodType periodType50 = periodType49.withYearsRemoved();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Period period63 = interval62.toPeriod();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((java.lang.Object) periodFormatter2, periodType49, chronology64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.format.PeriodFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(durationFieldTypeArray48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test00250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00250");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = periodFormatter2.parsePeriod("PT0.001S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodPrinter5);
    }

    @Test
    public void test00251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00251");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        java.lang.String str11 = duration8.toString();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean14 = periodType12.equals((java.lang.Object) false);
        org.joda.time.Period period15 = duration8.toPeriod(periodType12);
        org.joda.time.PeriodType periodType16 = periodType12.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        boolean boolean18 = periodType12.equals((java.lang.Object) periodType17);
        org.joda.time.PeriodType periodType19 = periodType12.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        boolean boolean21 = periodType12.isSupported(durationFieldType20);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withParseType(periodType12);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod30.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod30.copy();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Duration duration43 = mutablePeriod30.toDurationTo(readableInstant42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology46 = null;
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration45, chronology46);
        int int48 = mutablePeriod30.getYears();
        mutablePeriod30.setYears((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod30, "2022-02-11T09:35:26.245Z", 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT126000S" + "'", str11, "PT126000S");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test00252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00252");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.monthOfYear();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = chronology20.get(readablePartial23, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test00253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00253");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod35.setMillis((int) (short) 0);
        mutablePeriod35.addMonths((int) (short) 1);
        mutablePeriod35.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutablePeriod46.setPeriod(readablePeriod47);
        mutablePeriod46.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        int int52 = mutablePeriod46.get(durationFieldType51);
        mutablePeriod35.add(durationFieldType51, (int) '#');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.MutablePeriod mutablePeriod65 = mutablePeriod35.copy();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.weeks();
        int int67 = mutablePeriod65.get(durationFieldType66);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = duration75.toPeriod(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = duration75.toIntervalTo(readableInstant78);
        org.joda.time.Period period80 = interval79.toPeriod();
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.hourOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.dayOfYear();
        org.joda.time.DateTimeField dateTimeField85 = chronology81.secondOfMinute();
        org.joda.time.DurationField durationField86 = chronology81.weekyears();
        org.joda.time.DurationField durationField87 = chronology81.millis();
        boolean boolean88 = durationFieldType66.isSupported(chronology81);
        boolean boolean89 = durationFieldType29.isSupported(chronology81);
        org.joda.time.DurationField durationField90 = chronology81.centuries();
        org.joda.time.DurationField durationField91 = chronology81.millis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(durationField91);
    }

    @Test
    public void test00254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00254");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        int int34 = periodType17.indexOf(durationFieldType33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod36.addHours(0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        mutablePeriod36.setPeriod((org.joda.time.ReadableDuration) duration42, chronology56);
        org.joda.time.DurationField durationField58 = durationFieldType33.getField(chronology56);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.secondOfMinute();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test00255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00255");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) '#', (long) (short) 10);
        long long3 = duration2.getStandardDays();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod7.clear();
        mutablePeriod7.addHours((int) (short) 10);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean19 = periodType17.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, periodType17, chronology20);
        mutablePeriod21.addYears((int) 'a');
        mutablePeriod21.addWeeks((int) '#');
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        long long40 = interval39.toDurationMillis();
        mutablePeriod21.add((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        int int46 = mutablePeriod45.getMinutes();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        mutablePeriod50.setMillis((int) (short) 0);
        mutablePeriod50.addMonths((int) (short) 1);
        mutablePeriod50.setMinutes((int) (byte) 1);
        mutablePeriod50.addYears(1);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        boolean boolean65 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration62);
        mutablePeriod50.add((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int70 = duration60.compareTo((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Interval interval83 = interval82.toInterval();
        org.joda.time.DateTime dateTime84 = interval82.getEnd();
        org.joda.time.Period period85 = duration69.toPeriodTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Duration duration86 = mutablePeriod45.toDurationTo((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean87 = interval39.isAfter((org.joda.time.ReadableInstant) dateTime84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval88 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateTime84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1260100000L + "'", long40 == 1260100000L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test00256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00256");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod18.toMutablePeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((long) 2);
        boolean boolean24 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration23);
        mutablePeriod19.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutablePeriod30.setPeriod(readablePeriod31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration44.plus(readableDuration45);
        org.joda.time.Duration duration48 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 10);
        boolean boolean49 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration42.toPeriod(periodType50, chronology51);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutablePeriod57.setPeriod(readablePeriod58);
        mutablePeriod57.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.days();
        int int63 = mutablePeriod57.get(durationFieldType62);
        boolean boolean64 = periodType50.isSupported(durationFieldType62);
        mutablePeriod30.add(durationFieldType62, (int) '4');
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration74.toPeriod(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        org.joda.time.Period period79 = interval78.toPeriod();
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.days();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.millisOfDay();
        org.joda.time.DurationField durationField84 = chronology80.minutes();
        org.joda.time.DurationField durationField85 = chronology80.seconds();
        org.joda.time.DateTimeField dateTimeField86 = chronology80.clockhourOfHalfday();
        boolean boolean87 = durationFieldType62.isSupported(chronology80);
        mutablePeriod19.add(durationFieldType62, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType91 = mutablePeriod19.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test00257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00257");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean25 = periodType23.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, periodType23, chronology26);
        mutablePeriod27.addYears((int) 'a');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        mutablePeriod37.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod51.clear();
        mutablePeriod51.setValue((int) (byte) 0, (-1));
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        mutablePeriod37.setYears((int) (byte) 1);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        mutablePeriod37.setPeriod((long) '#');
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology69);
        int int71 = mutablePeriod70.getYears();
        java.lang.String str72 = mutablePeriod70.toString();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutablePeriod77.setPeriod(readablePeriod78);
        mutablePeriod77.addWeeks((int) (byte) 10);
        mutablePeriod70.add((org.joda.time.ReadablePeriod) mutablePeriod77);
        boolean boolean84 = mutablePeriod70.equals((java.lang.Object) (-1.0f));
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT0.052S" + "'", str72, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00258");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long64 = chronology57.getDateTimeMillis((int) '#', (int) '#', (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test00259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00259");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod20.clear();
        mutablePeriod20.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType30 = null;
        boolean boolean31 = mutablePeriod20.isSupported(durationFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology34);
        int int36 = mutablePeriod35.getWeeks();
        mutablePeriod20.add((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod35.setWeeks((int) (short) 100);
        java.lang.String str40 = mutablePeriod35.toString();
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod35, 28083659L, 60000L);
        java.lang.Object obj44 = mutablePeriod35.clone();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "P100WT0.087S" + "'", str40, "P100WT0.087S");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, -7, -47, -3, -659]");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "P100WT0.087S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "P100WT0.087S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "P100WT0.087S");
    }

    @Test
    public void test00260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00260");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00261");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        int int8 = mutablePeriod5.size();
        mutablePeriod5.setMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod5.set(durationFieldType11, 340);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = mutablePeriod5.getValue(8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test00262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00262");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology13.set(readablePartial21, 1644572135829L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test00263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00263");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration32 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Hours hours37 = duration36.toStandardHours();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(readableInstant38, (org.joda.time.ReadableDuration) duration39, periodType40);
        org.joda.time.Duration duration43 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration39, 10);
        boolean boolean44 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test00264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00264");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration51 = duration31.withDurationAdded((long) (short) -1, 8);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Period period64 = interval63.toPeriod();
        org.joda.time.Chronology chronology65 = interval63.getChronology();
        org.joda.time.Duration duration66 = interval63.toDuration();
        org.joda.time.Duration duration68 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) ' ');
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.dayTime();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod71.addHours(0);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration85.toPeriod(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Interval interval89 = duration85.toIntervalTo(readableInstant88);
        org.joda.time.Period period90 = interval89.toPeriod();
        org.joda.time.Chronology chronology91 = interval89.getChronology();
        mutablePeriod71.setPeriod((org.joda.time.ReadableDuration) duration77, chronology91);
        org.joda.time.DateTimeField dateTimeField93 = chronology91.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((java.lang.Object) duration66, periodType69, chronology91);
        java.lang.String str95 = periodType69.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "PeriodType[DayTime]" + "'", str95, "PeriodType[DayTime]");
    }

    @Test
    public void test00265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00265");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        boolean boolean32 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration25.toPeriod(periodType33, chronology34);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutablePeriod40.setPeriod(readablePeriod41);
        mutablePeriod40.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.days();
        int int46 = mutablePeriod40.get(durationFieldType45);
        boolean boolean47 = periodType33.isSupported(durationFieldType45);
        int int48 = periodType33.size();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.weeks();
        int int50 = periodType33.indexOf(durationFieldType49);
        mutablePeriod10.add(durationFieldType49, 4);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        mutablePeriod58.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.DurationFieldType[] durationFieldTypeArray64 = mutablePeriod62.getFieldTypes();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.forFields(durationFieldTypeArray64);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod67.addHours(0);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Period period86 = interval85.toPeriod();
        org.joda.time.Chronology chronology87 = interval85.getChronology();
        mutablePeriod67.setPeriod((org.joda.time.ReadableDuration) duration73, chronology87);
        org.joda.time.DateTimeField dateTimeField89 = chronology87.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType65, chronology87);
        org.joda.time.DateTimeField dateTimeField91 = chronology87.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField92 = chronology87.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField93 = chronology87.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField94 = chronology87.secondOfMinute();
        org.joda.time.DurationField durationField95 = durationFieldType49.getField(chronology87);
        org.joda.time.PeriodType periodType96 = org.joda.time.PeriodType.yearMonthDayTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((java.lang.Object) durationField95, periodType96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(durationFieldTypeArray64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(periodType96);
    }

    @Test
    public void test00266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00266");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        mutablePeriod7.setMinutes((int) (byte) -1);
        mutablePeriod7.setPeriod(100, (int) '#', (int) ' ', (int) (short) 10, (int) (short) 0, 3, (int) 'a', 51);
        int int36 = mutablePeriod7.getHours();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test00267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00267");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test00268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00268");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, readableInstant25);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = mutablePeriod26.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
    }

    @Test
    public void test00269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00269");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology68);
        mutablePeriod65.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = mutablePeriod69.getFieldTypes();
        int[] intArray74 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField75 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = chronology59.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology59);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology80);
        int int82 = mutablePeriod81.getYears();
        org.joda.time.MutablePeriod mutablePeriod83 = mutablePeriod81.copy();
        mutablePeriod83.setYears((int) (short) 10);
        int[] intArray87 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod83, 1644572114290L);
        mutablePeriod83.add(0, 3, (int) '#', 14, 14, (int) (byte) -1, 14, (int) '#');
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 2719, 1, 9, 35, 14, 290]");
    }

    @Test
    public void test00270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00270");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.halfdayOfDay();
        org.joda.time.DurationField durationField24 = chronology21.centuries();
        org.joda.time.DurationField durationField25 = chronology21.eras();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test00271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00271");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (short) -1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        mutablePeriod1.add(durationFieldType40, (int) '4');
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        mutablePeriod53.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod53.copy();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Duration duration66 = mutablePeriod53.toDurationTo(readableInstant65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration74.toPeriod(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        org.joda.time.Period period79 = interval78.toPeriod();
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.secondOfMinute();
        org.joda.time.DurationField durationField82 = chronology80.months();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration66, chronology80);
        org.joda.time.Duration duration85 = duration66.minus(1643312030746L);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test00272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00272");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setSeconds(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test00273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00273");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        java.lang.String str46 = dateTime45.toString();
        boolean boolean47 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime30.getZone();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes(1644572108797L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        java.lang.String str56 = duration53.toString();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean59 = periodType57.equals((java.lang.Object) false);
        org.joda.time.Period period60 = duration53.toPeriod(periodType57);
        org.joda.time.PeriodType periodType61 = periodType57.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(periodType61);
        org.joda.time.PeriodType periodType63 = periodType61.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration51, periodType63);
        boolean boolean65 = duration1.isEqual((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration67 = duration51.plus(350L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period68 = duration67.toPeriod();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 27409535146");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:35:42.285Z" + "'", str46, "2022-02-11T09:35:42.285Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT126000S" + "'", str56, "PT126000S");
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration67);
    }

    @Test
    public void test00274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00274");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.lang.StringBuffer stringBuffer41 = null;
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        java.lang.String str46 = duration43.toString();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean49 = periodType47.equals((java.lang.Object) false);
        org.joda.time.Period period50 = duration43.toPeriod(periodType47);
        org.joda.time.PeriodType periodType51 = periodType47.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(periodType51);
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod52.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod54 = mutablePeriod53.toMutablePeriod();
        mutablePeriod53.add(1644572121565L);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter38.printTo(stringBuffer41, (org.joda.time.ReadablePeriod) mutablePeriod53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT126000S" + "'", str46, "PT126000S");
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
    }

    @Test
    public void test00275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00275");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod2.addHours(0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration8, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType0.getField(chronology22);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod34.addHours(10);
        int[] intArray39 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (short) 100, 1260100000L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        java.lang.Object obj49 = mutablePeriod47.clone();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) duration51, chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        mutablePeriod47.add((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Interval interval57 = interval55.toInterval();
        mutablePeriod34.setPeriod((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean62 = periodType60.equals((java.lang.Object) false);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Period period75 = interval74.toPeriod();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(1L, periodType60, chronology76);
        org.joda.time.MutablePeriod mutablePeriod78 = mutablePeriod77.toMutablePeriod();
        boolean boolean79 = interval57.equals((java.lang.Object) mutablePeriod77);
        org.joda.time.MutablePeriod mutablePeriod80 = mutablePeriod77.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod80.setMinutes((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 2, 0, 14, 1, 39, 900]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mutablePeriod80);
    }

    @Test
    public void test00276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00276");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        mutablePeriod4.add(1644572121340L);
        int int11 = mutablePeriod4.getMillis();
        java.lang.Class<?> wildcardClass12 = mutablePeriod4.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 340 + "'", int11 == 340);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00277");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.PeriodType periodType23 = periodType20.withYearsRemoved();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DurationFieldType[] durationFieldTypeArray35 = mutablePeriod33.getFieldTypes();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray35);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod38.addHours(0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        mutablePeriod38.setPeriod((org.joda.time.ReadableDuration) duration44, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType36, chronology58);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) (short) 1, (long) (short) 100, periodType23, chronology58);
        org.joda.time.PeriodType periodType63 = periodType23.withMinutesRemoved();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Duration duration69 = duration67.plus(readableDuration68);
        org.joda.time.Duration duration71 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration67, (int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = duration71.toPeriod(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration71.toIntervalTo(readableInstant74);
        org.joda.time.Period period76 = interval75.toPeriod();
        org.joda.time.Chronology chronology77 = interval75.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.hourOfDay();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.monthOfYear();
        org.joda.time.DurationField durationField80 = chronology77.eras();
        org.joda.time.DateTimeField dateTimeField81 = chronology77.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField82 = chronology77.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-11T09:35:25.205Z", periodType23, chronology77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:25.205Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldTypeArray35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test00278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00278");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.addHours((int) (short) 1);
        int int45 = mutablePeriod15.getMinutes();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology52);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        mutablePeriod53.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod53.copy();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = duration72.toPeriod(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Interval interval76 = duration72.toIntervalTo(readableInstant75);
        mutablePeriod53.setPeriod((org.joda.time.ReadableInterval) interval76);
        mutablePeriod15.add((org.joda.time.ReadableInterval) interval76);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod15.setValue((int) (short) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test00279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00279");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod5 = periodFormatter2.parseMutablePeriod("DayTime");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
    }

    @Test
    public void test00280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00280");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter2.isPrinter();
        java.lang.StringBuffer stringBuffer40 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((int) (short) 1, 4, 2, (int) '#', 32, (int) (short) -1, (int) (short) 10, (-1));
        mutablePeriod49.addHours(10);
        mutablePeriod49.addDays((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer40, (org.joda.time.ReadablePeriod) mutablePeriod49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test00281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00281");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod10.add((long) ' ');
        org.joda.time.PeriodType periodType13 = mutablePeriod10.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test00282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00282");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology28 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial30 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology28.set(readablePartial30, 60000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test00283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00283");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object) durationFieldTypeArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: [Lorg.joda.time.DurationFieldType;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
    }

    @Test
    public void test00284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00284");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1644572128330L, 1644572108797L, periodType3);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setMonths((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test00285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00285");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter38.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod41 = periodFormatter38.parseMutablePeriod("PT32M");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test00286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00286");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1644572120402L);
    }

    @Test
    public void test00287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00287");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod33.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType36 = mutablePeriod34.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod34);
    }

    @Test
    public void test00288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00288");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1L, periodType1);
        org.joda.time.PeriodType periodType3 = periodType1.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType5 = periodType1.getFieldType(14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 14");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test00289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00289");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, 32, 100, (int) (byte) 100, (int) (byte) -1, 8, (int) (byte) 0, 10);
        java.lang.Class<?> wildcardClass9 = mutablePeriod8.getClass();
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test00290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00290");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = periodType25.isSupported(durationFieldType37);
        mutablePeriod3.set(durationFieldType37, 8);
        int int42 = mutablePeriod3.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test00291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00291");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        mutablePeriod38.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        int int55 = mutablePeriod49.get(durationFieldType54);
        mutablePeriod38.add(durationFieldType54, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod68 = mutablePeriod38.copy();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = mutablePeriod68.get(durationFieldType69);
        long long73 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) ' ', 3);
        java.lang.Object obj74 = mutablePeriod68.clone();
        java.lang.Class<?> wildcardClass75 = mutablePeriod68.getClass();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-124L) + "'", long73 == (-124L));
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "PT0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "PT0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "PT0.052S");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test00292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00292");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        java.util.Locale locale5 = periodFormatter3.getLocale();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter3.getParser();
        org.joda.time.PeriodType periodType7 = periodFormatter3.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod8 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:28.224Z", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNull(periodType7);
    }

    @Test
    public void test00293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00293");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(10, 8, 100, 4, 340, (int) (byte) 0, (int) (short) 0, (int) 'a', periodType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test00294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00294");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean2 = periodType0.equals((java.lang.Object) false);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        java.lang.Object obj13 = mutablePeriod11.clone();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((java.lang.Object) duration15, chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        mutablePeriod11.add((org.joda.time.ReadableInterval) interval19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        int int30 = mutablePeriod25.getMonths();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        boolean boolean41 = mutablePeriod25.equals((java.lang.Object) durationFieldType38);
        int int42 = mutablePeriod11.indexOf(durationFieldType38);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.set(durationFieldType38, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 7 + "'", int42 == 7);
    }

    @Test
    public void test00295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00295");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod3.clear();
        mutablePeriod3.addDays(8);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue((int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
    }

    @Test
    public void test00296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00296");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
        mutablePeriod2.setDays((int) (byte) 100);
        mutablePeriod2.clear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType7 = mutablePeriod2.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00297");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addSeconds((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int10 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod5, "2022-02-11T09:35:37.373Z", (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00298");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology13.minutes();
        org.joda.time.DurationField durationField18 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology13.getDateTimeMillis(2, 5, (int) (short) 0, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test00299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00299");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology2);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod5.addHours(0);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration11, chronology25);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.add(durationFieldType28, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weekyears'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationFieldType28);
    }

    @Test
    public void test00300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00300");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.add((int) (byte) 0, 8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4');
        mutablePeriod3.clear();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        boolean boolean33 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration20.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration36 = duration22.withMillis((long) (short) 100);
        boolean boolean37 = mutablePeriod3.equals((java.lang.Object) (short) 100);
        mutablePeriod3.addHours((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00301");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.PeriodType periodType33 = periodType17.withMonthsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        java.lang.String str35 = periodType33.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType37 = periodType33.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[Years]" + "'", str35, "PeriodType[Years]");
    }

    @Test
    public void test00302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00302");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withWeeksRemoved();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Period period17 = interval16.toPeriod();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(2704L, 10L, periodType4, chronology18);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod22.addMinutes(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Days" + "'", str3, "Days");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test00303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00303");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = periodFormatter2.getLocale();
        java.lang.Class<?> wildcardClass40 = periodFormatter2.getClass();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test00304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00304");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) period12, chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration34 = new org.joda.time.Duration((java.lang.Object) mutablePeriod33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test00305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00305");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        mutablePeriod3.addHours(10);
        mutablePeriod3.setSeconds(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = mutablePeriod3.getFieldType((-51));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test00306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00306");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withSecondsRemoved();
        org.joda.time.PeriodType periodType4 = periodType1.withMonthsRemoved();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        java.lang.String str8 = periodType7.getName();
        org.joda.time.PeriodType periodType9 = periodType7.withWeeksRemoved();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = chronology23.days();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(2704L, 10L, periodType9, chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod31.clear();
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod31.copy();
        int[] intArray40 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod38, 28083659L);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(obj0, periodType1, chronology23);
        org.joda.time.ReadablePartial readablePartial42 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = chronology23.get(readablePartial42, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Days" + "'", str2, "Days");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Days" + "'", str8, "Days");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 7, 48, 3, 659]");
    }

    @Test
    public void test00307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00307");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = periodType23.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
    }

    @Test
    public void test00308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00308");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutablePeriod12.setPeriod(readablePeriod13);
        mutablePeriod12.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        int int18 = mutablePeriod12.get(durationFieldType17);
        boolean boolean19 = mutablePeriod3.isSupported(durationFieldType17);
        mutablePeriod3.clear();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.eras();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.set(durationFieldType21, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'eras'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationFieldType21);
    }

    @Test
    public void test00309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00309");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod8.addHours(0);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = mutablePeriod8.get(durationFieldType11);
        mutablePeriod8.addHours((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int17 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod8, "PeriodType[Years]", 14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test00310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00310");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology13.getDateTimeMillis((int) (short) 100, 3, 4, 14, (-1), (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test00311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00311");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        boolean boolean53 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((long) (-1), (-1));
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        boolean boolean73 = duration60.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration66.toPeriod(periodType74, chronology75);
        org.joda.time.PeriodType periodType77 = periodType74.withYearsRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withDaysRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration50, periodType79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int82 = dateTime41.get(dateTimeFieldType81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:35:46.946Z" + "'", str42, "2022-02-11T09:35:46.946Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
    }

    @Test
    public void test00312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00312");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:27.455Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:27.455Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00313");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        int int50 = mutablePeriod49.getYears();
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod49.copy();
        mutablePeriod51.setYears((int) (short) 10);
        mutablePeriod51.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        mutablePeriod51.setPeriod((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Duration duration82 = duration80.plus(readableDuration81);
        org.joda.time.Duration duration84 = duration78.withDurationAdded((org.joda.time.ReadableDuration) duration80, (int) (byte) 10);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Period period86 = duration84.toPeriod(chronology85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Interval interval88 = duration84.toIntervalTo(readableInstant87);
        org.joda.time.Period period89 = interval88.toPeriod();
        mutablePeriod51.add((org.joda.time.ReadableInterval) interval88);
        boolean boolean91 = interval45.contains((org.joda.time.ReadableInterval) interval88);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval45);
        mutablePeriod3.addDays((int) (byte) 1);
        mutablePeriod3.addWeeks(7);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test00314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00314");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DurationFieldType[] durationFieldTypeArray69 = mutablePeriod67.getFieldTypes();
        int[] intArray72 = chronology57.get((org.joda.time.ReadablePeriod) mutablePeriod67, (long) (byte) 100, (-1L));
        mutablePeriod67.setPeriod(1644555932000L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, -101]");
    }

    @Test
    public void test00315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00315");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getEnd();
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        boolean boolean44 = interval29.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = interval29.getStart();
        java.lang.String str46 = dateTime45.toString();
        boolean boolean47 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Interval interval48 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int50 = dateTime15.get(dateTimeFieldType49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:35:47.895Z" + "'", str16, "2022-02-11T09:35:47.895Z");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-01-27T19:34:07.895Z" + "'", str46, "2022-01-27T19:34:07.895Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval48);
    }

    @Test
    public void test00316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00316");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(100, (int) '#', 2, (-1));
        org.joda.time.format.PeriodPrinter periodPrinter5 = null;
        org.joda.time.format.PeriodParser periodParser6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = new org.joda.time.format.PeriodFormatter(periodPrinter5, periodParser6);
        java.util.Locale locale8 = periodFormatter7.getLocale();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod16.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod16.copy();
        org.joda.time.PeriodType periodType28 = mutablePeriod16.getPeriodType();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter30 = periodFormatter7.withParseType(periodType29);
        org.joda.time.format.PeriodParser periodParser31 = periodFormatter7.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = mutablePeriod4.toString(periodFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodFormatter30);
        org.junit.Assert.assertNull(periodParser31);
    }

    @Test
    public void test00317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00317");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Instant instant54 = dateTime50.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int56 = instant54.get(dateTimeFieldType55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:35:48.076Z" + "'", str51, "2022-02-11T09:35:48.076Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
    }

    @Test
    public void test00318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00318");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (-53), 1260100000L);
    }

    @Test
    public void test00319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00319");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 0, (long) ' ');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getEnd();
        boolean boolean30 = interval15.contains((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        java.lang.String str45 = dateTime44.toString();
        boolean boolean46 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration57 = duration48.plus((org.joda.time.ReadableDuration) duration56);
        boolean boolean58 = dateTime44.equals((java.lang.Object) duration48);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology65);
        mutablePeriod62.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod66);
        java.lang.Object obj68 = mutablePeriod66.clone();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) duration70, chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        mutablePeriod66.add((org.joda.time.ReadableInterval) interval74);
        org.joda.time.DateTime dateTime76 = interval74.getStart();
        org.joda.time.Chronology chronology77 = interval74.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.dayOfYear();
        org.joda.time.Period period79 = duration48.toPeriod(chronology77);
        boolean boolean80 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Hours hours81 = duration2.toStandardHours();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-11T09:35:48.118Z" + "'", str45, "2022-02-11T09:35:48.118Z");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(hours81);
    }

    @Test
    public void test00320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00320");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        long long8 = duration7.getStandardDays();
        org.joda.time.ReadableDuration readableDuration9 = null;
        boolean boolean10 = duration7.isShorterThan(readableDuration9);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 14L + "'", long8 == 14L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00321");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = mutablePeriod7.getFieldTypes();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.forFields(durationFieldTypeArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration23 = new org.joda.time.Duration((java.lang.Object) periodType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test00322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00322");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutablePeriod24.setPeriod(readablePeriod25);
        mutablePeriod24.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = mutablePeriod24.get(durationFieldType29);
        boolean boolean31 = periodType17.isSupported(durationFieldType29);
        int int32 = periodType17.size();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        int int34 = periodType17.indexOf(durationFieldType33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod36.addHours(0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        mutablePeriod36.setPeriod((org.joda.time.ReadableDuration) duration42, chronology56);
        org.joda.time.DurationField durationField58 = durationFieldType33.getField(chronology56);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = chronology56.getDateTimeMillis(2, (-19), (int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test00323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00323");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean3 = periodType1.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, periodType1, chronology4);
        mutablePeriod5.addYears((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology14);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod29.clear();
        mutablePeriod29.setValue((int) (byte) 0, (-1));
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod15.setYears((int) (byte) 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.addMonths((-19));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00324");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.Object obj9 = mutablePeriod7.clone();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Interval interval17 = interval15.toInterval();
        org.joda.time.Chronology chronology18 = interval15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology18.getDateTimeMillis(0, (int) (byte) -1, (int) '#', (int) '4', 0, (int) ' ', 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test00325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00325");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutablePeriod14.setPeriod(readablePeriod15);
        mutablePeriod14.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        int int20 = mutablePeriod14.get(durationFieldType19);
        mutablePeriod3.add(durationFieldType19, (int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod3.copy();
        mutablePeriod3.addWeeks(10);
        mutablePeriod3.setPeriod(2100L, (long) (byte) 1);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
    }

    @Test
    public void test00326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00326");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField42 = chronology34.halfdays();
        org.joda.time.ReadablePartial readablePartial43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray45 = chronology34.get(readablePartial43, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test00327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00327");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        boolean boolean39 = periodFormatter38.isPrinter();
        java.util.Locale locale40 = periodFormatter38.getLocale();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        mutablePeriod44.clear();
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod44.copy();
        mutablePeriod44.add((int) '#', (int) ' ', (int) ' ', (int) 'a', 4, (int) (short) 0, 3, 8);
        int int61 = mutablePeriod44.getMinutes();
        mutablePeriod44.setHours((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = periodFormatter38.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod44, "PT0.002S", (-51));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test00328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00328");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        mutablePeriod46.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod57 = mutablePeriod46.copy();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        mutablePeriod61.setMillis((int) (short) 0);
        mutablePeriod61.addMonths((int) (short) 1);
        mutablePeriod61.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutablePeriod72.setPeriod(readablePeriod73);
        mutablePeriod72.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.days();
        int int78 = mutablePeriod72.get(durationFieldType77);
        mutablePeriod61.add(durationFieldType77, (int) '#');
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology83);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology87);
        mutablePeriod84.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod88);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.MutablePeriod mutablePeriod91 = mutablePeriod61.copy();
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod91);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod91, "2022-02-11T09:35:09.510Z", (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod91);
    }

    @Test
    public void test00329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00329");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.add((long) ' ');
        mutablePeriod14.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod14.isSupported(durationFieldType28);
        boolean boolean31 = mutablePeriod3.isSupported(durationFieldType28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = mutablePeriod3.toDurationTo(readableInstant32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getEnd();
        boolean boolean61 = interval46.contains((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration69.toPeriod(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Interval interval73 = duration69.toIntervalTo(readableInstant72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Interval interval86 = interval85.toInterval();
        org.joda.time.DateTime dateTime87 = interval85.getEnd();
        org.joda.time.Duration duration88 = interval85.toDuration();
        boolean boolean89 = interval73.overlaps((org.joda.time.ReadableInterval) interval85);
        boolean boolean90 = interval46.isBefore((org.joda.time.ReadableInterval) interval73);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration92 = interval46.toDuration();
        org.joda.time.DateTime dateTime93 = interval46.getStart();
        org.joda.time.DateTime dateTime94 = interval46.getStart();
        org.joda.time.PeriodType periodType95 = org.joda.time.PeriodType.dayTime();
        java.lang.String str96 = periodType95.getName();
        int int97 = periodType95.size();
        org.joda.time.PeriodType periodType98 = periodType95.withDaysRemoved();
        org.joda.time.Period period99 = interval46.toPeriod(periodType98);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(periodType95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "DayTime" + "'", str96, "DayTime");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
        org.junit.Assert.assertNotNull(periodType98);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test00330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00330");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod6.clear();
        mutablePeriod6.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType16 = null;
        boolean boolean17 = mutablePeriod6.isSupported(durationFieldType16);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration26.toPeriod(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        org.joda.time.Period period31 = interval30.toPeriod();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyearOfCentury();
        mutablePeriod6.add((long) (short) 100, chronology32);
        org.joda.time.DurationField durationField36 = chronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.year();
        mutablePeriod1.add(160000L, chronology32);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology32.getDateTimeMillis((int) '#', 8, (int) (byte) 0, 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test00331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00331");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period5 = periodFormatter2.parsePeriod("2022-02-11T09:35:31.112Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
    }

    @Test
    public void test00332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00332");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod6.addSeconds((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00333");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1644572128330L);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.set(durationFieldType2, 340);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00334");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod7.add(durationFieldType32, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weekyears'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType32);
    }

    @Test
    public void test00335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00335");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType31 = mutablePeriod22.getFieldType(456825);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
    }

    @Test
    public void test00336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00336");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.setMinutes((int) (short) 0);
        mutablePeriod3.addDays(2);
        mutablePeriod3.clear();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test00337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00337");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        boolean boolean8 = periodFormatter7.isParser();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        boolean boolean27 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration20.toPeriod(periodType28, chronology29);
        org.joda.time.PeriodType periodType31 = periodType28.withYearsRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withDaysRemoved();
        org.joda.time.PeriodType periodType33 = periodType32.withSecondsRemoved();
        org.joda.time.PeriodType periodType34 = periodType32.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1643312029209L, 126000000L, periodType34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = periodFormatter7.print((org.joda.time.ReadablePeriod) mutablePeriod35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test00338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00338");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        boolean boolean17 = mutablePeriod3.equals((java.lang.Object) (-1.0f));
        mutablePeriod3.addMillis((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType21 = mutablePeriod3.getFieldType(340);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00339");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval32);
        mutablePeriod3.setMonths((int) (short) 10);
        mutablePeriod3.clear();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test00340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00340");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        java.lang.String str44 = dateTime43.toString();
        boolean boolean45 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime28.getZone();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes(1644572108797L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        java.lang.String str54 = duration51.toString();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean57 = periodType55.equals((java.lang.Object) false);
        org.joda.time.Period period58 = duration51.toPeriod(periodType55);
        org.joda.time.PeriodType periodType59 = periodType55.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(periodType59);
        org.joda.time.PeriodType periodType61 = periodType59.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration49, periodType61);
        java.lang.String str63 = duration49.toString();
        java.lang.String str64 = duration49.toString();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:35:50.088Z" + "'", str44, "2022-02-11T09:35:50.088Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT126000S" + "'", str54, "PT126000S");
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT98674326527820S" + "'", str63, "PT98674326527820S");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT98674326527820S" + "'", str64, "PT98674326527820S");
    }

    @Test
    public void test00341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00341");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.addHours(0);
        mutablePeriod3.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod3.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod16.add((long) ' ');
        int int19 = mutablePeriod16.getDays();
        mutablePeriod16.setMillis((int) (byte) -1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getEnd();
        boolean boolean49 = interval34.contains((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        java.lang.String str64 = dateTime63.toString();
        boolean boolean65 = dateTime48.isBefore((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration66 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateTime63);
        long long67 = duration66.getStandardMinutes();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Duration duration73 = duration71.plus(readableDuration72);
        org.joda.time.Duration duration75 = duration69.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = duration75.toPeriod(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Interval interval79 = duration75.toIntervalTo(readableInstant78);
        org.joda.time.Period period80 = interval79.toPeriod();
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.hourOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.weekyearOfCentury();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration66, chronology81);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = mutablePeriod3.getValue((-51));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-11T09:35:50.448Z" + "'", str64, "2022-02-11T09:35:50.448Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
    }

    @Test
    public void test00342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00342");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.addWeeks((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test00343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00343");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        mutablePeriod5.addMinutes((int) (short) 0);
        mutablePeriod5.addDays((int) (short) 100);
        mutablePeriod5.setMillis((-53));
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology77);
        mutablePeriod74.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod78);
        mutablePeriod74.clear();
        mutablePeriod74.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType84 = null;
        boolean boolean85 = mutablePeriod74.isSupported(durationFieldType84);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology88);
        int int90 = mutablePeriod89.getWeeks();
        mutablePeriod74.add((org.joda.time.ReadablePeriod) mutablePeriod89);
        mutablePeriod89.setWeeks((int) (short) 100);
        java.lang.String str94 = mutablePeriod89.toString();
        java.lang.String str95 = mutablePeriod89.toString();
        mutablePeriod89.setPeriod(100L, 1L);
        boolean boolean99 = mutablePeriod5.equals((java.lang.Object) mutablePeriod89);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "P100WT0.087S" + "'", str94, "P100WT0.087S");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "P100WT0.087S" + "'", str95, "P100WT0.087S");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00344");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant1, (org.joda.time.ReadableDuration) duration2, periodType3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = duration12.toPeriod(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalTo(readableInstant15);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        boolean boolean32 = interval17.contains((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Duration duration38 = duration36.plus(readableDuration37);
        org.joda.time.Duration duration40 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = duration40.toPeriod(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Interval interval44 = duration40.toIntervalTo(readableInstant43);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getEnd();
        java.lang.String str47 = dateTime46.toString();
        boolean boolean48 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration59 = duration50.plus((org.joda.time.ReadableDuration) duration58);
        boolean boolean60 = dateTime46.equals((java.lang.Object) duration50);
        org.joda.time.Period period61 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Duration duration67 = duration65.plus(readableDuration66);
        org.joda.time.Duration duration69 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Duration duration75 = duration73.plus(readableDuration74);
        org.joda.time.Duration duration77 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) (byte) 10);
        boolean boolean78 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration71.toPeriod(periodType79, chronology80);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        mutablePeriod86.setPeriod(readablePeriod87);
        mutablePeriod86.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.days();
        int int92 = mutablePeriod86.get(durationFieldType91);
        boolean boolean93 = periodType79.isSupported(durationFieldType91);
        int int94 = periodType79.size();
        org.joda.time.PeriodType periodType95 = periodType79.withMonthsRemoved();
        org.joda.time.PeriodType periodType96 = periodType95.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime46, periodType95);
        org.joda.time.Instant instant98 = dateTime46.toInstant();
        long long99 = instant98.getMillis();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T09:35:51.968Z" + "'", str47, "2022-02-11T09:35:51.968Z");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(periodType95);
        org.junit.Assert.assertNotNull(periodType96);
        org.junit.Assert.assertNotNull(instant98);
// flaky:         org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1644572151968L + "'", long99 == 1644572151968L);
    }

    @Test
    public void test00345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00345");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(100000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 8640000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00346");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = dateTime41.equals((java.lang.Object) duration45);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays(100000L);
        org.joda.time.Duration duration59 = duration57.minus(0L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Duration duration78 = duration76.plus(readableDuration77);
        org.joda.time.Duration duration80 = duration74.withDurationAdded((org.joda.time.ReadableDuration) duration76, (int) (byte) 10);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = duration80.toPeriod(chronology81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Interval interval84 = duration80.toIntervalTo(readableInstant83);
        org.joda.time.Interval interval85 = interval84.toInterval();
        org.joda.time.DateTime dateTime86 = interval84.getEnd();
        boolean boolean87 = interval72.contains((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Instant instant88 = dateTime86.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = instant88.isSupported(dateTimeFieldType89);
        org.joda.time.Interval interval91 = duration59.toIntervalFrom((org.joda.time.ReadableInstant) instant88);
        boolean boolean92 = dateTime41.isAfter((org.joda.time.ReadableInstant) instant88);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:35:52.369Z" + "'", str42, "2022-02-11T09:35:52.369Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test00347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00347");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getEnd();
        org.joda.time.Duration duration54 = interval51.toDuration();
        boolean boolean55 = interval39.overlaps((org.joda.time.ReadableInterval) interval51);
        boolean boolean56 = interval12.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Duration duration70 = duration68.plus(readableDuration69);
        org.joda.time.Duration duration72 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        boolean boolean73 = duration60.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration66.toPeriod(periodType74, chronology75);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        mutablePeriod81.setPeriod(readablePeriod82);
        mutablePeriod81.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.days();
        int int87 = mutablePeriod81.get(durationFieldType86);
        boolean boolean88 = periodType74.isSupported(durationFieldType86);
        java.lang.String str89 = periodType74.getName();
        org.joda.time.Period period90 = interval12.toPeriod(periodType74);
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.millis();
        int int92 = periodType74.indexOf(durationFieldType91);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Years" + "'", str89, "Years");
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test00348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00348");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType45 = mutablePeriod5.getPeriodType();
        mutablePeriod5.setMinutes((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType45);
    }

    @Test
    public void test00349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00349");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.setMinutes((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getEnd();
        mutablePeriod15.setPeriod((org.joda.time.ReadableInterval) interval27);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        boolean boolean48 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration41.toPeriod(periodType49, chronology50);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutablePeriod56.setPeriod(readablePeriod57);
        mutablePeriod56.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.days();
        int int62 = mutablePeriod56.get(durationFieldType61);
        boolean boolean63 = periodType49.isSupported(durationFieldType61);
        int int64 = periodType49.size();
        org.joda.time.PeriodType periodType65 = periodType49.withMonthsRemoved();
        org.joda.time.PeriodType periodType66 = periodType65.withYearsRemoved();
        java.lang.String str67 = periodType65.toString();
        org.joda.time.PeriodType periodType68 = periodType65.withMillisRemoved();
        org.joda.time.Period period69 = interval27.toPeriod(periodType65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration70 = new org.joda.time.Duration((java.lang.Object) period69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PeriodType[Years]" + "'", str67, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test00350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00350");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        java.lang.String str14 = duration12.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        mutablePeriod18.add((long) ' ');
        int int21 = mutablePeriod18.getDays();
        mutablePeriod18.setMillis((int) (byte) -1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        boolean boolean51 = interval36.contains((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.DateTime dateTime65 = interval63.getEnd();
        java.lang.String str66 = dateTime65.toString();
        boolean boolean67 = dateTime50.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration68 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology69 = dateTime65.getChronology();
        org.joda.time.Period period70 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Duration duration76 = duration74.plus(readableDuration75);
        org.joda.time.Duration duration78 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration78.toPeriod(chronology79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Interval interval82 = duration78.toIntervalTo(readableInstant81);
        org.joda.time.Interval interval83 = interval82.toInterval();
        org.joda.time.DateTime dateTime84 = interval82.getEnd();
        org.joda.time.Duration duration85 = interval82.toDuration();
        org.joda.time.Duration duration86 = duration12.minus((org.joda.time.ReadableDuration) duration85);
        long long87 = duration85.getStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT6000S" + "'", str14, "PT6000S");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-11T09:35:53.160Z" + "'", str66, "2022-02-11T09:35:53.160Z");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 14L + "'", long87 == 14L);
    }

    @Test
    public void test00351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00351");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod11.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod11.toMutablePeriod();
        int[] intArray15 = mutablePeriod11.getValues();
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType18 = mutablePeriod3.getFieldType(456825);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, -42]");
    }

    @Test
    public void test00352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00352");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval12.getStart();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = dateTime28.get(dateTimeFieldType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-27T19:34:13.667Z" + "'", str29, "2022-01-27T19:34:13.667Z");
    }

    @Test
    public void test00353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00353");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant40, readableInstant41);
        mutablePeriod42.addWeeks((int) 'a');
        mutablePeriod23.add((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.seconds();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        boolean boolean63 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration56.toPeriod(periodType64, chronology65);
        org.joda.time.PeriodType periodType67 = periodType64.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.months();
        int int69 = periodType67.indexOf(durationFieldType68);
        int int70 = periodType46.indexOf(durationFieldType68);
        mutablePeriod23.add(durationFieldType68, (int) (byte) -1);
        int int73 = mutablePeriod7.get(durationFieldType68);
        mutablePeriod7.addSeconds((int) 'a');
        mutablePeriod7.setMinutes(0);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(readableInstant78, readableDuration79);
        int int81 = mutablePeriod80.size();
        org.joda.time.Period period82 = mutablePeriod80.toPeriod();
        mutablePeriod7.add((org.joda.time.ReadablePeriod) period82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType85 = period82.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertNotNull(period82);
    }

    @Test
    public void test00354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00354");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration9.toPeriod(periodType17, chronology18);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        int int22 = periodType21.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test00355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00355");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        boolean boolean44 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Minutes minutes45 = duration31.toStandardMinutes();
        org.joda.time.Duration duration47 = duration31.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Minutes minutes49 = duration31.toStandardMinutes();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = dateTime63.isEqual(readableInstant65);
        java.lang.Object obj67 = null;
        boolean boolean68 = dateTime63.equals(obj67);
        java.lang.String str69 = dateTime63.toString();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime63);
        int int71 = mutablePeriod70.getDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-11T09:35:54.197Z" + "'", str64, "2022-02-11T09:35:54.197Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-11T09:35:54.197Z" + "'", str69, "2022-02-11T09:35:54.197Z");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test00356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00356");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod5 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:29.468Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00357");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:12.270Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:35:12.270Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00358");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType25 = mutablePeriod13.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        mutablePeriod30.add((long) ' ');
        mutablePeriod30.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        boolean boolean46 = mutablePeriod30.isSupported(durationFieldType44);
        int int47 = periodType26.indexOf(durationFieldType44);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, periodType26, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.hourOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = mutablePeriod71.getFieldTypes();
        int[] intArray76 = chronology61.get((org.joda.time.ReadablePeriod) mutablePeriod71, (long) (byte) 100, (-1L));
        org.joda.time.DateTimeField dateTimeField77 = chronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = chronology61.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 4, (long) 'a', chronology61);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(100L, (-124L), chronology61);
        mutablePeriod80.addMillis(100);
        mutablePeriod80.setPeriod((long) 51);
        java.lang.Class<?> wildcardClass85 = mutablePeriod80.getClass();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test00359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00359");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.setYears((int) (short) 100);
        mutablePeriod3.addDays(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        java.lang.Object obj23 = mutablePeriod21.clone();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) duration25, chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        mutablePeriod21.add((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.Duration duration32 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType34 = mutablePeriod3.getFieldType((-51));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration32);
    }

    @Test
    public void test00360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00360");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        int int28 = duration7.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        java.lang.Object obj41 = null;
        boolean boolean42 = duration36.equals(obj41);
        boolean boolean43 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test00361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00361");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology15.getDateTimeMillis(52, (int) (byte) 1, (int) (short) 100, (-53));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -53 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test00362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00362");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1643312029538L);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((java.lang.Object) duration5, chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Interval interval9 = duration5.toIntervalTo(readableInstant8);
        long long10 = interval9.toDurationMillis();
        org.joda.time.Period period11 = interval9.toPeriod();
        boolean boolean12 = periodType3.equals((java.lang.Object) interval9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period13 = duration1.toPeriod(periodType3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 98598721772280000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00363");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        int int23 = mutablePeriod22.getYears();
        java.lang.String str24 = mutablePeriod22.toString();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36);
        boolean boolean38 = mutablePeriod29.equals((java.lang.Object) readableInstant35);
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray40 = mutablePeriod7.getValues();
        org.joda.time.Period period41 = mutablePeriod7.toPeriod();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        mutablePeriod49.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod60 = mutablePeriod49.copy();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Duration duration66 = duration64.plus(readableDuration65);
        org.joda.time.Duration duration68 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (byte) 10);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        boolean boolean77 = duration64.isShorterThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration70.toPeriod(periodType78, chronology79);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        mutablePeriod85.setPeriod(readablePeriod86);
        mutablePeriod85.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.days();
        int int91 = mutablePeriod85.get(durationFieldType90);
        boolean boolean92 = periodType78.isSupported(durationFieldType90);
        mutablePeriod49.set(durationFieldType90, (int) '4');
        java.lang.String str95 = durationFieldType90.getName();
        boolean boolean96 = period41.isSupported(durationFieldType90);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.052S" + "'", str24, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 42, 97, 97, 1, 0, -53]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "days" + "'", str95, "days");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test00364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00364");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = interval11.isAfter(readableInterval12);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod15.addHours(0);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration21, chronology35);
        long long37 = duration21.getStandardSeconds();
        org.joda.time.Period period38 = duration21.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Duration duration71 = duration69.plus(readableDuration70);
        org.joda.time.Duration duration73 = duration67.withDurationAdded((org.joda.time.ReadableDuration) duration69, (int) (byte) 10);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Period period75 = duration73.toPeriod(chronology74);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.Interval interval77 = duration73.toIntervalTo(readableInstant76);
        org.joda.time.Interval interval78 = interval77.toInterval();
        org.joda.time.DateTime dateTime79 = interval77.getEnd();
        boolean boolean80 = interval65.contains((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Duration duration86 = duration84.plus(readableDuration85);
        org.joda.time.Duration duration88 = duration82.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = duration88.toPeriod(chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = duration88.toIntervalTo(readableInstant91);
        org.joda.time.Interval interval93 = interval92.toInterval();
        org.joda.time.DateTime dateTime94 = interval92.getEnd();
        java.lang.String str95 = dateTime94.toString();
        boolean boolean96 = dateTime79.isBefore((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Duration duration98 = period38.toDurationFrom((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean99 = interval11.isBefore((org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 126000L + "'", long37 == 126000L);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-02-11T09:35:55.270Z" + "'", str95, "2022-02-11T09:35:55.270Z");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(duration98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test00365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00365");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology15);
        mutablePeriod20.setPeriod(2, (int) (byte) 0, (int) (byte) 10, 1, 4, 2, 2, 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod34.setPeriod((long) (short) 0, chronology51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.secondOfMinute();
        boolean boolean71 = mutablePeriod34.equals((java.lang.Object) chronology66);
        org.joda.time.Chronology chronology72 = chronology66.withUTC();
        mutablePeriod20.setPeriod((long) 100, chronology72);
        org.joda.time.DurationField durationField74 = chronology72.centuries();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.secondOfMinute();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test00366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00366");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.add((int) (byte) 0, 8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4');
        mutablePeriod3.clear();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration26.plus(readableDuration27);
        org.joda.time.Duration duration30 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration30.toPeriod(chronology31);
        boolean boolean33 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration20.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration36 = duration22.withMillis((long) (short) 100);
        boolean boolean37 = mutablePeriod3.equals((java.lang.Object) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue((-19), 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00367");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType45 = mutablePeriod5.getPeriodType();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration50.plus(readableDuration51);
        org.joda.time.Duration duration54 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (byte) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = duration54.toPeriod(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = duration54.toIntervalTo(readableInstant57);
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.days();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.monthOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.millisOfDay();
        mutablePeriod5.setPeriod(1000L, chronology60);
        mutablePeriod5.setDays(100);
        mutablePeriod5.setHours((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test00368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00368");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        boolean boolean5 = periodFormatter3.isParser();
        boolean boolean6 = periodFormatter3.isPrinter();
        java.util.Locale locale7 = periodFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod8 = org.joda.time.MutablePeriod.parse("2022-02-11T09:34:33.502Z/2022-02-11T09:35:33.502Z", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
    }

    @Test
    public void test00369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00369");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) 10, periodType22);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.addDays(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test00370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00370");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.PeriodType periodType19 = mutablePeriod7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod24.add((long) ' ');
        mutablePeriod24.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutablePeriod33.setPeriod(readablePeriod34);
        mutablePeriod33.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        int int39 = mutablePeriod33.get(durationFieldType38);
        boolean boolean40 = mutablePeriod24.isSupported(durationFieldType38);
        int int41 = periodType20.indexOf(durationFieldType38);
        java.lang.Class<?> wildcardClass42 = durationFieldType38.getClass();
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test00371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00371");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.time();
        int int9 = periodType8.size();
        java.lang.String str10 = periodType8.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(340, 51, 80, (-3), 2, 51, 0, 35, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
    }

    @Test
    public void test00372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00372");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        java.lang.String str34 = duration31.toString();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean37 = periodType35.equals((java.lang.Object) false);
        org.joda.time.Period period38 = duration31.toPeriod(periodType35);
        org.joda.time.PeriodType periodType39 = periodType35.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(periodType39);
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod40, (long) (byte) 1, (long) '#');
        org.joda.time.DurationField durationField44 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField45 = chronology13.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial46 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = chronology13.get(readablePartial46, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT126000S" + "'", str34, "PT126000S");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test00373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00373");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.addMillis((-19));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
    }

    @Test
    public void test00374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00374");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.add((long) ' ');
        mutablePeriod14.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod14.isSupported(durationFieldType28);
        boolean boolean31 = mutablePeriod3.isSupported(durationFieldType28);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology49);
        org.joda.time.DurationField durationField55 = chronology49.centuries();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology49);
        org.joda.time.DurationField durationField57 = durationFieldType28.getField(chronology49);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = chronology49.getDateTimeMillis((long) 'a', (-3), 0, (-51), 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test00375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00375");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        mutablePeriod4.addDays((int) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.Object obj26 = mutablePeriod24.clone();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration28, chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.Chronology chronology35 = interval32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        mutablePeriod4.setPeriod((long) 100, (long) 3, chronology35);
        org.joda.time.ReadablePartial readablePartial38 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = chronology35.get(readablePartial38, 1644572121565L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
    }

    @Test
    public void test00376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00376");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.setMinutes((int) ' ');
        mutablePeriod4.setYears(0);
        java.lang.String str11 = mutablePeriod4.toString();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Period period24 = interval23.toPeriod();
        org.joda.time.Period period25 = interval23.toPeriod();
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = interval23.contains(readableInterval26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology34);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        java.lang.Object obj37 = mutablePeriod35.clone();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((java.lang.Object) duration39, chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod49.setMillis((int) (short) 0);
        mutablePeriod49.addMonths((int) (short) 1);
        int int54 = mutablePeriod49.size();
        int int55 = mutablePeriod49.getWeeks();
        mutablePeriod49.setYears(8);
        mutablePeriod49.addSeconds(1);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration65 = duration63.plus(readableDuration64);
        org.joda.time.Duration duration67 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration67.toPeriod(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Interval interval71 = duration67.toIntervalTo(readableInstant70);
        org.joda.time.Period period72 = interval71.toPeriod();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        mutablePeriod49.add((org.joda.time.ReadableInterval) interval71);
        boolean boolean75 = interval43.contains((org.joda.time.ReadableInterval) interval71);
        boolean boolean76 = interval23.isBefore((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Period period77 = interval23.toPeriod();
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval23);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setValue((-51), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT32M" + "'", str11, "PT32M");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test00377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00377");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.days();
        boolean boolean5 = mutablePeriod1.isSupported(durationFieldType4);
        mutablePeriod1.addMonths(0);
        int int8 = mutablePeriod1.size();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test00378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00378");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod9.copy();
        org.joda.time.PeriodType periodType21 = mutablePeriod9.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod26.add((long) ' ');
        mutablePeriod26.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutablePeriod35.setPeriod(readablePeriod36);
        mutablePeriod35.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        int int41 = mutablePeriod35.get(durationFieldType40);
        boolean boolean42 = mutablePeriod26.isSupported(durationFieldType40);
        int int43 = periodType22.indexOf(durationFieldType40);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Period period56 = interval55.toPeriod();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, periodType22, chronology57);
        java.lang.String str59 = periodType22.getName();
        int int60 = periodType22.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "StandardNoWeeks" + "'", str59, "StandardNoWeeks");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
    }

    @Test
    public void test00379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00379");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        java.lang.String str38 = chronology34.toString();
        org.joda.time.DurationField durationField39 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeField41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str38, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test00380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00380");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DurationField durationField19 = chronology15.days();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        mutablePeriod28.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod28.copy();
        org.joda.time.PeriodType periodType40 = mutablePeriod28.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withWeeksRemoved();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        int int62 = periodType41.indexOf(durationFieldType59);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Period period75 = interval74.toPeriod();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.days();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField79 = chronology76.millisOfDay();
        org.joda.time.DurationField durationField80 = durationFieldType59.getField(chronology76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((java.lang.Object) chronology15, chronology76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test00381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00381");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter5 = periodFormatter2.getPrinter();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        boolean boolean8 = periodFormatter7.isParser();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter7.withLocale(locale9);
        java.lang.StringBuffer stringBuffer11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter10.printTo(stringBuffer11, readablePeriod12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodPrinter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodFormatter10);
    }

    @Test
    public void test00382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00382");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration22 = duration13.plus((org.joda.time.ReadableDuration) duration21);
        boolean boolean23 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period24 = duration11.toPeriod();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        boolean boolean45 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration38.toPeriod(periodType46, chronology47);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutablePeriod53.setPeriod(readablePeriod54);
        mutablePeriod53.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.days();
        int int59 = mutablePeriod53.get(durationFieldType58);
        boolean boolean60 = periodType46.isSupported(durationFieldType58);
        int int61 = periodType46.size();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.weeks();
        int int63 = periodType46.indexOf(durationFieldType62);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod65.addHours(0);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Duration duration71 = duration69.plus(readableDuration70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration79.toPeriod(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Interval interval83 = duration79.toIntervalTo(readableInstant82);
        org.joda.time.Period period84 = interval83.toPeriod();
        org.joda.time.Chronology chronology85 = interval83.getChronology();
        mutablePeriod65.setPeriod((org.joda.time.ReadableDuration) duration71, chronology85);
        org.joda.time.DurationField durationField87 = durationFieldType62.getField(chronology85);
        org.joda.time.DateTimeField dateTimeField88 = chronology85.clockhourOfHalfday();
        mutablePeriod27.add(1643312018503L, chronology85);
        org.joda.time.Period period90 = duration11.toPeriod(chronology85);
        // The following exception was thrown during execution in test generation
        try {
            long long96 = chronology85.getDateTimeMillis(1643312042898L, (int) (byte) 10, 35, 340, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 340 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(period90);
    }

    @Test
    public void test00383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00383");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        boolean boolean19 = interval5.overlaps((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        int int26 = mutablePeriod23.getDays();
        mutablePeriod23.setMillis((int) (byte) -1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        boolean boolean56 = interval41.contains((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        java.lang.String str71 = dateTime70.toString();
        boolean boolean72 = dateTime55.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean74 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime75 = interval17.getStart();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        boolean boolean77 = dateTime75.isSupported(dateTimeFieldType76);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((java.lang.Object) duration79, chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Duration duration83 = mutablePeriod81.toDurationFrom(readableInstant82);
        org.joda.time.Days days84 = duration83.toStandardDays();
        org.joda.time.Days days85 = duration83.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableDuration) duration83);
        int int87 = mutablePeriod86.getMonths();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-11T09:35:57.601Z" + "'", str71, "2022-02-11T09:35:57.601Z");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(days84);
        org.junit.Assert.assertNotNull(days85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test00384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00384");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        java.lang.String str9 = periodType8.getName();
        org.joda.time.PeriodType periodType10 = periodType8.withWeeksRemoved();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod14.toMutablePeriod();
        int[] intArray18 = mutablePeriod14.getValues();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        boolean boolean40 = periodType19.isSupported(durationFieldType37);
        int int41 = mutablePeriod14.indexOf(durationFieldType37);
        int int42 = periodType8.indexOf(durationFieldType37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(35, (-52), 8, 4, (int) (short) -1, (-1), 0, (int) (byte) 10, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Days" + "'", str9, "Days");
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test00385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00385");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        int int28 = duration7.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod30.addHours(0);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration36, chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.Period period54 = duration17.toPeriod(chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial56 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray58 = chronology50.get(readablePartial56, 1644572122254L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str52, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test00386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00386");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Seconds seconds7 = duration1.toStandardSeconds();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) '#');
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Interval interval21 = duration17.toIntervalTo(readableInstant20);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getEnd();
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Duration duration30 = duration28.plus(readableDuration29);
        org.joda.time.Duration duration32 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = duration32.toIntervalTo(readableInstant35);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.DateTime dateTime51 = interval49.getEnd();
        boolean boolean52 = interval37.contains((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = interval37.getStart();
        java.lang.String str54 = dateTime53.toString();
        boolean boolean55 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Interval interval56 = duration9.toIntervalFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period58 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime23, periodType57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType60 = periodType57.getFieldType(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:35:57.758Z" + "'", str24, "2022-02-11T09:35:57.758Z");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-01-27T19:34:17.758Z" + "'", str54, "2022-01-27T19:34:17.758Z");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test00387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00387");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology15.set(readablePartial22, 1644572129538L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test00388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00388");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        java.lang.String str4 = duration1.toString();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) false);
        org.joda.time.Period period8 = duration1.toPeriod(periodType5);
        org.joda.time.PeriodType periodType9 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.setSeconds(456825);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT126000S" + "'", str4, "PT126000S");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod11);
    }

    @Test
    public void test00389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00389");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        java.io.Writer writer7 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod9.addHours(0);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        boolean boolean13 = mutablePeriod9.isSupported(durationFieldType12);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer7, (org.joda.time.ReadablePeriod) mutablePeriod9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00390");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) duration11, chronology12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis(1644572120402L);
        boolean boolean16 = mutablePeriod13.equals((java.lang.Object) duration15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod24.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod24.copy();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        boolean boolean52 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration45.toPeriod(periodType53, chronology54);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        mutablePeriod60.setPeriod(readablePeriod61);
        mutablePeriod60.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.days();
        int int66 = mutablePeriod60.get(durationFieldType65);
        boolean boolean67 = periodType53.isSupported(durationFieldType65);
        mutablePeriod24.set(durationFieldType65, (int) '4');
        java.lang.String str70 = durationFieldType65.getName();
        java.lang.String str71 = durationFieldType65.toString();
        boolean boolean72 = mutablePeriod13.isSupported(durationFieldType65);
        int int73 = period9.indexOf(durationFieldType65);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "days" + "'", str70, "days");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "days" + "'", str71, "days");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
    }

    @Test
    public void test00391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00391");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.format.PeriodParser periodParser41 = periodFormatter40.getParser();
        java.util.Locale locale42 = periodFormatter40.getLocale();
        boolean boolean43 = periodFormatter40.isParser();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology46);
        int int48 = mutablePeriod47.getYears();
        java.lang.String str49 = mutablePeriod47.toString();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        mutablePeriod47.add((org.joda.time.ReadablePeriod) mutablePeriod54);
        boolean boolean61 = mutablePeriod47.equals((java.lang.Object) (-1.0f));
        mutablePeriod47.setMinutes((int) (short) 1);
        int int64 = mutablePeriod47.getHours();
        org.joda.time.Period period65 = mutablePeriod47.toPeriod();
        mutablePeriod47.setMonths(1);
        mutablePeriod47.addMonths((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = periodFormatter40.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod47, "2022-02-11T09:35:17.929Z", 51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(periodParser41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.052S" + "'", str49, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test00392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00392");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField17 = chronology13.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology13.getDateTimeMillis(1643312034248L, 51, (-19), 52, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test00393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00393");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutablePeriod13.setPeriod(readablePeriod14);
        mutablePeriod13.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        int int19 = mutablePeriod13.get(durationFieldType18);
        java.lang.String str20 = durationFieldType18.getName();
        int int21 = periodType8.indexOf(durationFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0, 8, 5, 33, 456825, 1, (-52), 80, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test00394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00394");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.addHours(0);
        mutablePeriod3.setWeeks((int) '4');
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (short) -1);
        mutablePeriod16.setDays((int) 'a');
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Duration duration24 = duration22.plus(readableDuration23);
        org.joda.time.Duration duration26 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) (byte) 10);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        boolean boolean35 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Minutes minutes36 = duration22.toStandardMinutes();
        org.joda.time.Duration duration38 = duration22.plus((long) 8);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.DateTime dateTime65 = interval63.getEnd();
        boolean boolean66 = interval51.contains((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Instant instant67 = dateTime65.toInstant();
        org.joda.time.Period period68 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) instant67);
        org.joda.time.DateTimeZone dateTimeZone69 = instant67.getZone();
        org.joda.time.Duration duration70 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) instant67);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.days();
        java.lang.String str72 = periodType71.getName();
        org.joda.time.PeriodType periodType73 = periodType71.withMillisRemoved();
        org.joda.time.Period period74 = duration13.toPeriodTo((org.joda.time.ReadableInstant) instant67, periodType71);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Days" + "'", str72, "Days");
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    public void test00395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00395");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Duration duration5 = duration3.withMillis((long) (-1));
        long long6 = duration5.getStandardDays();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getEnd();
        boolean boolean34 = interval19.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        boolean boolean51 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Minutes minutes52 = duration38.toStandardMinutes();
        org.joda.time.Duration duration54 = duration38.plus((long) 8);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration58 = duration38.withDurationAdded((long) (short) -1, 8);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration64 = duration62.plus(readableDuration63);
        org.joda.time.Duration duration66 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 10);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration66.toPeriod(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Interval interval70 = duration66.toIntervalTo(readableInstant69);
        org.joda.time.Period period71 = interval70.toPeriod();
        org.joda.time.Chronology chronology72 = interval70.getChronology();
        org.joda.time.Duration duration73 = interval70.toDuration();
        org.joda.time.Duration duration75 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) ' ');
        org.joda.time.Duration duration77 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration73, 35);
        long long78 = duration73.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1260100L + "'", long78 == 1260100L);
    }

    @Test
    public void test00396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00396");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = chronology15.set(readablePartial20, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test00397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00397");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withDaysRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType25 = periodType23.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1643312029209L, 126000000L, periodType25);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod26.add((int) 'a', (int) (byte) -1, 2, 2, (int) (byte) 1, 5, (int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
    }

    @Test
    public void test00398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00398");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        mutablePeriod33.setSeconds((int) '4');
        mutablePeriod33.add((int) '#', (int) ' ', 1, (int) (short) 100, (int) (short) 100, 0, (int) (byte) 100, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod33.setValue((int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00399");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Duration duration3 = duration1.plus(readableDuration2);
        org.joda.time.Hours hours4 = duration3.toStandardHours();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        boolean boolean9 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = duration17.toPeriod(chronology18);
        int int20 = duration6.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        int int25 = mutablePeriod24.getYears();
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod24.copy();
        mutablePeriod26.setYears((int) (short) 10);
        mutablePeriod26.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Interval interval50 = interval49.toInterval();
        mutablePeriod26.setPeriod((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Duration duration57 = duration55.plus(readableDuration56);
        org.joda.time.Duration duration59 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = duration59.toIntervalTo(readableInstant62);
        org.joda.time.Period period64 = interval63.toPeriod();
        mutablePeriod26.add((org.joda.time.ReadableInterval) interval63);
        org.joda.time.PeriodType periodType66 = mutablePeriod26.getPeriodType();
        org.joda.time.Period period67 = duration17.toPeriod(periodType66);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Duration duration71 = duration69.plus(readableDuration70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        boolean boolean80 = duration69.isLongerThan((org.joda.time.ReadableDuration) duration73);
        long long81 = duration73.getStandardHours();
        boolean boolean82 = duration17.isEqual((org.joda.time.ReadableDuration) duration73);
        long long83 = duration17.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1260100L + "'", long83 == 1260100L);
    }

    @Test
    public void test00400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00400");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        int int1 = periodType0.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = periodType0.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
    }

    @Test
    public void test00401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00401");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1644572119084L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572119084 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00402");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter2.withParseType(periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        mutablePeriod29.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod32 = mutablePeriod29.toMutablePeriod();
        mutablePeriod32.setSeconds((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = periodFormatter25.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod32, "2022-01-27T19:34:16.554Z", (-53));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNotNull(mutablePeriod32);
    }

    @Test
    public void test00403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00403");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = mutablePeriod3.toDurationFrom(readableInstant4);
        org.joda.time.Days days6 = duration5.toStandardDays();
        boolean boolean8 = duration5.equals((java.lang.Object) (short) 100);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) duration10, chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Interval interval14 = duration10.toIntervalTo(readableInstant13);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Period period27 = interval26.toPeriod();
        boolean boolean28 = interval14.overlaps((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology31);
        mutablePeriod32.add((long) ' ');
        int int35 = mutablePeriod32.getDays();
        mutablePeriod32.setMillis((int) (byte) -1);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.DateTime dateTime64 = interval62.getEnd();
        boolean boolean65 = interval50.contains((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Duration duration71 = duration69.plus(readableDuration70);
        org.joda.time.Duration duration73 = duration67.withDurationAdded((org.joda.time.ReadableDuration) duration69, (int) (byte) 10);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Period period75 = duration73.toPeriod(chronology74);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.Interval interval77 = duration73.toIntervalTo(readableInstant76);
        org.joda.time.Interval interval78 = interval77.toInterval();
        org.joda.time.DateTime dateTime79 = interval77.getEnd();
        java.lang.String str80 = dateTime79.toString();
        boolean boolean81 = dateTime64.isBefore((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Duration duration82 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean83 = interval26.isAfter((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime84 = interval26.getStart();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        boolean boolean86 = dateTime84.isSupported(dateTimeFieldType85);
        org.joda.time.Duration duration88 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((java.lang.Object) duration88, chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Duration duration92 = mutablePeriod90.toDurationFrom(readableInstant91);
        org.joda.time.Days days93 = duration92.toStandardDays();
        org.joda.time.Days days94 = duration92.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime84, (org.joda.time.ReadableDuration) duration92);
        boolean boolean96 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration92);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-02-11T09:35:59.123Z" + "'", str80, "2022-02-11T09:35:59.123Z");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(days93);
        org.junit.Assert.assertNotNull(days94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00404");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology13.getDateTimeMillis(2, (int) (short) 10, 80, 456825, (int) (short) 1, 32, (-3));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 456825 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test00405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00405");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = duration39.toPeriod(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = duration39.toIntervalTo(readableInstant42);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        java.lang.String str46 = dateTime45.toString();
        boolean boolean47 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration48 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime30.getZone();
        org.joda.time.Period period50 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime30);
        long long51 = duration1.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:35:59.473Z" + "'", str46, "2022-02-11T09:35:59.473Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
    }

    @Test
    public void test00406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00406");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Period period13 = interval11.toPeriod();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = interval11.contains(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        java.lang.Object obj25 = mutablePeriod23.clone();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((java.lang.Object) duration27, chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Interval interval31 = duration27.toIntervalTo(readableInstant30);
        mutablePeriod23.add((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology36);
        mutablePeriod37.setMillis((int) (short) 0);
        mutablePeriod37.addMonths((int) (short) 1);
        int int42 = mutablePeriod37.size();
        int int43 = mutablePeriod37.getWeeks();
        mutablePeriod37.setYears(8);
        mutablePeriod37.addSeconds(1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Period period60 = interval59.toPeriod();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        mutablePeriod37.add((org.joda.time.ReadableInterval) interval59);
        boolean boolean63 = interval31.contains((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = interval11.isBefore((org.joda.time.ReadableInterval) interval59);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.time();
        int int66 = periodType65.size();
        org.joda.time.Period period67 = interval59.toPeriod(periodType65);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = period67.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test00407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00407");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        mutablePeriod4.addDays(10);
        mutablePeriod4.setWeeks((int) (byte) -1);
        mutablePeriod4.addWeeks(8);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration34.plus(readableDuration35);
        org.joda.time.Duration duration38 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration38.toPeriod(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Interval interval42 = duration38.toIntervalTo(readableInstant41);
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((java.lang.Object) period28, chronology44);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod4, chronology44);
        mutablePeriod4.addMonths(14);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test00408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00408");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        int[] intArray2 = mutablePeriod1.getValues();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        mutablePeriod6.setMillis((int) (short) 0);
        mutablePeriod6.addMonths((int) (short) 1);
        mutablePeriod6.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutablePeriod17.setPeriod(readablePeriod18);
        mutablePeriod17.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        int int23 = mutablePeriod17.get(durationFieldType22);
        mutablePeriod6.add(durationFieldType22, (int) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology32);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.format.PeriodFormatter periodFormatter36 = null;
        java.lang.String str37 = mutablePeriod29.toString(periodFormatter36);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0]");
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0.052S" + "'", str37, "PT0.052S");
    }

    @Test
    public void test00409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00409");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.minuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test00410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00410");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1644572157482L);
    }

    @Test
    public void test00411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00411");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology47);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        mutablePeriod48.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod59 = mutablePeriod48.copy();
        org.joda.time.PeriodType periodType60 = mutablePeriod48.getPeriodType();
        org.joda.time.PeriodType periodType61 = periodType60.withWeeksRemoved();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod65.add((long) ' ');
        mutablePeriod65.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        mutablePeriod74.setPeriod(readablePeriod75);
        mutablePeriod74.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.days();
        int int80 = mutablePeriod74.get(durationFieldType79);
        boolean boolean81 = mutablePeriod65.isSupported(durationFieldType79);
        int int82 = periodType61.indexOf(durationFieldType79);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Duration duration88 = duration86.plus(readableDuration87);
        org.joda.time.Duration duration90 = duration84.withDurationAdded((org.joda.time.ReadableDuration) duration86, (int) (byte) 10);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.Period period92 = duration90.toPeriod(chronology91);
        org.joda.time.ReadableInstant readableInstant93 = null;
        org.joda.time.Interval interval94 = duration90.toIntervalTo(readableInstant93);
        org.joda.time.Period period95 = interval94.toPeriod();
        org.joda.time.Chronology chronology96 = interval94.getChronology();
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((java.lang.Object) duration40, periodType61, chronology96);
        org.joda.time.DateTimeField dateTimeField98 = chronology96.dayOfYear();
        mutablePeriod37.add(1644572128330L, chronology96);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(dateTimeField98);
    }

    @Test
    public void test00412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00412");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        java.lang.String str10 = mutablePeriod3.toString();
        mutablePeriod3.addMonths((int) (byte) -1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P10MT0.020S" + "'", str10, "P10MT0.020S");
    }

    @Test
    public void test00413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00413");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration25.toPeriod(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = duration25.toIntervalTo(readableInstant28);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = interval29.isBefore(readableInterval32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) readableInterval32);
        int int35 = mutablePeriod34.getHours();
        mutablePeriod34.add((int) (byte) 100, 0, 32, 4, (int) (byte) 100, (int) (byte) 100, (int) (byte) 10, 3);
        int[] intArray47 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 1, (long) 3);
        org.joda.time.DurationField durationField48 = chronology17.hours();
        org.joda.time.ReadablePartial readablePartial49 = null;
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Period period62 = interval61.toPeriod();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfMinute();
        org.joda.time.DurationField durationField65 = chronology63.months();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology68);
        mutablePeriod69.setHours(1);
        int[] intArray73 = chronology63.get((org.joda.time.ReadablePeriod) mutablePeriod69, 98674326653820000L);
        // The following exception was thrown during execution in test generation
        try {
            chronology17.validate(readablePartial49, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 163151995, 0, 21, 37, 0, 0]");
    }

    @Test
    public void test00414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00414");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) period12, chronology28);
        org.joda.time.DateTimeField dateTimeField34 = chronology28.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = chronology28.getDateTimeMillis(0, 2, 32, 340);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test00415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00415");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        boolean boolean16 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((java.lang.Object) duration9);
        java.lang.Class<?> wildcardClass18 = duration17.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00416");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) 2);
        boolean boolean4 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.dayOfMonth();
        org.joda.time.Chronology chronology25 = chronology20.withUTC();
        org.joda.time.DurationField durationField26 = chronology25.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) boolean4, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test00417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00417");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        java.io.Writer writer4 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology7);
        int int9 = mutablePeriod8.getYears();
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod8.copy();
        mutablePeriod10.setYears((int) (short) 10);
        mutablePeriod10.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration43.toPeriod(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalTo(readableInstant46);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = duration56.toPeriod(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Interval interval60 = duration56.toIntervalTo(readableInstant59);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getEnd();
        boolean boolean63 = interval48.contains((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = interval34.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Hours hours69 = duration68.toStandardHours();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Duration duration71 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(readableInstant70, (org.joda.time.ReadableDuration) duration71, periodType72);
        org.joda.time.Duration duration75 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration71, 10);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableDuration) duration71);
        int[] intArray77 = mutablePeriod76.getValues();
        java.lang.String str78 = mutablePeriod76.toString();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer4, (org.joda.time.ReadablePeriod) mutablePeriod76);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(hours69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT0S" + "'", str78, "PT0S");
    }

    @Test
    public void test00418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00418");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        boolean boolean20 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration13.toPeriod(periodType21, chronology22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod28.setPeriod(readablePeriod29);
        mutablePeriod28.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        int int34 = mutablePeriod28.get(durationFieldType33);
        boolean boolean35 = periodType21.isSupported(durationFieldType33);
        int int36 = periodType21.size();
        org.joda.time.PeriodType periodType37 = periodType21.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter3.withParseType(periodType37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod40 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:08.300Z", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
    }

    @Test
    public void test00419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00419");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Duration duration15 = duration13.plus(readableDuration14);
        org.joda.time.Duration duration17 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 10);
        boolean boolean18 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration11.toPeriod(periodType19, chronology20);
        org.joda.time.PeriodType periodType22 = periodType19.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.months();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(periodType22);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1644572120402L, 0L, periodType22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology29);
        int int31 = mutablePeriod30.getYears();
        org.joda.time.MutablePeriod mutablePeriod32 = mutablePeriod30.copy();
        mutablePeriod32.setYears((int) (short) 10);
        mutablePeriod32.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = duration51.toPeriod(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalTo(readableInstant54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        mutablePeriod32.setPeriod((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = duration65.toPeriod(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = duration65.toIntervalTo(readableInstant68);
        org.joda.time.Period period70 = interval69.toPeriod();
        mutablePeriod32.add((org.joda.time.ReadableInterval) interval69);
        org.joda.time.PeriodType periodType72 = mutablePeriod32.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.halfdays();
        int int74 = mutablePeriod32.get(durationFieldType73);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod26.set(durationFieldType73, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test00420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00420");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType7, (int) (byte) 1);
        int int10 = mutablePeriod3.getWeeks();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod14.add((long) ' ');
        mutablePeriod14.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        int int29 = mutablePeriod23.get(durationFieldType28);
        boolean boolean30 = mutablePeriod14.isSupported(durationFieldType28);
        boolean boolean31 = mutablePeriod3.isSupported(durationFieldType28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = mutablePeriod3.toDurationTo(readableInstant32);
        mutablePeriod3.setValue(2, 4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType38 = mutablePeriod3.getFieldType(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration33);
    }

    @Test
    public void test00421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00421");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.secondOfMinute();
        boolean boolean40 = mutablePeriod3.equals((java.lang.Object) chronology35);
        org.joda.time.DurationField durationField41 = chronology35.years();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = chronology35.getDateTimeMillis(10L, 14, 7, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test00422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00422");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        java.lang.String str54 = duration53.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:36:00.879Z" + "'", str51, "2022-02-11T09:36:00.879Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT-0.001S" + "'", str54, "PT-0.001S");
    }

    @Test
    public void test00423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00423");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        int int42 = periodType41.size();
        org.joda.time.PeriodType periodType43 = periodType41.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter40.withParseType(periodType43);
        java.util.Locale locale45 = null;
        org.joda.time.format.PeriodFormatter periodFormatter46 = periodFormatter44.withLocale(locale45);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-51), 4, 14, (int) ' ', 7, (-51), (int) (short) -1, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = periodFormatter46.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod55, "2022-02-11T09:35:55.865Z", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatter46);
    }

    @Test
    public void test00424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00424");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMillis();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology12);
        int int14 = mutablePeriod13.getYears();
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod13.copy();
        mutablePeriod15.setYears((int) (short) 10);
        mutablePeriod15.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        mutablePeriod15.setPeriod((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        mutablePeriod44.add((long) ' ');
        int int47 = mutablePeriod44.getDays();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.millis();
        mutablePeriod44.add(durationFieldType48, (int) (byte) 1);
        int int51 = mutablePeriod44.getWeeks();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod55.add((long) ' ');
        mutablePeriod55.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutablePeriod64.setPeriod(readablePeriod65);
        mutablePeriod64.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.days();
        int int70 = mutablePeriod64.get(durationFieldType69);
        boolean boolean71 = mutablePeriod55.isSupported(durationFieldType69);
        boolean boolean72 = mutablePeriod44.isSupported(durationFieldType69);
        mutablePeriod15.set(durationFieldType69, (int) (short) 1);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Duration duration80 = duration78.plus(readableDuration79);
        org.joda.time.Duration duration82 = duration76.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Period period84 = duration82.toPeriod(chronology83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.Interval interval86 = duration82.toIntervalTo(readableInstant85);
        org.joda.time.Period period87 = interval86.toPeriod();
        org.joda.time.Chronology chronology88 = interval86.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.hourOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.monthOfYear();
        org.joda.time.Chronology chronology91 = chronology88.withUTC();
        org.joda.time.DateTimeField dateTimeField92 = chronology88.hourOfDay();
        org.joda.time.DurationField durationField93 = durationFieldType69.getField(chronology88);
        boolean boolean94 = mutablePeriod4.isSupported(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test00425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00425");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        mutablePeriod5.setDays(51);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology69);
        int int71 = mutablePeriod70.getYears();
        org.joda.time.MutablePeriod mutablePeriod72 = mutablePeriod70.copy();
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod72);
    }

    @Test
    public void test00426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00426");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        mutablePeriod3.add(0L);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        int int14 = mutablePeriod3.indexOf(durationFieldType13);
        mutablePeriod3.addHours((int) (short) 1);
        org.joda.time.format.PeriodPrinter periodPrinter17 = null;
        org.joda.time.format.PeriodParser periodParser18 = null;
        org.joda.time.format.PeriodFormatter periodFormatter19 = new org.joda.time.format.PeriodFormatter(periodPrinter17, periodParser18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        boolean boolean36 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration29.toPeriod(periodType37, chronology38);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutablePeriod44.setPeriod(readablePeriod45);
        mutablePeriod44.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.days();
        int int50 = mutablePeriod44.get(durationFieldType49);
        boolean boolean51 = periodType37.isSupported(durationFieldType49);
        int int52 = periodType37.size();
        org.joda.time.PeriodType periodType53 = periodType37.withMonthsRemoved();
        org.joda.time.PeriodType periodType54 = periodType53.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter55 = periodFormatter19.withParseType(periodType53);
        java.util.Locale locale56 = null;
        org.joda.time.format.PeriodFormatter periodFormatter57 = periodFormatter55.withLocale(locale56);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.time();
        int int59 = periodType58.size();
        org.joda.time.PeriodType periodType60 = periodType58.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter61 = periodFormatter57.withParseType(periodType60);
        java.util.Locale locale62 = periodFormatter57.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = mutablePeriod3.toString(periodFormatter57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodFormatter55);
        org.junit.Assert.assertNotNull(periodFormatter57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodFormatter61);
        org.junit.Assert.assertNull(locale62);
    }

    @Test
    public void test00427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00427");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = periodFormatter3.getLocale();
        boolean boolean5 = periodFormatter3.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter3.getPrinter();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter3.withLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod9 = org.joda.time.MutablePeriod.parse("2022-02-11T09:35:27.707Z", periodFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
    }

    @Test
    public void test00428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00428");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod10.add((long) ' ');
        int int13 = mutablePeriod10.getDays();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.millis();
        mutablePeriod10.add(durationFieldType14, (int) (byte) 1);
        int int17 = mutablePeriod10.getWeeks();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        mutablePeriod21.add((long) ' ');
        mutablePeriod21.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutablePeriod30.setPeriod(readablePeriod31);
        mutablePeriod30.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.days();
        int int36 = mutablePeriod30.get(durationFieldType35);
        boolean boolean37 = mutablePeriod21.isSupported(durationFieldType35);
        boolean boolean38 = mutablePeriod10.isSupported(durationFieldType35);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Duration duration48 = duration46.plus(readableDuration47);
        org.joda.time.Duration duration50 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration50.toPeriod(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Interval interval54 = duration50.toIntervalTo(readableInstant53);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.days();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology56);
        org.joda.time.DurationField durationField62 = chronology56.centuries();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology56);
        org.joda.time.DurationField durationField64 = durationFieldType35.getField(chronology56);
        java.lang.String str65 = durationFieldType35.toString();
        mutablePeriod3.add(durationFieldType35, 3);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration79.toPeriod(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Interval interval83 = duration79.toIntervalTo(readableInstant82);
        org.joda.time.Period period84 = interval83.toPeriod();
        org.joda.time.Chronology chronology85 = interval83.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.days();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField88 = chronology85.millisOfDay();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((long) 1, (long) (byte) 1, chronology85);
        org.joda.time.DurationField durationField91 = chronology85.centuries();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((long) (short) 0, 10L, chronology85);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod92);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "days" + "'", str65, "days");
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField91);
    }

    @Test
    public void test00429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00429");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.add((long) ' ');
        int int37 = mutablePeriod34.getDays();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        mutablePeriod34.add(durationFieldType38, (int) (byte) 1);
        int int41 = mutablePeriod34.getWeeks();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        mutablePeriod45.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutablePeriod54.setPeriod(readablePeriod55);
        mutablePeriod54.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        int int60 = mutablePeriod54.get(durationFieldType59);
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType59);
        boolean boolean62 = mutablePeriod34.isSupported(durationFieldType59);
        mutablePeriod5.set(durationFieldType59, (int) (short) 1);
        java.lang.String str65 = durationFieldType59.getName();
        java.lang.String str66 = durationFieldType59.toString();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology69);
        mutablePeriod70.add((long) ' ');
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration81.toPeriod(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Interval interval85 = duration81.toIntervalTo(readableInstant84);
        org.joda.time.Period period86 = interval85.toPeriod();
        org.joda.time.Chronology chronology87 = interval85.getChronology();
        mutablePeriod70.setPeriod((long) (short) 0, chronology87);
        org.joda.time.DateTimeField dateTimeField89 = chronology87.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology87.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField91 = chronology87.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField92 = chronology87.era();
        org.joda.time.DateTimeField dateTimeField93 = chronology87.minuteOfHour();
        org.joda.time.DurationField durationField94 = chronology87.seconds();
        org.joda.time.DurationField durationField95 = durationFieldType59.getField(chronology87);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "days" + "'", str65, "days");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "days" + "'", str66, "days");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(durationField95);
    }

    @Test
    public void test00430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00430");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        mutablePeriod4.setMinutes((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int14 = mutablePeriod4.getValue((-52));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00431");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.days();
        java.lang.String str10 = periodType9.getName();
        org.joda.time.PeriodType periodType11 = periodType9.withWeeksRemoved();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration8.toPeriod(periodType9, chronology12);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter2.withParseType(periodType9);
        java.io.Writer writer15 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean19 = periodType17.equals((java.lang.Object) false);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, periodType17, chronology20);
        mutablePeriod21.addYears((int) 'a');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod31.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology48);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        mutablePeriod45.clear();
        mutablePeriod45.setValue((int) (byte) 0, (-1));
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        mutablePeriod31.setYears((int) (byte) 1);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        int int59 = mutablePeriod31.getSeconds();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer15, (org.joda.time.ReadablePeriod) mutablePeriod31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Days" + "'", str10, "Days");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test00432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00432");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        mutablePeriod3.addHours(0);
        mutablePeriod3.setWeeks((int) '4');
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod3.getFieldTypes();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.dayOfMonth();
        org.joda.time.Chronology chronology34 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.dayOfYear();
        org.joda.time.DurationField durationField36 = chronology29.weekyears();
        mutablePeriod3.add((long) '#', chronology29);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = chronology29.getDateTimeMillis(32, (int) (short) 100, 4, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test00433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00433");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        boolean boolean19 = interval5.overlaps((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        int int26 = mutablePeriod23.getDays();
        mutablePeriod23.setMillis((int) (byte) -1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        boolean boolean56 = interval41.contains((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        java.lang.String str71 = dateTime70.toString();
        boolean boolean72 = dateTime55.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean74 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Instant instant75 = dateTime70.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int77 = dateTime70.get(dateTimeFieldType76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-11T09:36:01.837Z" + "'", str71, "2022-02-11T09:36:01.837Z");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(instant75);
    }

    @Test
    public void test00434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00434");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.copy();
        mutablePeriod5.setYears((int) (short) 10);
        mutablePeriod5.setPeriod((int) (byte) 0, (int) (byte) 0, 0, (int) '#', (int) (short) -1, 3, (int) (short) 1, (int) ' ');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology23);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        mutablePeriod24.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod24.copy();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = mutablePeriod24.toDurationTo(readableInstant36);
        long long38 = duration37.getStandardSeconds();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis(126000L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Period period54 = interval53.toPeriod();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.days();
        org.joda.time.DurationField durationField57 = chronology55.centuries();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutablePeriod62.setPeriod(readablePeriod63);
        mutablePeriod62.addWeeks((int) (byte) 10);
        int int67 = mutablePeriod62.getMonths();
        mutablePeriod62.addDays(10);
        mutablePeriod62.setWeeks((int) (byte) -1);
        int[] intArray74 = chronology55.get((org.joda.time.ReadablePeriod) mutablePeriod62, (long) 100, 10L);
        org.joda.time.DateTimeField dateTimeField75 = chronology55.millisOfSecond();
        org.joda.time.Period period76 = duration41.toPeriod(chronology55);
        boolean boolean77 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration41);
        boolean boolean79 = duration41.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 28083659L + "'", long38 == 28083659L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -90]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test00435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00435");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (byte) -1);
        mutablePeriod1.setPeriod(33, 33, (int) (short) -1, 10, (int) (short) 1, 340, 0, 1);
    }

    @Test
    public void test00436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00436");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = periodType18.isSupported(durationFieldType30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod36.setMillis((int) (short) 0);
        mutablePeriod36.addMonths((int) (short) 1);
        mutablePeriod36.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutablePeriod47.setPeriod(readablePeriod48);
        mutablePeriod47.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.days();
        int int53 = mutablePeriod47.get(durationFieldType52);
        mutablePeriod36.add(durationFieldType52, (int) '#');
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod36.copy();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.weeks();
        int int68 = mutablePeriod66.get(durationFieldType67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration76.toPeriod(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        org.joda.time.Period period81 = interval80.toPeriod();
        org.joda.time.Chronology chronology82 = interval80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.hourOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.dayOfYear();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.secondOfMinute();
        org.joda.time.DurationField durationField87 = chronology82.weekyears();
        org.joda.time.DurationField durationField88 = chronology82.millis();
        boolean boolean89 = durationFieldType67.isSupported(chronology82);
        boolean boolean90 = durationFieldType30.isSupported(chronology82);
        org.joda.time.DurationField durationField91 = chronology82.centuries();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(0L, chronology82);
        org.joda.time.DateTimeField dateTimeField93 = chronology82.yearOfEra();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test00437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00437");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration23.plus(readableDuration24);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 10);
        boolean boolean28 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        boolean boolean29 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00438");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        mutablePeriod3.setMonths(0);
        mutablePeriod3.setMonths(10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(10L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration22 = duration13.plus((org.joda.time.ReadableDuration) duration21);
        boolean boolean23 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period24 = duration11.toPeriod();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        boolean boolean45 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration38.toPeriod(periodType46, chronology47);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutablePeriod53.setPeriod(readablePeriod54);
        mutablePeriod53.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.days();
        int int59 = mutablePeriod53.get(durationFieldType58);
        boolean boolean60 = periodType46.isSupported(durationFieldType58);
        int int61 = periodType46.size();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.weeks();
        int int63 = periodType46.indexOf(durationFieldType62);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod65.addHours(0);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Duration duration71 = duration69.plus(readableDuration70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration79.toPeriod(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Interval interval83 = duration79.toIntervalTo(readableInstant82);
        org.joda.time.Period period84 = interval83.toPeriod();
        org.joda.time.Chronology chronology85 = interval83.getChronology();
        mutablePeriod65.setPeriod((org.joda.time.ReadableDuration) duration71, chronology85);
        org.joda.time.DurationField durationField87 = durationFieldType62.getField(chronology85);
        org.joda.time.DateTimeField dateTimeField88 = chronology85.clockhourOfHalfday();
        mutablePeriod27.add(1643312018503L, chronology85);
        org.joda.time.Period period90 = duration11.toPeriod(chronology85);
        org.joda.time.DurationFieldType durationFieldType92 = period90.getFieldType((int) (byte) 0);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(durationFieldType92);
    }

    @Test
    public void test00439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00439");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology18);
        mutablePeriod19.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod19.toMutablePeriod();
        mutablePeriod19.addYears((int) (short) -1);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        mutablePeriod19.addWeeks(51);
        int int28 = mutablePeriod19.getDays();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test00440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00440");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutablePeriod13.setPeriod(readablePeriod14);
        mutablePeriod13.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        int int19 = mutablePeriod13.get(durationFieldType18);
        java.lang.String str20 = durationFieldType18.getName();
        int int21 = periodType8.indexOf(durationFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((int) (short) 10, 4, (int) (byte) 10, 3, 2, 456825, (-19), 33, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test00441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00441");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Duration duration23 = duration21.plus(readableDuration22);
        org.joda.time.Duration duration25 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) 10);
        boolean boolean26 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration28 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) 'a');
        org.joda.time.Days days29 = duration19.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(days29);
    }

    @Test
    public void test00442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00442");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration24 = duration15.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getEnd();
        boolean boolean54 = interval39.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.DateTime dateTime68 = interval66.getEnd();
        java.lang.String str69 = dateTime68.toString();
        boolean boolean70 = dateTime53.isBefore((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration71 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime53.getZone();
        org.joda.time.Period period73 = duration23.toPeriodTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Instant instant74 = dateTime53.toInstant();
        org.joda.time.DateTimeZone dateTimeZone75 = instant74.getZone();
        org.joda.time.Period period76 = duration10.toPeriodTo((org.joda.time.ReadableInstant) instant74);
        java.lang.Class<?> wildcardClass77 = instant74.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-11T09:36:02.726Z" + "'", str69, "2022-02-11T09:36:02.726Z");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test00443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00443");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        java.lang.String str14 = duration12.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        java.lang.Object obj24 = mutablePeriod22.clone();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) duration26, chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalTo(readableInstant29);
        mutablePeriod22.add((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.Chronology chronology33 = interval30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((java.lang.Object) duration12, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology33.getDateTimeMillis(8, 3, 14, 1, 35, (-3), (-3));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT6000S" + "'", str14, "PT6000S");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test00444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00444");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        java.util.Locale locale5 = periodFormatter2.getLocale();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.setMinutes((int) ' ');
        mutablePeriod10.setYears(0);
        java.lang.String str17 = mutablePeriod10.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod10, "2022-02-11T09:35:37.192Z", (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT32M" + "'", str17, "PT32M");
    }

    @Test
    public void test00445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00445");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        int int7 = mutablePeriod3.get(durationFieldType6);
        int int8 = mutablePeriod3.size();
        mutablePeriod3.addWeeks((int) (short) 0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getEnd();
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration42.plus(readableDuration43);
        org.joda.time.Duration duration46 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration46.toPeriod(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Interval interval50 = duration46.toIntervalTo(readableInstant49);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getEnd();
        boolean boolean53 = interval38.contains((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = interval38.getStart();
        java.lang.String str55 = dateTime54.toString();
        boolean boolean56 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration57 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration59 = duration57.plus(1644572121565L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Duration duration63 = duration61.withMillis(126000000L);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod65.addHours(0);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Duration duration71 = duration69.plus(readableDuration70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Duration duration77 = duration75.plus(readableDuration76);
        org.joda.time.Duration duration79 = duration73.withDurationAdded((org.joda.time.ReadableDuration) duration75, (int) (byte) 10);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = duration79.toPeriod(chronology80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Interval interval83 = duration79.toIntervalTo(readableInstant82);
        org.joda.time.Period period84 = interval83.toPeriod();
        org.joda.time.Chronology chronology85 = interval83.getChronology();
        mutablePeriod65.setPeriod((org.joda.time.ReadableDuration) duration71, chronology85);
        org.joda.time.Duration duration89 = duration71.withDurationAdded((long) 3, (int) '4');
        boolean boolean90 = duration61.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Period period91 = duration61.toPeriod();
        int int92 = duration57.compareTo((org.joda.time.ReadableDuration) duration61);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:36:02.849Z" + "'", str25, "2022-02-11T09:36:02.849Z");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-01-27T19:34:22.849Z" + "'", str55, "2022-01-27T19:34:22.849Z");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test00446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00446");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        int int9 = mutablePeriod4.getMonths();
        int int10 = mutablePeriod4.size();
        mutablePeriod4.addMinutes((int) ' ');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        int int17 = mutablePeriod16.getYears();
        java.lang.String str18 = mutablePeriod16.toString();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod23.setPeriod(readablePeriod24);
        mutablePeriod23.addWeeks((int) (byte) 10);
        mutablePeriod16.add((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        boolean boolean45 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = duration38.toPeriod(periodType46, chronology47);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutablePeriod53.setPeriod(readablePeriod54);
        mutablePeriod53.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.days();
        int int59 = mutablePeriod53.get(durationFieldType58);
        boolean boolean60 = periodType46.isSupported(durationFieldType58);
        int int61 = periodType46.size();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.weeks();
        int int63 = periodType46.indexOf(durationFieldType62);
        mutablePeriod23.add(durationFieldType62, 4);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.weeks();
        boolean boolean67 = mutablePeriod23.isSupported(durationFieldType66);
        boolean boolean68 = mutablePeriod4.isSupported(durationFieldType66);
        java.lang.String str69 = durationFieldType66.getName();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.052S" + "'", str18, "PT0.052S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "weeks" + "'", str69, "weeks");
    }

    @Test
    public void test00447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00447");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        boolean boolean4 = mutablePeriod2.equals((java.lang.Object) "PT0S");
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology13);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod14.copy();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = mutablePeriod14.toDurationTo(readableInstant26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology30 = null;
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration29, chronology30);
        boolean boolean32 = duration6.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.plus(readableDuration39);
        org.joda.time.Duration duration42 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (byte) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = duration42.toPeriod(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration42.toIntervalTo(readableInstant45);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration51.plus(readableDuration52);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = duration55.toPeriod(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getEnd();
        boolean boolean62 = interval47.contains((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.DateTime dateTime76 = interval74.getEnd();
        java.lang.String str77 = dateTime76.toString();
        boolean boolean78 = dateTime61.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration79 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime61.getZone();
        boolean boolean82 = dateTime61.equals((java.lang.Object) "PT60S");
        org.joda.time.Period period83 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Instant instant84 = dateTime61.toInstant();
        org.joda.time.Duration duration85 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) instant84);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.add(0, 5, 7, (int) ' ', 35, 14, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-11T09:36:03.004Z" + "'", str77, "2022-02-11T09:36:03.004Z");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test00448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00448");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.setMillis((int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod3.toMutablePeriod();
        mutablePeriod9.clear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = mutablePeriod9.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test00449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00449");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        mutablePeriod38.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        int int55 = mutablePeriod49.get(durationFieldType54);
        mutablePeriod38.add(durationFieldType54, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod68 = mutablePeriod38.copy();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = mutablePeriod68.get(durationFieldType69);
        long long73 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) ' ', 3);
        org.joda.time.DateTimeField dateTimeField74 = chronology29.dayOfYear();
        org.joda.time.DurationField durationField75 = chronology29.weeks();
        org.joda.time.ReadablePartial readablePartial76 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long78 = chronology29.set(readablePartial76, (long) (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-124L) + "'", long73 == (-124L));
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test00450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00450");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Interval interval27 = duration23.toIntervalTo(readableInstant26);
        org.joda.time.Period period28 = interval27.toPeriod();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutablePeriod3.add((long) (short) 100, chronology29);
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology37);
        mutablePeriod38.setMillis((int) (short) 0);
        mutablePeriod38.addMonths((int) (short) 1);
        mutablePeriod38.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutablePeriod49.setPeriod(readablePeriod50);
        mutablePeriod49.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.days();
        int int55 = mutablePeriod49.get(durationFieldType54);
        mutablePeriod38.add(durationFieldType54, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology64);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod68 = mutablePeriod38.copy();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.weeks();
        int int70 = mutablePeriod68.get(durationFieldType69);
        long long73 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod68, (long) ' ', 3);
        org.joda.time.DateTimeField dateTimeField74 = chronology29.dayOfYear();
        org.joda.time.DurationField durationField75 = chronology29.centuries();
        org.joda.time.ReadablePartial readablePartial76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = chronology29.get(readablePartial76, 6000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-124L) + "'", long73 == (-124L));
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test00451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00451");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Period period21 = mutablePeriod10.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        mutablePeriod22.setHours(51);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.setMillis((int) (short) 0);
        mutablePeriod28.addMonths((int) (short) 1);
        mutablePeriod28.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutablePeriod39.setPeriod(readablePeriod40);
        mutablePeriod39.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        int int45 = mutablePeriod39.get(durationFieldType44);
        mutablePeriod28.add(durationFieldType44, (int) '#');
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology54);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.MutablePeriod mutablePeriod58 = mutablePeriod28.copy();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.weeks();
        int int60 = mutablePeriod58.get(durationFieldType59);
        org.joda.time.PeriodType periodType61 = mutablePeriod58.getPeriodType();
        mutablePeriod22.add((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = mutablePeriod22.getFieldTypes();
        mutablePeriod22.add((long) 51);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
    }

    @Test
    public void test00452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00452");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) (short) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod11.copy();
        org.joda.time.PeriodType periodType23 = mutablePeriod11.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology27);
        mutablePeriod28.add((long) ' ');
        mutablePeriod28.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutablePeriod37.setPeriod(readablePeriod38);
        mutablePeriod37.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        int int43 = mutablePeriod37.get(durationFieldType42);
        boolean boolean44 = mutablePeriod28.isSupported(durationFieldType42);
        int int45 = periodType24.indexOf(durationFieldType42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration49.plus(readableDuration50);
        org.joda.time.Duration duration53 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration53.toPeriod(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = duration53.toIntervalTo(readableInstant56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology59);
        java.lang.String str61 = periodType24.getName();
        org.joda.time.PeriodType periodType62 = periodType24.withHoursRemoved();
        int int63 = periodType24.size();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology70);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        mutablePeriod67.clear();
        mutablePeriod67.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType77 = null;
        boolean boolean78 = mutablePeriod67.isSupported(durationFieldType77);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration87.toPeriod(chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Interval interval91 = duration87.toIntervalTo(readableInstant90);
        org.joda.time.Period period92 = interval91.toPeriod();
        org.joda.time.Chronology chronology93 = interval91.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.hourOfDay();
        org.joda.time.DateTimeField dateTimeField95 = chronology93.weekyearOfCentury();
        mutablePeriod67.add((long) (short) 100, chronology93);
        org.joda.time.DateTimeField dateTimeField97 = chronology93.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField98 = chronology93.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod99 = new org.joda.time.MutablePeriod(1L, 1644572092041L, periodType24, chronology93);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "StandardNoWeeks" + "'", str61, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(dateTimeField98);
    }

    @Test
    public void test00453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00453");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        int int8 = mutablePeriod3.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        mutablePeriod12.add((long) ' ');
        int int15 = mutablePeriod12.getDays();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        mutablePeriod12.add(durationFieldType16, (int) (byte) 1);
        int int19 = mutablePeriod12.getWeeks();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        mutablePeriod23.setMonths(10);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        boolean boolean40 = mutablePeriod12.isSupported(durationFieldType37);
        int int41 = mutablePeriod3.get(durationFieldType37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod48 = mutablePeriod45.toMutablePeriod();
        int[] intArray49 = mutablePeriod45.getValues();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration61.plus(readableDuration62);
        org.joda.time.Duration duration65 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 10);
        boolean boolean66 = duration53.isShorterThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration59.toPeriod(periodType67, chronology68);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        mutablePeriod74.setPeriod(readablePeriod75);
        mutablePeriod74.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.days();
        int int80 = mutablePeriod74.get(durationFieldType79);
        boolean boolean81 = periodType67.isSupported(durationFieldType79);
        mutablePeriod45.set(durationFieldType79, 8);
        int int84 = mutablePeriod3.indexOf(durationFieldType79);
        mutablePeriod3.setYears(10);
        int[] intArray87 = mutablePeriod3.getValues();
        mutablePeriod3.setWeeks((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue((-53), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 1, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test00454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00454");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutablePeriod22.setPeriod(readablePeriod23);
        mutablePeriod22.addWeeks((int) (byte) 10);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) '#', (-1L));
        org.joda.time.DateTimeField dateTimeField30 = chronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology33);
        mutablePeriod34.setMillis((int) (short) 0);
        mutablePeriod34.addMonths((int) (short) 1);
        mutablePeriod34.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray41 = mutablePeriod34.getFieldTypes();
        mutablePeriod34.addMonths(0);
        org.joda.time.Period period44 = mutablePeriod34.toPeriod();
        int[] intArray46 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod34, 126000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType48 = mutablePeriod34.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, -36]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 2, 6, 0]");
    }

    @Test
    public void test00455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00455");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        java.lang.String str11 = duration8.toString();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean14 = periodType12.equals((java.lang.Object) false);
        org.joda.time.Period period15 = duration8.toPeriod(periodType12);
        org.joda.time.PeriodType periodType16 = periodType12.withMillisRemoved();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        boolean boolean18 = periodType12.equals((java.lang.Object) periodType17);
        org.joda.time.PeriodType periodType19 = periodType12.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        boolean boolean21 = periodType12.isSupported(durationFieldType20);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withParseType(periodType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod24 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:42.744Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT126000S" + "'", str11, "PT126000S");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodFormatter22);
    }

    @Test
    public void test00456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00456");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getEnd();
        boolean boolean36 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration40.plus(readableDuration41);
        org.joda.time.Duration duration44 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration44.toPeriod(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getEnd();
        java.lang.String str51 = dateTime50.toString();
        boolean boolean52 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology54 = dateTime50.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.weekyears();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:36:03.652Z" + "'", str51, "2022-02-11T09:36:03.652Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test00457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00457");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        java.util.Locale locale4 = periodFormatter2.getLocale();
        boolean boolean5 = periodFormatter2.isParser();
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = periodType25.isSupported(durationFieldType37);
        int int40 = periodType25.size();
        org.joda.time.PeriodType periodType41 = periodType25.withMonthsRemoved();
        org.joda.time.PeriodType periodType42 = periodType41.withYearsRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withHoursRemoved();
        int int44 = periodType42.size();
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter2.withParseType(periodType42);
        java.lang.StringBuffer stringBuffer46 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutablePeriod51.setPeriod(readablePeriod52);
        mutablePeriod51.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.days();
        int int57 = mutablePeriod51.get(durationFieldType56);
        mutablePeriod51.setMinutes((-1));
        mutablePeriod51.setHours(3);
        mutablePeriod51.addWeeks(100);
        mutablePeriod51.setWeeks((-1));
        mutablePeriod51.add(340, (int) '#', 10, 0, (int) (short) -1, 4, 1, 4);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer46, (org.joda.time.ReadablePeriod) mutablePeriod51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(periodFormatter45);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test00458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00458");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration22.toIntervalTo(readableInstant25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        boolean boolean29 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Duration duration35 = duration33.plus(readableDuration34);
        org.joda.time.Duration duration37 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = duration37.toIntervalTo(readableInstant40);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getEnd();
        java.lang.String str44 = dateTime43.toString();
        boolean boolean45 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = mutablePeriod1.toDurationFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime28.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = dateTime28.isSupported(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:36:03.838Z" + "'", str44, "2022-02-11T09:36:03.838Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test00459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00459");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval12.getStart();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = dateTime28.isSupported(dateTimeFieldType30);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        java.lang.String str33 = dateTime28.toString();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.DateTime dateTime76 = interval74.getEnd();
        boolean boolean77 = interval62.contains((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration85.toPeriod(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Interval interval89 = duration85.toIntervalTo(readableInstant88);
        org.joda.time.Interval interval90 = interval89.toInterval();
        org.joda.time.DateTime dateTime91 = interval89.getEnd();
        java.lang.String str92 = dateTime91.toString();
        boolean boolean93 = dateTime76.isBefore((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.Duration duration94 = mutablePeriod49.toDurationFrom((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime76.getZone();
        org.joda.time.Period period96 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period97 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean98 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime76);
        java.lang.String str99 = dateTime76.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-27T19:34:23.933Z" + "'", str29, "2022-01-27T19:34:23.933Z");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-01-27T19:34:23.933Z" + "'", str33, "2022-01-27T19:34:23.933Z");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022-02-11T09:36:03.933Z" + "'", str92, "2022-02-11T09:36:03.933Z");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str99 + "' != '" + "2022-02-11T09:36:03.933Z" + "'", str99, "2022-02-11T09:36:03.933Z");
    }

    @Test
    public void test00460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00460");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        int int6 = mutablePeriod3.getDays();
        mutablePeriod3.setMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology11);
        int int13 = mutablePeriod12.getYears();
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod12.copy();
        mutablePeriod14.setYears((int) (short) 10);
        mutablePeriod14.setPeriod((int) (short) -1, (int) '4', 0, 0, 0, (-1), (int) (byte) -1, 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Duration duration31 = duration29.plus(readableDuration30);
        org.joda.time.Duration duration33 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Interval interval37 = duration33.toIntervalTo(readableInstant36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        mutablePeriod14.setPeriod((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Duration duration58 = duration56.plus(readableDuration57);
        org.joda.time.Duration duration60 = duration54.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = duration60.toPeriod(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalTo(readableInstant63);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.DateTime dateTime66 = interval64.getEnd();
        boolean boolean67 = interval52.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Duration duration75 = duration73.plus(readableDuration74);
        org.joda.time.Duration duration77 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration73, (int) (byte) 10);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        boolean boolean86 = duration73.isShorterThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration79.toPeriod(periodType87, chronology88);
        org.joda.time.PeriodType periodType90 = periodType87.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.months();
        int int92 = periodType90.indexOf(durationFieldType91);
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((java.lang.Object) interval38, periodType90);
        org.joda.time.ReadableInterval readableInterval94 = null;
        boolean boolean95 = interval38.isBefore(readableInterval94);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test00461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00461");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(60000L, 0L);
        mutablePeriod2.setPeriod(4, (int) (short) 0, 340, 0, (int) (byte) 10, (int) (byte) -1, (int) (byte) 0, (int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.set(durationFieldType12, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00462");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.PeriodType periodType6 = mutablePeriod3.getPeriodType();
        int int7 = periodType6.size();
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test00463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00463");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        mutablePeriod3.addYears(1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        boolean boolean18 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration15);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) 0, (long) ' ');
        int int23 = duration13.compareTo((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod31.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod31.copy();
        org.joda.time.PeriodType periodType43 = mutablePeriod31.getPeriodType();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.Period period45 = duration22.toPeriod(periodType44);
        org.joda.time.format.PeriodPrinter periodPrinter46 = null;
        org.joda.time.format.PeriodParser periodParser47 = null;
        org.joda.time.format.PeriodFormatter periodFormatter48 = new org.joda.time.format.PeriodFormatter(periodPrinter46, periodParser47);
        java.util.Locale locale49 = periodFormatter48.getLocale();
        org.joda.time.PeriodType periodType50 = periodFormatter48.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = period45.toString(periodFormatter48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNull(periodType50);
    }

    @Test
    public void test00464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00464");
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Duration duration10 = duration8.plus(readableDuration9);
        org.joda.time.Duration duration12 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration8, (int) (byte) 10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        boolean boolean21 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration14.toPeriod(periodType22, chronology23);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutablePeriod29.setPeriod(readablePeriod30);
        mutablePeriod29.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.days();
        int int35 = mutablePeriod29.get(durationFieldType34);
        boolean boolean36 = periodType22.isSupported(durationFieldType34);
        int int37 = periodType22.size();
        org.joda.time.PeriodType periodType38 = periodType22.withMonthsRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter4.withParseType(periodType38);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(126000L, 1644572114290L, periodType38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology44);
        mutablePeriod45.add((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod48 = mutablePeriod45.toMutablePeriod();
        mutablePeriod48.setSeconds((int) (short) 10);
        mutablePeriod48.addDays(100);
        mutablePeriod48.addHours((int) '4');
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        mutablePeriod59.setPeriod(readablePeriod60);
        mutablePeriod59.addWeeks((int) (byte) 10);
        int int64 = mutablePeriod59.getMonths();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology67);
        mutablePeriod68.add((long) ' ');
        int int71 = mutablePeriod68.getDays();
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.millis();
        mutablePeriod68.add(durationFieldType72, (int) (byte) 1);
        boolean boolean75 = mutablePeriod59.equals((java.lang.Object) durationFieldType72);
        mutablePeriod48.set(durationFieldType72, 340);
        boolean boolean78 = periodType38.isSupported(durationFieldType72);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test00465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00465");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod3.clear();
        mutablePeriod3.setValue((int) (byte) 0, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = mutablePeriod3.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) 10, (long) 'a', chronology17);
        int int19 = mutablePeriod18.getWeeks();
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.setWeeks((int) (short) 100);
        java.lang.String str23 = mutablePeriod18.toString();
        java.lang.String str24 = mutablePeriod18.toString();
        mutablePeriod18.setWeeks(3);
        java.lang.Object obj27 = mutablePeriod18.clone();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P100WT0.087S" + "'", str23, "P100WT0.087S");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P100WT0.087S" + "'", str24, "P100WT0.087S");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P3WT0.087S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P3WT0.087S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P3WT0.087S");
    }

    @Test
    public void test00466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00466");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology34.getZone();
        org.joda.time.DateTimeField dateTimeField43 = chronology34.era();
        org.joda.time.DateTimeField dateTimeField44 = chronology34.hourOfDay();
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test00467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00467");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3, periodType3);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setMonths(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Days" + "'", str2, "Days");
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test00468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00468");
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        java.lang.String str12 = duration9.toString();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDay();
        boolean boolean15 = periodType13.equals((java.lang.Object) false);
        org.joda.time.Period period16 = duration9.toPeriod(periodType13);
        org.joda.time.PeriodType periodType17 = periodType13.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType13);
        org.joda.time.PeriodType periodType19 = periodType13.withMonthsRemoved();
        org.joda.time.PeriodType periodType20 = periodType13.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(35, 456825, (int) (short) -1, (-52), (int) (short) 10, (-3), (int) (byte) -1, (-19), periodType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT126000S" + "'", str12, "PT126000S");
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test00469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00469");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration24 = duration15.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Duration duration32 = duration30.plus(readableDuration31);
        org.joda.time.Duration duration34 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = duration34.toPeriod(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = duration34.toIntervalTo(readableInstant37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration43.plus(readableDuration44);
        org.joda.time.Duration duration47 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = duration47.toPeriod(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration47.toIntervalTo(readableInstant50);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getEnd();
        boolean boolean54 = interval39.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration58.plus(readableDuration59);
        org.joda.time.Duration duration62 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) (byte) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration62.toPeriod(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = duration62.toIntervalTo(readableInstant65);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.DateTime dateTime68 = interval66.getEnd();
        java.lang.String str69 = dateTime68.toString();
        boolean boolean70 = dateTime53.isBefore((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration71 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime53.getZone();
        org.joda.time.Period period73 = duration23.toPeriodTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Instant instant74 = dateTime53.toInstant();
        org.joda.time.DateTimeZone dateTimeZone75 = instant74.getZone();
        org.joda.time.Period period76 = duration10.toPeriodTo((org.joda.time.ReadableInstant) instant74);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology79);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology83);
        mutablePeriod80.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod84);
        java.lang.Object obj86 = mutablePeriod84.clone();
        org.joda.time.Duration duration88 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((java.lang.Object) duration88, chronology89);
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.Interval interval92 = duration88.toIntervalTo(readableInstant91);
        mutablePeriod84.add((org.joda.time.ReadableInterval) interval92);
        org.joda.time.DateTime dateTime94 = interval92.getStart();
        org.joda.time.Chronology chronology95 = interval92.getChronology();
        org.joda.time.DateTimeZone dateTimeZone96 = chronology95.getZone();
        boolean boolean97 = instant74.equals((java.lang.Object) dateTimeZone96);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-11T09:36:04.682Z" + "'", str69, "2022-02-11T09:36:04.682Z");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "PT1M0.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "PT1M0.052S");
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00470");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutablePeriod4.setPeriod(readablePeriod5);
        mutablePeriod4.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        int int10 = mutablePeriod4.get(durationFieldType9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration18.toPeriod(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration27.plus(readableDuration28);
        org.joda.time.Duration duration31 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration31.toPeriod(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = duration31.toIntervalTo(readableInstant34);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getEnd();
        boolean boolean38 = interval23.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = interval23.getStart();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.days();
        java.lang.String str41 = periodType40.getName();
        org.joda.time.Period period42 = interval23.toPeriod(periodType40);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval44 = interval23.toMutableInterval();
        long long45 = mutableInterval44.getEndMillis();
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Days" + "'", str41, "Days");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(mutableInterval44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572164899L + "'", long45 == 1644572164899L);
    }

    @Test
    public void test00471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00471");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = periodFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod41 = periodFormatter2.parseMutablePeriod("2022-02-11T09:35:41.797Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNull(locale39);
    }

    @Test
    public void test00472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00472");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology24);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod21.clear();
        mutablePeriod21.setValue((int) (byte) 0, (-1));
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod21, chronology32);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutablePeriod38.setPeriod(readablePeriod39);
        mutablePeriod38.addWeeks((int) (byte) 10);
        int int43 = mutablePeriod38.getMonths();
        int int44 = mutablePeriod38.size();
        mutablePeriod38.addMinutes((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod38.toMutablePeriod();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes((long) 1);
        mutablePeriod47.add((org.joda.time.ReadableDuration) duration49);
        mutablePeriod33.add((org.joda.time.ReadableDuration) duration49);
        org.joda.time.PeriodType periodType52 = mutablePeriod33.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType53 = null;
        int int54 = periodType52.indexOf(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test00473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00473");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval12.getStart();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = dateTime28.isSupported(dateTimeFieldType30);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        java.lang.String str33 = dateTime28.toString();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration37.plus(readableDuration38);
        org.joda.time.Duration duration41 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = duration41.toPeriod(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Interval interval45 = duration41.toIntervalTo(readableInstant44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) '4');
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Duration duration68 = duration66.plus(readableDuration67);
        org.joda.time.Duration duration70 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (byte) 10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = duration70.toPeriod(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Interval interval74 = duration70.toIntervalTo(readableInstant73);
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.DateTime dateTime76 = interval74.getEnd();
        boolean boolean77 = interval62.contains((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Duration duration83 = duration81.plus(readableDuration82);
        org.joda.time.Duration duration85 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration81, (int) (byte) 10);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = duration85.toPeriod(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Interval interval89 = duration85.toIntervalTo(readableInstant88);
        org.joda.time.Interval interval90 = interval89.toInterval();
        org.joda.time.DateTime dateTime91 = interval89.getEnd();
        java.lang.String str92 = dateTime91.toString();
        boolean boolean93 = dateTime76.isBefore((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.Duration duration94 = mutablePeriod49.toDurationFrom((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime76.getZone();
        org.joda.time.Period period96 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period97 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean98 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Instant instant99 = dateTime28.toInstant();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-27T19:34:25.048Z" + "'", str29, "2022-01-27T19:34:25.048Z");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-01-27T19:34:25.048Z" + "'", str33, "2022-01-27T19:34:25.048Z");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022-02-11T09:36:05.048Z" + "'", str92, "2022-02-11T09:36:05.048Z");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(instant99);
    }

    @Test
    public void test00474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00474");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.add((long) ' ');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration10.plus(readableDuration11);
        org.joda.time.Duration duration14 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration14.toPeriod(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        mutablePeriod3.setPeriod((long) (short) 0, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology20.set(readablePartial24, 1644572156012L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test00475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00475");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = mutablePeriod7.toDurationTo(readableInstant19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration22, chronology23);
        int int25 = mutablePeriod7.getYears();
        mutablePeriod7.setDays(100);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology30);
        mutablePeriod31.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod31.toMutablePeriod();
        int[] intArray35 = mutablePeriod31.getValues();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration39.plus(readableDuration40);
        org.joda.time.Duration duration43 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 10);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Duration duration49 = duration47.plus(readableDuration48);
        org.joda.time.Duration duration51 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 10);
        boolean boolean52 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = duration45.toPeriod(periodType53, chronology54);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        mutablePeriod60.setPeriod(readablePeriod61);
        mutablePeriod60.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.days();
        int int66 = mutablePeriod60.get(durationFieldType65);
        boolean boolean67 = periodType53.isSupported(durationFieldType65);
        mutablePeriod31.set(durationFieldType65, 8);
        int int70 = mutablePeriod7.indexOf(durationFieldType65);
        mutablePeriod7.setMillis((int) (short) 10);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
    }

    @Test
    public void test00476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00476");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.year();
        org.joda.time.DurationField durationField40 = chronology34.years();
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test00477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00477");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        org.joda.time.Duration duration3 = duration1.plus(126000L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Duration duration9 = duration7.plus(readableDuration8);
        org.joda.time.Duration duration11 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = duration11.toPeriod(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration11.toIntervalTo(readableInstant14);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = duration24.toPeriod(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration24.toIntervalTo(readableInstant27);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        boolean boolean31 = interval16.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = interval16.getStart();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        java.lang.String str34 = periodType33.getName();
        org.joda.time.Period period35 = interval16.toPeriod(periodType33);
        org.joda.time.PeriodType periodType36 = periodType33.withHoursRemoved();
        int int37 = periodType36.size();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Duration duration55 = duration53.plus(readableDuration54);
        org.joda.time.Duration duration57 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = duration57.toPeriod(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration57.toIntervalTo(readableInstant60);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getEnd();
        org.joda.time.Duration duration64 = interval61.toDuration();
        boolean boolean65 = interval49.overlaps((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Chronology chronology66 = interval61.getChronology();
        org.joda.time.Period period67 = duration3.toPeriod(periodType36, chronology66);
        long long71 = chronology66.add(1643312030746L, 1643312042546L, 32);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Days" + "'", str34, "Days");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 54229297392218L + "'", long71 == 54229297392218L);
    }

    @Test
    public void test00478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00478");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        int int4 = mutablePeriod3.getYears();
        java.lang.String str5 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod10.setPeriod(readablePeriod11);
        mutablePeriod10.addWeeks((int) (byte) 10);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17);
        boolean boolean19 = mutablePeriod10.equals((java.lang.Object) readableInstant16);
        org.joda.time.Period period20 = mutablePeriod10.toPeriod();
        org.joda.time.Period period21 = mutablePeriod10.toPeriod();
        int int23 = period21.getValue((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.052S" + "'", str5, "PT0.052S");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test00479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00479");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 340);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration12 = duration3.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean15 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration14);
        java.lang.String str16 = duration14.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.millis((long) 100);
        boolean boolean19 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration18);
        boolean boolean20 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Days days21 = duration1.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT6000S" + "'", str16, "PT6000S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(days21);
    }

    @Test
    public void test00480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00480");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod1.addHours(0);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration15.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalTo(readableInstant18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration7, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology21.getDateTimeMillis(1644572138663L, 0, (int) (short) -1, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test00481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00481");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        boolean boolean17 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration10.toPeriod(periodType18, chronology19);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutablePeriod25.setPeriod(readablePeriod26);
        mutablePeriod25.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        int int31 = mutablePeriod25.get(durationFieldType30);
        boolean boolean32 = periodType18.isSupported(durationFieldType30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology35);
        mutablePeriod36.setMillis((int) (short) 0);
        mutablePeriod36.addMonths((int) (short) 1);
        mutablePeriod36.setMinutes((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutablePeriod47.setPeriod(readablePeriod48);
        mutablePeriod47.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.days();
        int int53 = mutablePeriod47.get(durationFieldType52);
        mutablePeriod36.add(durationFieldType52, (int) '#');
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology62);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod36.copy();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.weeks();
        int int68 = mutablePeriod66.get(durationFieldType67);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Duration duration74 = duration72.plus(readableDuration73);
        org.joda.time.Duration duration76 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) (byte) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration76.toPeriod(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Interval interval80 = duration76.toIntervalTo(readableInstant79);
        org.joda.time.Period period81 = interval80.toPeriod();
        org.joda.time.Chronology chronology82 = interval80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.hourOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.dayOfYear();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.secondOfMinute();
        org.joda.time.DurationField durationField87 = chronology82.weekyears();
        org.joda.time.DurationField durationField88 = chronology82.millis();
        boolean boolean89 = durationFieldType67.isSupported(chronology82);
        boolean boolean90 = durationFieldType30.isSupported(chronology82);
        org.joda.time.DurationField durationField91 = chronology82.centuries();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(0L, chronology82);
        org.joda.time.MutablePeriod mutablePeriod93 = mutablePeriod92.toMutablePeriod();
        java.lang.String str94 = mutablePeriod93.toString();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(mutablePeriod93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "PT0S" + "'", str94, "PT0S");
    }

    @Test
    public void test00482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00482");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod2.addHours(0);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration16.toPeriod(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = duration16.toIntervalTo(readableInstant19);
        org.joda.time.Period period21 = interval20.toPeriod();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration8, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType0.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = chronology22.getDateTimeMillis(5, 2, 33, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test00483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00483");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3, periodType3);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.addMinutes(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Days" + "'", str2, "Days");
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test00484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00484");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.setMillis((int) (short) 0);
        mutablePeriod3.addMonths((int) (short) 1);
        mutablePeriod3.setMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addMonths(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology15);
        mutablePeriod16.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod16.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        int int32 = mutablePeriod27.getMonths();
        mutablePeriod27.addDays(10);
        mutablePeriod27.setWeeks((int) (byte) -1);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        mutablePeriod27.add(2, (-53), 8, (int) (short) 100, 10, 6, (int) '4', 51);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test00485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00485");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter40.getLocale();
        java.lang.StringBuffer stringBuffer42 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter40.printTo(stringBuffer42, (org.joda.time.ReadablePeriod) mutablePeriod46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
    }

    @Test
    public void test00486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00486");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalTo(readableInstant4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration9.plus(readableDuration10);
        org.joda.time.Duration duration13 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration13.toPeriod(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration13.toIntervalTo(readableInstant16);
        org.joda.time.Period period18 = interval17.toPeriod();
        boolean boolean19 = interval5.overlaps((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology22);
        mutablePeriod23.add((long) ' ');
        int int26 = mutablePeriod23.getDays();
        mutablePeriod23.setMillis((int) (byte) -1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration32.plus(readableDuration33);
        org.joda.time.Duration duration36 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration36.toPeriod(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Interval interval40 = duration36.toIntervalTo(readableInstant39);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration47 = duration45.plus(readableDuration46);
        org.joda.time.Duration duration49 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration45, (int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = duration49.toPeriod(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Interval interval53 = duration49.toIntervalTo(readableInstant52);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getEnd();
        boolean boolean56 = interval41.contains((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = duration64.toPeriod(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Interval interval68 = duration64.toIntervalTo(readableInstant67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getEnd();
        java.lang.String str71 = dateTime70.toString();
        boolean boolean72 = dateTime55.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean74 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Instant instant75 = dateTime70.toInstant();
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Duration duration79 = duration77.plus(readableDuration78);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        boolean boolean88 = duration77.isLongerThan((org.joda.time.ReadableDuration) duration81);
        java.lang.String str89 = duration77.toString();
        org.joda.time.PeriodType periodType91 = org.joda.time.PeriodType.days();
        java.lang.String str92 = periodType91.getName();
        org.joda.time.PeriodType periodType93 = periodType91.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((long) 3, periodType93);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant75, (org.joda.time.ReadableDuration) duration77, periodType93);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod95.addMillis((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-11T09:36:06.160Z" + "'", str71, "2022-02-11T09:36:06.160Z");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "PT126000S" + "'", str89, "PT126000S");
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Days" + "'", str92, "Days");
        org.junit.Assert.assertNotNull(periodType93);
    }

    @Test
    public void test00487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00487");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        java.util.Locale locale41 = periodFormatter40.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter42 = periodFormatter40.getPrinter();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod44.addHours(0);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Duration duration56 = duration54.plus(readableDuration55);
        org.joda.time.Duration duration58 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration58.toPeriod(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Interval interval62 = duration58.toIntervalTo(readableInstant61);
        org.joda.time.Period period63 = interval62.toPeriod();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        mutablePeriod44.setPeriod((org.joda.time.ReadableDuration) duration50, chronology64);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = periodFormatter40.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod44, "PeriodType[YearsNoYears]", 51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNull(periodPrinter42);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test00488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00488");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology13.months();
        org.joda.time.DurationField durationField19 = chronology13.eras();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test00489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00489");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        mutablePeriod3.addMillis(10);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        int[] intArray7 = mutablePeriod3.getValues();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Duration duration13 = duration11.plus(readableDuration12);
        org.joda.time.Duration duration15 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 10);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 10);
        boolean boolean24 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration17.toPeriod(periodType25, chronology26);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutablePeriod32.setPeriod(readablePeriod33);
        mutablePeriod32.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        int int38 = mutablePeriod32.get(durationFieldType37);
        boolean boolean39 = periodType25.isSupported(durationFieldType37);
        mutablePeriod3.set(durationFieldType37, 8);
        org.joda.time.format.PeriodPrinter periodPrinter42 = null;
        org.joda.time.format.PeriodParser periodParser43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = new org.joda.time.format.PeriodFormatter(periodPrinter42, periodParser43);
        java.util.Locale locale45 = periodFormatter44.getLocale();
        java.util.Locale locale46 = periodFormatter44.getLocale();
        org.joda.time.format.PeriodParser periodParser47 = periodFormatter44.getParser();
        org.joda.time.PeriodType periodType48 = periodFormatter44.getParseType();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Duration duration54 = duration52.plus(readableDuration53);
        org.joda.time.Duration duration56 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (byte) 10);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Duration duration62 = duration60.plus(readableDuration61);
        org.joda.time.Duration duration64 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (byte) 10);
        boolean boolean65 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = duration58.toPeriod(periodType66, chronology67);
        org.joda.time.PeriodType periodType69 = periodType66.withYearsRemoved();
        org.joda.time.PeriodType periodType70 = periodType66.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter44.withParseType(periodType66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = mutablePeriod3.toString(periodFormatter44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, -42]");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertNull(periodParser47);
        org.junit.Assert.assertNull(periodType48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodFormatter71);
    }

    @Test
    public void test00490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00490");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod14.addHours(0);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Duration duration20 = duration18.plus(readableDuration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration24.plus(readableDuration25);
        org.joda.time.Duration duration28 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration28.toPeriod(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType12, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (short) -1);
        mutablePeriod42.setDays((int) 'a');
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod42.copy();
        int[] intArray46 = mutablePeriod45.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology34.validate(readablePartial40, intArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 97, 0, 0, 0, -1]");
    }

    @Test
    public void test00491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00491");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Days days8 = duration7.toStandardDays();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (short) -1, periodType10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Duration duration17 = duration15.plus(readableDuration16);
        org.joda.time.Duration duration19 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration19.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Interval interval23 = duration19.toIntervalTo(readableInstant22);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Period period26 = duration7.toPeriod(periodType10, chronology25);
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DurationField durationField28 = chronology25.hours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test00492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00492");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology6);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology25);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology43);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod40.clear();
        mutablePeriod40.setValue((int) (byte) 0, (-1));
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod40, chronology51);
        mutablePeriod52.setSeconds((int) '4');
        mutablePeriod52.add((int) '#', (int) ' ', 1, (int) (short) 100, (int) (short) 100, 0, (int) (byte) 100, (int) (byte) -1);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DurationFieldType durationFieldType66 = mutablePeriod18.getFieldType(4);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Duration duration72 = duration70.plus(readableDuration71);
        org.joda.time.Duration duration74 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, (int) (byte) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = duration74.toPeriod(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Interval interval78 = duration74.toIntervalTo(readableInstant77);
        org.joda.time.Interval interval79 = interval78.toInterval();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Duration duration85 = duration83.plus(readableDuration84);
        org.joda.time.Duration duration87 = duration81.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = duration87.toPeriod(chronology88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Interval interval91 = duration87.toIntervalTo(readableInstant90);
        org.joda.time.Interval interval92 = interval91.toInterval();
        org.joda.time.DateTime dateTime93 = interval91.getEnd();
        boolean boolean94 = interval79.contains((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.Chronology chronology95 = interval79.getChronology();
        mutablePeriod18.add((org.joda.time.ReadableInterval) interval79);
        mutablePeriod18.addWeeks(1);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(chronology95);
    }

    @Test
    public void test00493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00493");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Duration duration7 = duration5.plus(readableDuration6);
        org.joda.time.Duration duration9 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = duration9.toPeriod(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalTo(readableInstant12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 0, (long) (byte) 1, chronology15);
        org.joda.time.DurationField durationField19 = chronology15.days();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology39);
        mutablePeriod40.add((long) ' ');
        int int43 = mutablePeriod40.getDays();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.millis();
        mutablePeriod40.add(durationFieldType44, (int) (byte) 1);
        int int47 = mutablePeriod40.getWeeks();
        int[] intArray50 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod40, 1644572122264L, 1644572127641L);
        // The following exception was thrown during execution in test generation
        try {
            chronology20.validate(readablePartial21, intArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 5, 377]");
    }

    @Test
    public void test00494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00494");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Duration duration18 = duration16.plus(readableDuration17);
        org.joda.time.Duration duration20 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration16, (int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration20.toPeriod(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration20.toIntervalTo(readableInstant23);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getEnd();
        boolean boolean27 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Duration duration33 = duration31.plus(readableDuration32);
        org.joda.time.Duration duration35 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = duration35.toPeriod(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration35.toIntervalTo(readableInstant38);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getEnd();
        java.lang.String str42 = dateTime41.toString();
        boolean boolean43 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Duration duration50 = duration48.plus(readableDuration49);
        org.joda.time.Duration duration52 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = duration52.toPeriod(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Interval interval56 = duration52.toIntervalTo(readableInstant55);
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.hourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.dayOfYear();
        org.joda.time.Chronology chronology62 = chronology58.withUTC();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(100000L, chronology58);
        java.lang.String str64 = mutablePeriod63.toString();
        mutablePeriod63.setYears(0);
        mutablePeriod63.setSeconds(1);
        boolean boolean69 = dateTime26.equals((java.lang.Object) mutablePeriod63);
        org.joda.time.Chronology chronology70 = dateTime26.getChronology();
        org.joda.time.Instant instant71 = dateTime26.toInstant();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:36:06.915Z" + "'", str42, "2022-02-11T09:36:06.915Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT1M40S" + "'", str64, "PT1M40S");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(instant71);
    }

    @Test
    public void test00495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00495");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Duration duration8 = duration6.plus(readableDuration7);
        org.joda.time.Duration duration10 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, (int) (byte) 10);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Duration duration16 = duration14.plus(readableDuration15);
        org.joda.time.Duration duration18 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) (byte) 10);
        boolean boolean19 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration12.toPeriod(periodType20, chronology21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod27.setPeriod(readablePeriod28);
        mutablePeriod27.addWeeks((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        int int33 = mutablePeriod27.get(durationFieldType32);
        boolean boolean34 = periodType20.isSupported(durationFieldType32);
        int int35 = periodType20.size();
        org.joda.time.PeriodType periodType36 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType36);
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        int int42 = periodType41.size();
        org.joda.time.PeriodType periodType43 = periodType41.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter40.withParseType(periodType43);
        boolean boolean45 = periodFormatter40.isPrinter();
        java.io.Writer writer46 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology53);
        mutablePeriod50.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        mutablePeriod54.add(0, 0, (int) ' ', (int) 'a', (int) 'a', 1, 0, (int) (byte) -1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology71);
        mutablePeriod68.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        mutablePeriod68.clear();
        mutablePeriod68.setValue((int) (byte) 0, (-1));
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod68);
        int int79 = mutablePeriod54.getSeconds();
        mutablePeriod54.addDays((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter40.printTo(writer46, (org.joda.time.ReadablePeriod) mutablePeriod54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test00496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00496");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes((long) 1);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) (short) 100);
        boolean boolean13 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        java.lang.String str14 = duration12.toString();
        org.joda.time.Duration duration16 = org.joda.time.Duration.millis((long) 100);
        boolean boolean17 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration16);
        java.lang.String str18 = duration12.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT6000S" + "'", str14, "PT6000S");
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT6000S" + "'", str18, "PT6000S");
    }

    @Test
    public void test00497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00497");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Duration duration5 = duration3.plus(readableDuration4);
        org.joda.time.Duration duration7 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, (int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = duration7.toPeriod(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration7.toIntervalTo(readableInstant10);
        org.joda.time.Period period12 = interval11.toPeriod();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Duration duration19 = duration17.plus(readableDuration18);
        org.joda.time.Duration duration21 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (byte) 10);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        boolean boolean30 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration23.toPeriod(periodType31, chronology32);
        org.joda.time.PeriodType periodType34 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType31.withWeeksRemoved();
        org.joda.time.PeriodType periodType36 = periodType31.withSecondsRemoved();
        org.joda.time.Period period37 = interval11.toPeriod(periodType31);
        org.joda.time.PeriodType periodType38 = periodType31.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(periodType31);
        org.joda.time.PeriodType periodType40 = periodType31.withMonthsRemoved();
        java.lang.String str41 = periodType40.getName();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Years" + "'", str41, "Years");
    }

    @Test
    public void test00498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00498");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        boolean boolean4 = periodFormatter2.isParser();
        java.io.Writer writer5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer5, readablePeriod6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00499");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) '4', 0L, chronology9);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = mutablePeriod10.getFieldTypes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod15.addHours(0);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration19.plus(readableDuration20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration25.plus(readableDuration26);
        org.joda.time.Duration duration29 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration29.toPeriod(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration21, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(100L, (long) 1, periodType13, chronology35);
        java.lang.String str39 = chronology35.toString();
        org.joda.time.DurationField durationField40 = chronology35.hours();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (byte) 10, chronology35);
        org.joda.time.DateTimeField dateTimeField42 = chronology35.yearOfEra();
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str39, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test00500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00500");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration6 = duration4.plus(readableDuration5);
        org.joda.time.Duration duration8 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration4, (int) (byte) 10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Duration duration14 = duration12.plus(readableDuration13);
        org.joda.time.Duration duration16 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, (int) (byte) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration22 = duration20.plus(readableDuration21);
        org.joda.time.Duration duration24 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        boolean boolean25 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration18.toPeriod(periodType26, chronology27);
        int int29 = duration8.compareTo((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) '4');
        mutablePeriod31.addHours(0);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Duration duration37 = duration35.plus(readableDuration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) '#');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration41.plus(readableDuration42);
        org.joda.time.Duration duration45 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = duration45.toPeriod(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Interval interval49 = duration45.toIntervalTo(readableInstant48);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration37, chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.Period period55 = duration18.toPeriod(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(13824000000000L, chronology51);
        org.joda.time.DurationField durationField59 = chronology51.hours();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str53, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField59);
    }
}
